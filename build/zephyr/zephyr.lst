
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:

	return fd_entry->obj;
}

int z_reserve_fd(void)
{
   0:	200016d8 	.word	0x200016d8
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&mutex, *(uintptr_t *)&timeout, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
   4:	00001641 	.word	0x00001641
   8:	00004dd3 	.word	0x00004dd3
		if (fdtable[fd].obj == NULL) {
   c:	00001515 	.word	0x00001515
  10:	00001515 	.word	0x00001515
  14:	00001515 	.word	0x00001515
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
  18:	00001515 	.word	0x00001515
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
  1c:	00001515 	.word	0x00001515
	errno = ENFILE;
  20:	00001515 	.word	0x00001515
	return -1;
  24:	00001515 	.word	0x00001515
		arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_mutex_unlock(mutex);
  28:	00001515 	.word	0x00001515
  2c:	0000140d 	.word	0x0000140d
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
  30:	00001515 	.word	0x00001515
		fdtable[fd].obj = FD_OBJ_RESERVED;
  34:	00001515 	.word	0x00001515
  38:	000013b9 	.word	0x000013b9
  3c:	00004dc3 	.word	0x00004dc3

00000040 <_irq_vector_table>:
  40:	00001601 00001601 00001601 00001601     ................
		sys_pm_notify_power_state_exit(pm_state);
		_sys_pm_power_state_exit_post_ops(pm_state);
	}

	return pm_state;
}
  50:	00001601 00001601 00001601 00001601     ................
  60:	00001601 00001601 00001601 00001601     ................
  70:	00001601 00001601 00001601 00001601     ................
  80:	00001601 00001601 00001601 00001601     ................
  90:	00001601 00001601 00001601 00001601     ................
  a0:	00001601 00001601 00001601 00001601     ................
  b0:	00001601 00001601 00001601 00001601     ................
  c0:	00001601 00001601 00001601 00001601     ................
  d0:	00001601 00001601 00001601              ............

Disassembly of section _TEXT_SECTION_NAME_2:

000000dc <__aeabi_uldivmod>:
      dc:	b953      	cbnz	r3, f4 <__aeabi_uldivmod+0x18>
      de:	b94a      	cbnz	r2, f4 <__aeabi_uldivmod+0x18>
      e0:	2900      	cmp	r1, #0
      e2:	bf08      	it	eq
      e4:	2800      	cmpeq	r0, #0
      e6:	bf1c      	itt	ne
      e8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
      ec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
      f0:	f000 b80c 	b.w	10c <__aeabi_idiv0>
      f4:	f1ad 0c08 	sub.w	ip, sp, #8
      f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
      fc:	f000 f808 	bl	110 <__udivmoddi4>
     100:	f8dd e004 	ldr.w	lr, [sp, #4]
     104:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     108:	b004      	add	sp, #16
     10a:	4770      	bx	lr

0000010c <__aeabi_idiv0>:
     10c:	4770      	bx	lr
     10e:	bf00      	nop

00000110 <__udivmoddi4>:
     110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     114:	9f09      	ldr	r7, [sp, #36]	; 0x24
     116:	4615      	mov	r5, r2
     118:	4604      	mov	r4, r0
     11a:	468e      	mov	lr, r1
     11c:	461e      	mov	r6, r3
     11e:	2b00      	cmp	r3, #0
     120:	f040 80cc 	bne.w	2bc <CONFIG_FLASH_SIZE+0xbc>
     124:	428a      	cmp	r2, r1
     126:	fab2 fc82 	clz	ip, r2
     12a:	d94c      	bls.n	1c6 <CONFIG_IDLE_STACK_SIZE+0x86>
     12c:	f1bc 0f00 	cmp.w	ip, #0
     130:	d00b      	beq.n	14a <CONFIG_IDLE_STACK_SIZE+0xa>
     132:	f1cc 0820 	rsb	r8, ip, #32
     136:	fa01 fe0c 	lsl.w	lr, r1, ip
     13a:	fa20 f808 	lsr.w	r8, r0, r8
     13e:	fa02 f50c 	lsl.w	r5, r2, ip
     142:	ea48 0e0e 	orr.w	lr, r8, lr
     146:	fa00 f40c 	lsl.w	r4, r0, ip
     14a:	ea4f 4915 	mov.w	r9, r5, lsr #16
     14e:	fa1f f885 	uxth.w	r8, r5
     152:	fbbe faf9 	udiv	sl, lr, r9
     156:	0c21      	lsrs	r1, r4, #16
     158:	fb09 e31a 	mls	r3, r9, sl, lr
     15c:	fb0a fb08 	mul.w	fp, sl, r8
     160:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     164:	459b      	cmp	fp, r3
     166:	d92a      	bls.n	1be <CONFIG_IDLE_STACK_SIZE+0x7e>
     168:	18eb      	adds	r3, r5, r3
     16a:	f10a 30ff 	add.w	r0, sl, #4294967295	; 0xffffffff
     16e:	d204      	bcs.n	17a <CONFIG_IDLE_STACK_SIZE+0x3a>
     170:	459b      	cmp	fp, r3
     172:	d902      	bls.n	17a <CONFIG_IDLE_STACK_SIZE+0x3a>
     174:	f1aa 0002 	sub.w	r0, sl, #2
     178:	442b      	add	r3, r5
     17a:	eba3 030b 	sub.w	r3, r3, fp
     17e:	b2a4      	uxth	r4, r4
     180:	fbb3 f2f9 	udiv	r2, r3, r9
     184:	fb09 3312 	mls	r3, r9, r2, r3
     188:	fb02 f808 	mul.w	r8, r2, r8
     18c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     190:	45a0      	cmp	r8, r4
     192:	d916      	bls.n	1c2 <CONFIG_IDLE_STACK_SIZE+0x82>
     194:	192c      	adds	r4, r5, r4
     196:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     19a:	d203      	bcs.n	1a4 <CONFIG_IDLE_STACK_SIZE+0x64>
     19c:	45a0      	cmp	r8, r4
     19e:	d901      	bls.n	1a4 <CONFIG_IDLE_STACK_SIZE+0x64>
     1a0:	1e93      	subs	r3, r2, #2
     1a2:	442c      	add	r4, r5
     1a4:	eba4 0408 	sub.w	r4, r4, r8
     1a8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     1ac:	b127      	cbz	r7, 1b8 <CONFIG_IDLE_STACK_SIZE+0x78>
     1ae:	fa24 f40c 	lsr.w	r4, r4, ip
     1b2:	2300      	movs	r3, #0
     1b4:	603c      	str	r4, [r7, #0]
     1b6:	607b      	str	r3, [r7, #4]
     1b8:	4631      	mov	r1, r6
     1ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     1be:	4650      	mov	r0, sl
     1c0:	e7db      	b.n	17a <CONFIG_IDLE_STACK_SIZE+0x3a>
     1c2:	4613      	mov	r3, r2
     1c4:	e7ee      	b.n	1a4 <CONFIG_IDLE_STACK_SIZE+0x64>
     1c6:	b902      	cbnz	r2, 1ca <CONFIG_IDLE_STACK_SIZE+0x8a>
     1c8:	deff      	udf	#255	; 0xff
     1ca:	f1bc 0f00 	cmp.w	ip, #0
     1ce:	d12e      	bne.n	22e <CONFIG_FLASH_SIZE+0x2e>
     1d0:	1a8b      	subs	r3, r1, r2
     1d2:	2601      	movs	r6, #1
     1d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1d8:	b2aa      	uxth	r2, r5
     1da:	fbb3 f8fe 	udiv	r8, r3, lr
     1de:	0c21      	lsrs	r1, r4, #16
     1e0:	fb0e 3318 	mls	r3, lr, r8, r3
     1e4:	fb08 f902 	mul.w	r9, r8, r2
     1e8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     1ec:	4599      	cmp	r9, r3
     1ee:	d961      	bls.n	2b4 <CONFIG_FLASH_SIZE+0xb4>
     1f0:	18eb      	adds	r3, r5, r3
     1f2:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     1f6:	d204      	bcs.n	202 <CONFIG_FLASH_SIZE+0x2>
     1f8:	4599      	cmp	r9, r3
     1fa:	d902      	bls.n	202 <CONFIG_FLASH_SIZE+0x2>
     1fc:	f1a8 0002 	sub.w	r0, r8, #2
     200:	442b      	add	r3, r5
     202:	eba3 0309 	sub.w	r3, r3, r9
     206:	b2a4      	uxth	r4, r4
     208:	fbb3 f1fe 	udiv	r1, r3, lr
     20c:	fb0e 3311 	mls	r3, lr, r1, r3
     210:	434a      	muls	r2, r1
     212:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     216:	42a2      	cmp	r2, r4
     218:	d94e      	bls.n	2b8 <CONFIG_FLASH_SIZE+0xb8>
     21a:	192c      	adds	r4, r5, r4
     21c:	f101 33ff 	add.w	r3, r1, #4294967295	; 0xffffffff
     220:	d203      	bcs.n	22a <CONFIG_FLASH_SIZE+0x2a>
     222:	42a2      	cmp	r2, r4
     224:	d901      	bls.n	22a <CONFIG_FLASH_SIZE+0x2a>
     226:	1e8b      	subs	r3, r1, #2
     228:	442c      	add	r4, r5
     22a:	1aa4      	subs	r4, r4, r2
     22c:	e7bc      	b.n	1a8 <CONFIG_IDLE_STACK_SIZE+0x68>
     22e:	f1cc 0e20 	rsb	lr, ip, #32
     232:	fa02 f50c 	lsl.w	r5, r2, ip
     236:	fa21 f90e 	lsr.w	r9, r1, lr
     23a:	fa01 f30c 	lsl.w	r3, r1, ip
     23e:	fa20 fe0e 	lsr.w	lr, r0, lr
     242:	ea4e 0303 	orr.w	r3, lr, r3
     246:	ea4f 4815 	mov.w	r8, r5, lsr #16
     24a:	fa00 f40c 	lsl.w	r4, r0, ip
     24e:	fbb9 f1f8 	udiv	r1, r9, r8
     252:	fa1f fe85 	uxth.w	lr, r5
     256:	fb08 9211 	mls	r2, r8, r1, r9
     25a:	0c18      	lsrs	r0, r3, #16
     25c:	fb01 f60e 	mul.w	r6, r1, lr
     260:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
     264:	4296      	cmp	r6, r2
     266:	d921      	bls.n	2ac <CONFIG_FLASH_SIZE+0xac>
     268:	18aa      	adds	r2, r5, r2
     26a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
     26e:	d203      	bcs.n	278 <CONFIG_FLASH_SIZE+0x78>
     270:	4296      	cmp	r6, r2
     272:	d901      	bls.n	278 <CONFIG_FLASH_SIZE+0x78>
     274:	1e88      	subs	r0, r1, #2
     276:	442a      	add	r2, r5
     278:	1b92      	subs	r2, r2, r6
     27a:	b29b      	uxth	r3, r3
     27c:	fbb2 f9f8 	udiv	r9, r2, r8
     280:	fb08 2219 	mls	r2, r8, r9, r2
     284:	fb09 fe0e 	mul.w	lr, r9, lr
     288:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
     28c:	459e      	cmp	lr, r3
     28e:	d90f      	bls.n	2b0 <CONFIG_FLASH_SIZE+0xb0>
     290:	18eb      	adds	r3, r5, r3
     292:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
     296:	d204      	bcs.n	2a2 <CONFIG_FLASH_SIZE+0xa2>
     298:	459e      	cmp	lr, r3
     29a:	d902      	bls.n	2a2 <CONFIG_FLASH_SIZE+0xa2>
     29c:	f1a9 0602 	sub.w	r6, r9, #2
     2a0:	442b      	add	r3, r5
     2a2:	eba3 030e 	sub.w	r3, r3, lr
     2a6:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     2aa:	e793      	b.n	1d4 <CONFIG_IDLE_STACK_SIZE+0x94>
     2ac:	4608      	mov	r0, r1
     2ae:	e7e3      	b.n	278 <CONFIG_FLASH_SIZE+0x78>
     2b0:	464e      	mov	r6, r9
     2b2:	e7f6      	b.n	2a2 <CONFIG_FLASH_SIZE+0xa2>
     2b4:	4640      	mov	r0, r8
     2b6:	e7a4      	b.n	202 <CONFIG_FLASH_SIZE+0x2>
     2b8:	460b      	mov	r3, r1
     2ba:	e7b6      	b.n	22a <CONFIG_FLASH_SIZE+0x2a>
     2bc:	428b      	cmp	r3, r1
     2be:	d905      	bls.n	2cc <CONFIG_FLASH_SIZE+0xcc>
     2c0:	b10f      	cbz	r7, 2c6 <CONFIG_FLASH_SIZE+0xc6>
     2c2:	e9c7 0100 	strd	r0, r1, [r7]
     2c6:	2600      	movs	r6, #0
     2c8:	4630      	mov	r0, r6
     2ca:	e775      	b.n	1b8 <CONFIG_IDLE_STACK_SIZE+0x78>
     2cc:	fab3 fc83 	clz	ip, r3
     2d0:	f1bc 0f00 	cmp.w	ip, #0
     2d4:	d10f      	bne.n	2f6 <CONFIG_FLASH_SIZE+0xf6>
     2d6:	428b      	cmp	r3, r1
     2d8:	d301      	bcc.n	2de <CONFIG_FLASH_SIZE+0xde>
     2da:	4282      	cmp	r2, r0
     2dc:	d809      	bhi.n	2f2 <CONFIG_FLASH_SIZE+0xf2>
     2de:	1a84      	subs	r4, r0, r2
     2e0:	eb61 0e03 	sbc.w	lr, r1, r3
     2e4:	2001      	movs	r0, #1
     2e6:	2f00      	cmp	r7, #0
     2e8:	d06a      	beq.n	3c0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xc0>
     2ea:	e9c7 4e00 	strd	r4, lr, [r7]
     2ee:	2600      	movs	r6, #0
     2f0:	e762      	b.n	1b8 <CONFIG_IDLE_STACK_SIZE+0x78>
     2f2:	4660      	mov	r0, ip
     2f4:	e7f7      	b.n	2e6 <CONFIG_FLASH_SIZE+0xe6>
     2f6:	f1cc 0e20 	rsb	lr, ip, #32
     2fa:	fa03 f30c 	lsl.w	r3, r3, ip
     2fe:	fa22 f50e 	lsr.w	r5, r2, lr
     302:	fa21 f40e 	lsr.w	r4, r1, lr
     306:	431d      	orrs	r5, r3
     308:	fa01 f30c 	lsl.w	r3, r1, ip
     30c:	fa20 f10e 	lsr.w	r1, r0, lr
     310:	430b      	orrs	r3, r1
     312:	ea4f 4a15 	mov.w	sl, r5, lsr #16
     316:	fa00 f60c 	lsl.w	r6, r0, ip
     31a:	fbb4 f9fa 	udiv	r9, r4, sl
     31e:	fa1f f885 	uxth.w	r8, r5
     322:	fb0a 4019 	mls	r0, sl, r9, r4
     326:	0c1c      	lsrs	r4, r3, #16
     328:	fb09 f108 	mul.w	r1, r9, r8
     32c:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
     330:	42a1      	cmp	r1, r4
     332:	fa02 f20c 	lsl.w	r2, r2, ip
     336:	d93f      	bls.n	3b8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb8>
     338:	192c      	adds	r4, r5, r4
     33a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     33e:	d204      	bcs.n	34a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x4a>
     340:	42a1      	cmp	r1, r4
     342:	d902      	bls.n	34a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x4a>
     344:	f1a9 0002 	sub.w	r0, r9, #2
     348:	442c      	add	r4, r5
     34a:	1a64      	subs	r4, r4, r1
     34c:	b29b      	uxth	r3, r3
     34e:	fbb4 f9fa 	udiv	r9, r4, sl
     352:	fb0a 4419 	mls	r4, sl, r9, r4
     356:	fb09 f808 	mul.w	r8, r9, r8
     35a:	ea43 4104 	orr.w	r1, r3, r4, lsl #16
     35e:	4588      	cmp	r8, r1
     360:	d92c      	bls.n	3bc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xbc>
     362:	1869      	adds	r1, r5, r1
     364:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
     368:	d204      	bcs.n	374 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x74>
     36a:	4588      	cmp	r8, r1
     36c:	d902      	bls.n	374 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x74>
     36e:	f1a9 0302 	sub.w	r3, r9, #2
     372:	4429      	add	r1, r5
     374:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     378:	eba1 0108 	sub.w	r1, r1, r8
     37c:	fba0 8902 	umull	r8, r9, r0, r2
     380:	4549      	cmp	r1, r9
     382:	46c2      	mov	sl, r8
     384:	464c      	mov	r4, r9
     386:	d302      	bcc.n	38e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8e>
     388:	d106      	bne.n	398 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x98>
     38a:	4546      	cmp	r6, r8
     38c:	d204      	bcs.n	398 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x98>
     38e:	ebb8 0a02 	subs.w	sl, r8, r2
     392:	eb69 0405 	sbc.w	r4, r9, r5
     396:	3801      	subs	r0, #1
     398:	b197      	cbz	r7, 3c0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xc0>
     39a:	ebb6 030a 	subs.w	r3, r6, sl
     39e:	eb61 0604 	sbc.w	r6, r1, r4
     3a2:	fa06 fe0e 	lsl.w	lr, r6, lr
     3a6:	fa23 f30c 	lsr.w	r3, r3, ip
     3aa:	ea4e 0303 	orr.w	r3, lr, r3
     3ae:	fa26 f60c 	lsr.w	r6, r6, ip
     3b2:	e9c7 3600 	strd	r3, r6, [r7]
     3b6:	e79a      	b.n	2ee <CONFIG_FLASH_SIZE+0xee>
     3b8:	4648      	mov	r0, r9
     3ba:	e7c6      	b.n	34a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x4a>
     3bc:	464b      	mov	r3, r9
     3be:	e7d9      	b.n	374 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x74>
     3c0:	463e      	mov	r6, r7
     3c2:	e6f9      	b.n	1b8 <CONFIG_IDLE_STACK_SIZE+0x78>

000003c4 <button0_callback>:
u8_t data = 0;

struct device *pwm_dev;

void button0_callback(struct device *gpiob, struct gpio_callback *cb, u32_t pins)
{
     3c4:	b508      	push	{r3, lr}
    printk("Button 0 pressed!\n");
     3c6:	4805      	ldr	r0, [pc, #20]	; (3dc <button0_callback+0x18>)
     3c8:	f004 f90e 	bl	45e8 <printk>
    button0_pressed = 1;
     3cc:	4b04      	ldr	r3, [pc, #16]	; (3e0 <button0_callback+0x1c>)
    printk("Button 0 Value [%d]\n", button0_pressed);
     3ce:	4805      	ldr	r0, [pc, #20]	; (3e4 <button0_callback+0x20>)
    button0_pressed = 1;
     3d0:	2101      	movs	r1, #1
     3d2:	7019      	strb	r1, [r3, #0]
}
     3d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    printk("Button 0 Value [%d]\n", button0_pressed);
     3d8:	f004 b906 	b.w	45e8 <printk>
     3dc:	00005944 	.word	0x00005944
     3e0:	200003cc 	.word	0x200003cc
     3e4:	00005957 	.word	0x00005957

000003e8 <pwm_pin_set_usec.constprop.0>:
 * @param pulse Pulse width (in microseconds) set to the PWM.
 *
 * @retval 0 If successful.
 * @retval Negative errno code if failure.
 */
static inline int pwm_pin_set_usec(struct device *dev, u32_t pwm,
     3e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     3ec:	4680      	mov	r8, r0
     3ee:	468a      	mov	sl, r1
	return api->get_cycles_per_sec(dev, pwm, cycles);
     3f0:	6843      	ldr	r3, [r0, #4]
     3f2:	466a      	mov	r2, sp
     3f4:	685b      	ldr	r3, [r3, #4]
     3f6:	2111      	movs	r1, #17
     3f8:	4798      	blx	r3
				   u32_t period, u32_t pulse)
{
	u64_t period_cycles, pulse_cycles, cycles_per_sec;

	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
     3fa:	bb88      	cbnz	r0, 460 <CONFIG_LOG_BUFFER_SIZE+0x60>
		return -EIO;
	}

	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
     3fc:	e9dd 4900 	ldrd	r4, r9, [sp]
     400:	f644 6320 	movw	r3, #20000	; 0x4e20
     404:	fba4 6703 	umull	r6, r7, r4, r3
     408:	fb03 7709 	mla	r7, r3, r9, r7
     40c:	4a17      	ldr	r2, [pc, #92]	; (46c <CONFIG_LOG_BUFFER_SIZE+0x6c>)
     40e:	2300      	movs	r3, #0
     410:	4630      	mov	r0, r6
     412:	4639      	mov	r1, r7
     414:	f7ff fe62 	bl	dc <__aeabi_uldivmod>
	if (period_cycles >= ((u64_t)1 << 32)) {
     418:	4b15      	ldr	r3, [pc, #84]	; (470 <CONFIG_LOG_BUFFER_SIZE+0x70>)
     41a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     41e:	42bb      	cmp	r3, r7
     420:	bf08      	it	eq
     422:	42b2      	cmpeq	r2, r6
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
     424:	4683      	mov	fp, r0
	if (period_cycles >= ((u64_t)1 << 32)) {
     426:	d31e      	bcc.n	466 <CONFIG_LOG_BUFFER_SIZE+0x66>
		return -ENOTSUP;
	}

	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
     428:	fbaa 4504 	umull	r4, r5, sl, r4
     42c:	fb0a 5509 	mla	r5, sl, r9, r5
     430:	4a0e      	ldr	r2, [pc, #56]	; (46c <CONFIG_LOG_BUFFER_SIZE+0x6c>)
     432:	2300      	movs	r3, #0
     434:	4620      	mov	r0, r4
     436:	4629      	mov	r1, r5
     438:	f7ff fe50 	bl	dc <__aeabi_uldivmod>
	if (pulse_cycles >= ((u64_t)1 << 32)) {
     43c:	4a0c      	ldr	r2, [pc, #48]	; (470 <CONFIG_LOG_BUFFER_SIZE+0x70>)
     43e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     442:	42aa      	cmp	r2, r5
     444:	bf08      	it	eq
     446:	42a1      	cmpeq	r1, r4
	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
     448:	4603      	mov	r3, r0
	if (pulse_cycles >= ((u64_t)1 << 32)) {
     44a:	d30c      	bcc.n	466 <CONFIG_LOG_BUFFER_SIZE+0x66>
	return api->pin_set(dev, pwm, period, pulse);
     44c:	f8d8 2004 	ldr.w	r2, [r8, #4]
     450:	2111      	movs	r1, #17
     452:	6814      	ldr	r4, [r2, #0]
     454:	4640      	mov	r0, r8
     456:	465a      	mov	r2, fp
     458:	47a0      	blx	r4
		return -ENOTSUP;
	}

	return pwm_pin_set_cycles(dev, pwm, (u32_t)period_cycles,
				  (u32_t)pulse_cycles);
}
     45a:	b003      	add	sp, #12
     45c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EIO;
     460:	f06f 0004 	mvn.w	r0, #4
     464:	e7f9      	b.n	45a <CONFIG_LOG_BUFFER_SIZE+0x5a>
		return -ENOTSUP;
     466:	f06f 0022 	mvn.w	r0, #34	; 0x22
     46a:	e7f6      	b.n	45a <CONFIG_LOG_BUFFER_SIZE+0x5a>
     46c:	000f4240 	.word	0x000f4240
     470:	000f423f 	.word	0x000f423f

00000474 <buttonPWMThread>:


// THREAD DOS BOTÕES
// Ao pressionar o botão LED PWM ativado
void buttonPWMThread(void)
{
     474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        printk("Hello button Thread\n");
     478:	4814      	ldr	r0, [pc, #80]	; (4cc <buttonPWMThread+0x58>)


        while(1)
        {   
            k_sleep(K_MSEC(PWM_TIME));
            if(button0_pressed == 1)    
     47a:	4f15      	ldr	r7, [pc, #84]	; (4d0 <buttonPWMThread+0x5c>)
            {
                if (pwm_pin_set_usec(pwm_dev, PWM_CHANNEL, PERIOD, (PERIOD / 50) * step)) 
     47c:	4e15      	ldr	r6, [pc, #84]	; (4d4 <buttonPWMThread+0x60>)
        printk("Hello button Thread\n");
     47e:	f004 f8b3 	bl	45e8 <printk>
        u8_t counter = 0;
     482:	2400      	movs	r4, #0
        u8_t step = 1;
     484:	2501      	movs	r5, #1
     486:	46b8      	mov	r8, r7
            k_sleep(K_MSEC(PWM_TIME));
     488:	2032      	movs	r0, #50	; 0x32
     48a:	f003 feb7 	bl	41fc <k_sleep>
            if(button0_pressed == 1)    
     48e:	783b      	ldrb	r3, [r7, #0]
     490:	2b01      	cmp	r3, #1
     492:	d1f9      	bne.n	488 <buttonPWMThread+0x14>
                if (pwm_pin_set_usec(pwm_dev, PWM_CHANNEL, PERIOD, (PERIOD / 50) * step)) 
     494:	f44f 71c8 	mov.w	r1, #400	; 0x190
     498:	4369      	muls	r1, r5
     49a:	6830      	ldr	r0, [r6, #0]
     49c:	f7ff ffa4 	bl	3e8 <pwm_pin_set_usec.constprop.0>
     4a0:	b110      	cbz	r0, 4a8 <buttonPWMThread+0x34>
                {
                    printk("pwm pin set fails\n");
     4a2:	480d      	ldr	r0, [pc, #52]	; (4d8 <buttonPWMThread+0x64>)
     4a4:	f004 f8a0 	bl	45e8 <printk>
                }

                step++;
     4a8:	3501      	adds	r5, #1
     4aa:	b2ed      	uxtb	r5, r5
                if (step == 50) 
     4ac:	2d32      	cmp	r5, #50	; 0x32
                {
                    step = 1;
                    counter += 1;
     4ae:	bf02      	ittt	eq
     4b0:	3401      	addeq	r4, #1
     4b2:	b2e4      	uxtbeq	r4, r4
                    step = 1;
     4b4:	2501      	moveq	r5, #1
                }

                if (counter == 2)
     4b6:	2c02      	cmp	r4, #2
     4b8:	d1e6      	bne.n	488 <buttonPWMThread+0x14>
                {
                    button0_pressed = 0;
     4ba:	2400      	movs	r4, #0
                    counter = 0;
                    pwm_pin_set_usec(pwm_dev, PWM_CHANNEL, PERIOD, (PERIOD / 50) * 1);
     4bc:	f44f 71c8 	mov.w	r1, #400	; 0x190
     4c0:	6830      	ldr	r0, [r6, #0]
                    button0_pressed = 0;
     4c2:	f888 4000 	strb.w	r4, [r8]
                    pwm_pin_set_usec(pwm_dev, PWM_CHANNEL, PERIOD, (PERIOD / 50) * 1);
     4c6:	f7ff ff8f 	bl	3e8 <pwm_pin_set_usec.constprop.0>
     4ca:	e7dd      	b.n	488 <buttonPWMThread+0x14>
     4cc:	0000596c 	.word	0x0000596c
     4d0:	200003cc 	.word	0x200003cc
     4d4:	20000160 	.word	0x20000160
     4d8:	00005981 	.word	0x00005981

000004dc <printThread>:
// TODO - MÁQUINA DE ESTADOS


// THREAD de Sincronização
void printThread(void)
{
     4dc:	b570      	push	{r4, r5, r6, lr}
    printk("Hello Print Thread\n");
     4de:	480b      	ldr	r0, [pc, #44]	; (50c <printThread+0x30>)
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sem, *(uintptr_t *)&timeout, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
     4e0:	4c0b      	ldr	r4, [pc, #44]	; (510 <printThread+0x34>)

    while(1)
    {
        k_sleep(K_MSEC(SLEEP_TIME));
        k_sem_take(&data_sem, K_FOREVER);
        test = data;
     4e2:	4e0c      	ldr	r6, [pc, #48]	; (514 <printThread+0x38>)
        printk("Value of data [%d]\n", test);
     4e4:	4d0c      	ldr	r5, [pc, #48]	; (518 <printThread+0x3c>)
    printk("Hello Print Thread\n");
     4e6:	f004 f87f 	bl	45e8 <printk>
        k_sleep(K_MSEC(SLEEP_TIME));
     4ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     4ee:	f003 fe85 	bl	41fc <k_sleep>
     4f2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     4f6:	4620      	mov	r0, r4
     4f8:	f003 fbfc 	bl	3cf4 <z_impl_k_sem_take>
        printk("Value of data [%d]\n", test);
     4fc:	7831      	ldrb	r1, [r6, #0]
     4fe:	4628      	mov	r0, r5
     500:	f004 f872 	bl	45e8 <printk>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
     504:	4620      	mov	r0, r4
     506:	f003 fbcf 	bl	3ca8 <z_impl_k_sem_give>
     50a:	e7ee      	b.n	4ea <printThread+0xe>
     50c:	00005a28 	.word	0x00005a28
     510:	20002630 	.word	0x20002630
     514:	200003cd 	.word	0x200003cd
     518:	00005a3c 	.word	0x00005a3c

0000051c <readThread>:
{
     51c:	b508      	push	{r3, lr}
    printk("Hello Read Thread\n");
     51e:	480a      	ldr	r0, [pc, #40]	; (548 <readThread+0x2c>)
	return z_impl_k_sem_take(sem, timeout);
     520:	4c0a      	ldr	r4, [pc, #40]	; (54c <readThread+0x30>)
        data += 1; 
     522:	4d0b      	ldr	r5, [pc, #44]	; (550 <readThread+0x34>)
    printk("Hello Read Thread\n");
     524:	f004 f860 	bl	45e8 <printk>
        k_sleep(K_MSEC(SLEEP_TIME));
     528:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     52c:	f003 fe66 	bl	41fc <k_sleep>
     530:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     534:	4620      	mov	r0, r4
     536:	f003 fbdd 	bl	3cf4 <z_impl_k_sem_take>
        data += 1; 
     53a:	782b      	ldrb	r3, [r5, #0]
     53c:	3301      	adds	r3, #1
     53e:	702b      	strb	r3, [r5, #0]
	z_impl_k_sem_give(sem);
     540:	4620      	mov	r0, r4
     542:	f003 fbb1 	bl	3ca8 <z_impl_k_sem_give>
     546:	e7ef      	b.n	528 <readThread+0xc>
     548:	00005a50 	.word	0x00005a50
     54c:	20002630 	.word	0x20002630
     550:	200003cd 	.word	0x200003cd

00000554 <main>:
{
     554:	b508      	push	{r3, lr}
    printk("Inicializando o Botão\n");
     556:	4815      	ldr	r0, [pc, #84]	; (5ac <main+0x58>)
     558:	f004 f846 	bl	45e8 <printk>
    button_create(&button0, BUTTON_DEVICE, BUTTON_PIN0, button0_callback);
     55c:	4b14      	ldr	r3, [pc, #80]	; (5b0 <main+0x5c>)
     55e:	4915      	ldr	r1, [pc, #84]	; (5b4 <main+0x60>)
     560:	4815      	ldr	r0, [pc, #84]	; (5b8 <main+0x64>)
     562:	220d      	movs	r2, #13
     564:	f003 fe4c 	bl	4200 <button_create>
    printk("Botão OK\n");
     568:	4814      	ldr	r0, [pc, #80]	; (5bc <main+0x68>)
     56a:	f004 f83d 	bl	45e8 <printk>
    printk("Inicializando o device PWM\n");
     56e:	4814      	ldr	r0, [pc, #80]	; (5c0 <main+0x6c>)
     570:	f004 f83a 	bl	45e8 <printk>
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     574:	4813      	ldr	r0, [pc, #76]	; (5c4 <main+0x70>)
     576:	f002 ff11 	bl	339c <z_impl_device_get_binding>
    pwm_dev = device_get_binding(PWM_DRIVER);
     57a:	4b13      	ldr	r3, [pc, #76]	; (5c8 <main+0x74>)
     57c:	6018      	str	r0, [r3, #0]
    if (!pwm_dev) 
     57e:	b988      	cbnz	r0, 5a4 <main+0x50>
        printk("Cannot find %s!\n", PWM_DRIVER);
     580:	4910      	ldr	r1, [pc, #64]	; (5c4 <main+0x70>)
     582:	4812      	ldr	r0, [pc, #72]	; (5cc <main+0x78>)
     584:	f004 f830 	bl	45e8 <printk>
    printk("Hello Main Thread\n");
     588:	4811      	ldr	r0, [pc, #68]	; (5d0 <main+0x7c>)
        printk(". main %d\n", data);
     58a:	4d12      	ldr	r5, [pc, #72]	; (5d4 <main+0x80>)
     58c:	4c12      	ldr	r4, [pc, #72]	; (5d8 <main+0x84>)
    printk("Hello Main Thread\n");
     58e:	f004 f82b 	bl	45e8 <printk>
        k_sleep(K_SECONDS(1));
     592:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     596:	f003 fe31 	bl	41fc <k_sleep>
        printk(". main %d\n", data);
     59a:	7829      	ldrb	r1, [r5, #0]
     59c:	4620      	mov	r0, r4
     59e:	f004 f823 	bl	45e8 <printk>
     5a2:	e7f6      	b.n	592 <main+0x3e>
        printk("PWM device inicializado\n");
     5a4:	480d      	ldr	r0, [pc, #52]	; (5dc <main+0x88>)
     5a6:	f004 f81f 	bl	45e8 <printk>
     5aa:	e7ed      	b.n	588 <main+0x34>
     5ac:	00005994 	.word	0x00005994
     5b0:	000003c5 	.word	0x000003c5
     5b4:	000059ac 	.word	0x000059ac
     5b8:	2000014c 	.word	0x2000014c
     5bc:	000059b3 	.word	0x000059b3
     5c0:	000059be 	.word	0x000059be
     5c4:	000059da 	.word	0x000059da
     5c8:	20000160 	.word	0x20000160
     5cc:	000059e0 	.word	0x000059e0
     5d0:	00005a0a 	.word	0x00005a0a
     5d4:	200003cd 	.word	0x200003cd
     5d8:	00005a1d 	.word	0x00005a1d
     5dc:	000059f1 	.word	0x000059f1

000005e0 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     5e0:	680b      	ldr	r3, [r1, #0]
     5e2:	3301      	adds	r3, #1
     5e4:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     5e6:	4b01      	ldr	r3, [pc, #4]	; (5ec <char_out+0xc>)
     5e8:	681b      	ldr	r3, [r3, #0]
     5ea:	4718      	bx	r3
     5ec:	200024e0 	.word	0x200024e0

000005f0 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
     5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     5f4:	b085      	sub	sp, #20
     5f6:	469b      	mov	fp, r3
     5f8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
     5fa:	f8df 9088 	ldr.w	r9, [pc, #136]	; 684 <_printk_dec_ulong+0x94>
     5fe:	2c01      	cmp	r4, #1
     600:	bfb8      	it	lt
     602:	2401      	movlt	r4, #1
     604:	2b01      	cmp	r3, #1
     606:	bf0c      	ite	eq
     608:	2330      	moveq	r3, #48	; 0x30
     60a:	2320      	movne	r3, #32
     60c:	4616      	mov	r6, r2
     60e:	4682      	mov	sl, r0
     610:	4688      	mov	r8, r1
     612:	9302      	str	r3, [sp, #8]
     614:	2501      	movs	r5, #1
     616:	270a      	movs	r7, #10
     618:	2200      	movs	r2, #0
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
     61a:	fbb6 f3f9 	udiv	r3, r6, r9
     61e:	9301      	str	r3, [sp, #4]
     620:	b90a      	cbnz	r2, 626 <_printk_dec_ulong+0x36>
     622:	45b1      	cmp	r9, r6
     624:	d81d      	bhi.n	662 <_printk_dec_ulong+0x72>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
     626:	9b01      	ldr	r3, [sp, #4]
     628:	4641      	mov	r1, r8
     62a:	f103 0030 	add.w	r0, r3, #48	; 0x30
     62e:	47d0      	blx	sl
			digits++;
     630:	3501      	adds	r5, #1
			found_largest_digit = 1;
     632:	2201      	movs	r2, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
     634:	9b01      	ldr	r3, [sp, #4]
		remaining--;
     636:	3f01      	subs	r7, #1
	while (pos >= 10) {
     638:	2f01      	cmp	r7, #1
		remainder %= pos;
     63a:	fb09 6613 	mls	r6, r9, r3, r6
		pos /= 10;
     63e:	f04f 030a 	mov.w	r3, #10
     642:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
     646:	d1e8      	bne.n	61a <_printk_dec_ulong+0x2a>
	}
	out((int)(remainder + 48), ctx);
     648:	4641      	mov	r1, r8
     64a:	f106 0030 	add.w	r0, r6, #48	; 0x30
     64e:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
     650:	f1bb 0f03 	cmp.w	fp, #3
     654:	d102      	bne.n	65c <_printk_dec_ulong+0x6c>
		remaining = min_width - digits;
     656:	1b64      	subs	r4, r4, r5
		while (remaining-- > 0) {
     658:	2c00      	cmp	r4, #0
     65a:	dc0e      	bgt.n	67a <_printk_dec_ulong+0x8a>
			out(' ', ctx);
		}
	}
}
     65c:	b005      	add	sp, #20
     65e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
     662:	42bc      	cmp	r4, r7
     664:	dbe6      	blt.n	634 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
     666:	f1bb 0f02 	cmp.w	fp, #2
     66a:	d8e3      	bhi.n	634 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     66c:	4641      	mov	r1, r8
     66e:	9802      	ldr	r0, [sp, #8]
     670:	9203      	str	r2, [sp, #12]
			digits++;
     672:	3501      	adds	r5, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     674:	47d0      	blx	sl
			digits++;
     676:	9a03      	ldr	r2, [sp, #12]
     678:	e7dc      	b.n	634 <_printk_dec_ulong+0x44>
			out(' ', ctx);
     67a:	4641      	mov	r1, r8
     67c:	2020      	movs	r0, #32
     67e:	47d0      	blx	sl
     680:	3c01      	subs	r4, #1
     682:	e7e9      	b.n	658 <_printk_dec_ulong+0x68>
     684:	3b9aca00 	.word	0x3b9aca00

00000688 <__printk_hook_install>:
	_char_out = fn;
     688:	4b01      	ldr	r3, [pc, #4]	; (690 <__printk_hook_install+0x8>)
     68a:	6018      	str	r0, [r3, #0]
}
     68c:	4770      	bx	lr
     68e:	bf00      	nop
     690:	200024e0 	.word	0x200024e0

00000694 <vprintk>:
{
     694:	b507      	push	{r0, r1, r2, lr}
	struct out_context ctx = { 0 };
     696:	2300      	movs	r3, #0
     698:	9301      	str	r3, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
     69a:	4602      	mov	r2, r0
     69c:	460b      	mov	r3, r1
     69e:	4803      	ldr	r0, [pc, #12]	; (6ac <vprintk+0x18>)
     6a0:	a901      	add	r1, sp, #4
     6a2:	f003 fe31 	bl	4308 <z_vprintk>
}
     6a6:	b003      	add	sp, #12
     6a8:	f85d fb04 	ldr.w	pc, [sp], #4
     6ac:	000005e1 	.word	0x000005e1

000006b0 <enable_logger>:

K_THREAD_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(struct device *arg)
{
     6b0:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
     6b2:	2200      	movs	r2, #0
{
     6b4:	b087      	sub	sp, #28
		k_timer_init(&log_process_thread_timer,
     6b6:	490d      	ldr	r1, [pc, #52]	; (6ec <enable_logger+0x3c>)
     6b8:	480d      	ldr	r0, [pc, #52]	; (6f0 <enable_logger+0x40>)
     6ba:	f004 ff6c 	bl	5596 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
     6be:	4d0d      	ldr	r5, [pc, #52]	; (6f4 <enable_logger+0x44>)
     6c0:	490d      	ldr	r1, [pc, #52]	; (6f8 <enable_logger+0x48>)
     6c2:	2400      	movs	r4, #0
     6c4:	230e      	movs	r3, #14
     6c6:	e9cd 4302 	strd	r4, r3, [sp, #8]
     6ca:	e9cd 4404 	strd	r4, r4, [sp, #16]
     6ce:	e9cd 4400 	strd	r4, r4, [sp]
     6d2:	4b0a      	ldr	r3, [pc, #40]	; (6fc <enable_logger+0x4c>)
     6d4:	f44f 7240 	mov.w	r2, #768	; 0x300
     6d8:	4628      	mov	r0, r5
     6da:	f003 fb6b 	bl	3db4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
     6de:	4908      	ldr	r1, [pc, #32]	; (700 <enable_logger+0x50>)
     6e0:	4628      	mov	r0, r5
     6e2:	f004 fee1 	bl	54a8 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
     6e6:	4620      	mov	r0, r4
     6e8:	b007      	add	sp, #28
     6ea:	bd30      	pop	{r4, r5, pc}
     6ec:	00000705 	.word	0x00000705
     6f0:	20000178 	.word	0x20000178
     6f4:	200001c0 	.word	0x200001c0
     6f8:	20000fd8 	.word	0x20000fd8
     6fc:	00000b29 	.word	0x00000b29
     700:	00005a7b 	.word	0x00005a7b

00000704 <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
     704:	4801      	ldr	r0, [pc, #4]	; (70c <log_process_thread_timer_expiry_fn+0x8>)
     706:	f003 bacf 	b.w	3ca8 <z_impl_k_sem_give>
     70a:	bf00      	nop
     70c:	20002640 	.word	0x20002640

00000710 <log_core_init>:
{
     710:	b508      	push	{r3, lr}
		log_msg_pool_init();
     712:	f000 fa69 	bl	be8 <log_msg_pool_init>
		log_list_init(&list);
     716:	4809      	ldr	r0, [pc, #36]	; (73c <log_core_init+0x2c>)
     718:	f003 ff74 	bl	4604 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
     71c:	2304      	movs	r3, #4
     71e:	2228      	movs	r2, #40	; 0x28
     720:	4807      	ldr	r0, [pc, #28]	; (740 <log_core_init+0x30>)
     722:	4908      	ldr	r1, [pc, #32]	; (744 <log_core_init+0x34>)
     724:	f004 fdee 	bl	5304 <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
     728:	4b07      	ldr	r3, [pc, #28]	; (748 <log_core_init+0x38>)
     72a:	4a08      	ldr	r2, [pc, #32]	; (74c <log_core_init+0x3c>)
     72c:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
     72e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
}
     732:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
     736:	f000 bc87 	b.w	1048 <log_output_timestamp_freq_set>
     73a:	bf00      	nop
     73c:	20000170 	.word	0x20000170
     740:	200001a4 	.word	0x200001a4
     744:	20002040 	.word	0x20002040
     748:	200024e4 	.word	0x200024e4
     74c:	00004643 	.word	0x00004643

00000750 <dropped_notify>:
{
     750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
     752:	4b0f      	ldr	r3, [pc, #60]	; (790 <dropped_notify+0x40>)
     754:	f3bf 8f5b 	dmb	ish
     758:	2500      	movs	r5, #0
     75a:	e853 7f00 	ldrex	r7, [r3]
     75e:	e843 5200 	strex	r2, r5, [r3]
     762:	2a00      	cmp	r2, #0
     764:	d1f9      	bne.n	75a <dropped_notify+0xa>
     766:	f3bf 8f5b 	dmb	ish
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
     76a:	4c0a      	ldr	r4, [pc, #40]	; (794 <dropped_notify+0x44>)
     76c:	4e0a      	ldr	r6, [pc, #40]	; (798 <dropped_notify+0x48>)
     76e:	1b36      	subs	r6, r6, r4
     770:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
     772:	42b5      	cmp	r5, r6
     774:	db00      	blt.n	778 <dropped_notify+0x28>
}
     776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
     778:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
     77a:	795b      	ldrb	r3, [r3, #5]
     77c:	b12b      	cbz	r3, 78a <dropped_notify+0x3a>
	if (backend->api->dropped != NULL) {
     77e:	6823      	ldr	r3, [r4, #0]
     780:	68db      	ldr	r3, [r3, #12]
     782:	b113      	cbz	r3, 78a <dropped_notify+0x3a>
		backend->api->dropped(backend, cnt);
     784:	4639      	mov	r1, r7
     786:	4620      	mov	r0, r4
     788:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
     78a:	3501      	adds	r5, #1
     78c:	3410      	adds	r4, #16
     78e:	e7f0      	b.n	772 <dropped_notify+0x22>
     790:	20000168 	.word	0x20000168
     794:	00005808 	.word	0x00005808
     798:	00005818 	.word	0x00005818

0000079c <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
     79c:	4b06      	ldr	r3, [pc, #24]	; (7b8 <log_dropped+0x1c>)
     79e:	f3bf 8f5b 	dmb	ish
     7a2:	e853 2f00 	ldrex	r2, [r3]
     7a6:	3201      	adds	r2, #1
     7a8:	e843 2100 	strex	r1, r2, [r3]
     7ac:	2900      	cmp	r1, #0
     7ae:	d1f8      	bne.n	7a2 <log_dropped+0x6>
     7b0:	f3bf 8f5b 	dmb	ish
}
     7b4:	4770      	bx	lr
     7b6:	bf00      	nop
     7b8:	20000168 	.word	0x20000168

000007bc <log_source_name_get>:
 * @return Source ID.
 */
static inline u32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((u8_t *)data - (u8_t *)__log_const_start)/
     7bc:	4a04      	ldr	r2, [pc, #16]	; (7d0 <log_source_name_get+0x14>)
     7be:	4b05      	ldr	r3, [pc, #20]	; (7d4 <log_source_name_get+0x18>)
     7c0:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
     7c2:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
     7c6:	bf34      	ite	cc
     7c8:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
     7cc:	2000      	movcs	r0, #0
}
     7ce:	4770      	bx	lr
     7d0:	000057d0 	.word	0x000057d0
     7d4:	00005808 	.word	0x00005808

000007d8 <log_backend_enable>:
	id += backend - log_backend_get(0);
     7d8:	4b09      	ldr	r3, [pc, #36]	; (800 <CONFIG_ISR_STACK_SIZE>)
	log_backend_id_set(backend, id);
     7da:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
     7dc:	1ac3      	subs	r3, r0, r3
     7de:	111b      	asrs	r3, r3, #4
     7e0:	3301      	adds	r3, #1
{
     7e2:	b510      	push	{r4, lr}
	log_backend_id_set(backend, id);
     7e4:	7113      	strb	r3, [r2, #4]
	log_backend_activate(backend, ctx);
     7e6:	6843      	ldr	r3, [r0, #4]
	if (!backend_attached) {
     7e8:	4c06      	ldr	r4, [pc, #24]	; (804 <CONFIG_ISR_STACK_SIZE+0x4>)
	backend->cb->ctx = ctx;
     7ea:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
     7ec:	2201      	movs	r2, #1
     7ee:	715a      	strb	r2, [r3, #5]
     7f0:	7822      	ldrb	r2, [r4, #0]
     7f2:	b912      	cbnz	r2, 7fa <log_backend_enable+0x22>
     7f4:	4804      	ldr	r0, [pc, #16]	; (808 <CONFIG_ISR_STACK_SIZE+0x8>)
     7f6:	f003 fa57 	bl	3ca8 <z_impl_k_sem_give>
	backend_attached = true;
     7fa:	2301      	movs	r3, #1
     7fc:	7023      	strb	r3, [r4, #0]
}
     7fe:	bd10      	pop	{r4, pc}
     800:	00005808 	.word	0x00005808
     804:	200003ce 	.word	0x200003ce
     808:	20002640 	.word	0x20002640

0000080c <log_init>:
{
     80c:	b570      	push	{r4, r5, r6, lr}
     80e:	4b11      	ldr	r3, [pc, #68]	; (854 <log_init+0x48>)
     810:	f3bf 8f5b 	dmb	ish
     814:	e853 5f00 	ldrex	r5, [r3]
     818:	1c6a      	adds	r2, r5, #1
     81a:	e843 2100 	strex	r1, r2, [r3]
     81e:	2900      	cmp	r1, #0
     820:	d1f8      	bne.n	814 <log_init+0x8>
     822:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
     826:	b92d      	cbnz	r5, 834 <log_init+0x28>
	return __log_backends_end - __log_backends_start;
     828:	4c0b      	ldr	r4, [pc, #44]	; (858 <log_init+0x4c>)
     82a:	4e0c      	ldr	r6, [pc, #48]	; (85c <log_init+0x50>)
     82c:	1b36      	subs	r6, r6, r4
     82e:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
     830:	42b5      	cmp	r5, r6
     832:	db00      	blt.n	836 <log_init+0x2a>
}
     834:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
     836:	7b23      	ldrb	r3, [r4, #12]
     838:	b143      	cbz	r3, 84c <log_init+0x40>
			if (backend->api->init != NULL) {
     83a:	6823      	ldr	r3, [r4, #0]
     83c:	695b      	ldr	r3, [r3, #20]
     83e:	b103      	cbz	r3, 842 <log_init+0x36>
				backend->api->init();
     840:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
     842:	2204      	movs	r2, #4
     844:	2100      	movs	r1, #0
     846:	4620      	mov	r0, r4
     848:	f7ff ffc6 	bl	7d8 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
     84c:	3501      	adds	r5, #1
     84e:	3410      	adds	r4, #16
     850:	e7ee      	b.n	830 <log_init+0x24>
     852:	bf00      	nop
     854:	2000016c 	.word	0x2000016c
     858:	00005808 	.word	0x00005808
     85c:	00005818 	.word	0x00005818

00000860 <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
     860:	4b16      	ldr	r3, [pc, #88]	; (8bc <log_strdup+0x5c>)
     862:	4298      	cmp	r0, r3
{
     864:	b537      	push	{r0, r1, r2, r4, r5, lr}
     866:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
     868:	d302      	bcc.n	870 <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
     86a:	4b15      	ldr	r3, [pc, #84]	; (8c0 <log_strdup+0x60>)
     86c:	4298      	cmp	r0, r3
     86e:	d31f      	bcc.n	8b0 <log_strdup+0x50>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
     870:	2200      	movs	r2, #0
     872:	a901      	add	r1, sp, #4
     874:	4813      	ldr	r0, [pc, #76]	; (8c4 <log_strdup+0x64>)
     876:	f002 ff37 	bl	36e8 <k_mem_slab_alloc>
	if (err != 0) {
     87a:	4605      	mov	r5, r0
     87c:	b9d8      	cbnz	r0, 8b6 <log_strdup+0x56>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
     87e:	2201      	movs	r2, #1
     880:	9b01      	ldr	r3, [sp, #4]
     882:	f3bf 8f5b 	dmb	ish
     886:	e853 1f00 	ldrex	r1, [r3]
     88a:	e843 2000 	strex	r0, r2, [r3]
     88e:	2800      	cmp	r0, #0
     890:	d1f9      	bne.n	886 <log_strdup+0x26>
     892:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
     896:	9801      	ldr	r0, [sp, #4]
     898:	4621      	mov	r1, r4
     89a:	221f      	movs	r2, #31
     89c:	3004      	adds	r0, #4
     89e:	f004 faa7 	bl	4df0 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
     8a2:	9c01      	ldr	r4, [sp, #4]
     8a4:	237e      	movs	r3, #126	; 0x7e
     8a6:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
     8aa:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
	return dup->buf;
     8ae:	3404      	adds	r4, #4
}
     8b0:	4620      	mov	r0, r4
     8b2:	b003      	add	sp, #12
     8b4:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
     8b6:	4c04      	ldr	r4, [pc, #16]	; (8c8 <log_strdup+0x68>)
     8b8:	e7fa      	b.n	8b0 <log_strdup+0x50>
     8ba:	bf00      	nop
     8bc:	00005608 	.word	0x00005608
     8c0:	000061ec 	.word	0x000061ec
     8c4:	200001a4 	.word	0x200001a4
     8c8:	00005a83 	.word	0x00005a83

000008cc <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (u8_t *)buf);
     8cc:	b148      	cbz	r0, 8e2 <log_is_strdup+0x16>
     8ce:	4b05      	ldr	r3, [pc, #20]	; (8e4 <log_is_strdup+0x18>)
     8d0:	4298      	cmp	r0, r3
     8d2:	d305      	bcc.n	8e0 <log_is_strdup+0x14>
     8d4:	33a0      	adds	r3, #160	; 0xa0
     8d6:	4298      	cmp	r0, r3
     8d8:	bf2c      	ite	cs
     8da:	2000      	movcs	r0, #0
     8dc:	2001      	movcc	r0, #1
     8de:	4770      	bx	lr
     8e0:	2000      	movs	r0, #0
}
     8e2:	4770      	bx	lr
     8e4:	20002040 	.word	0x20002040

000008e8 <z_impl_log_process>:
{
     8e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
     8ec:	4b53      	ldr	r3, [pc, #332]	; (a3c <z_impl_log_process+0x154>)
     8ee:	781b      	ldrb	r3, [r3, #0]
{
     8f0:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
     8f2:	b903      	cbnz	r3, 8f6 <z_impl_log_process+0xe>
     8f4:	b360      	cbz	r0, 950 <z_impl_log_process+0x68>
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     8f6:	f04f 0320 	mov.w	r3, #32
     8fa:	f3ef 8611 	mrs	r6, BASEPRI
     8fe:	f383 8811 	msr	BASEPRI, r3
     902:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
     906:	484e      	ldr	r0, [pc, #312]	; (a40 <z_impl_log_process+0x158>)
     908:	f003 fe8c 	bl	4624 <log_list_head_get>
     90c:	4605      	mov	r5, r0
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     90e:	f386 8811 	msr	BASEPRI, r6
     912:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
     916:	b178      	cbz	r0, 938 <z_impl_log_process+0x50>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
     918:	f3bf 8f5b 	dmb	ish
     91c:	4b49      	ldr	r3, [pc, #292]	; (a44 <z_impl_log_process+0x15c>)
     91e:	e853 2f00 	ldrex	r2, [r3]
     922:	3a01      	subs	r2, #1
     924:	e843 2100 	strex	r1, r2, [r3]
     928:	2900      	cmp	r1, #0
     92a:	d1f8      	bne.n	91e <z_impl_log_process+0x36>
     92c:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
     930:	b18c      	cbz	r4, 956 <z_impl_log_process+0x6e>
	log_msg_put(msg);
     932:	4628      	mov	r0, r5
     934:	f003 ff67 	bl	4806 <log_msg_put>
	if (!bypass && dropped_cnt) {
     938:	b924      	cbnz	r4, 944 <z_impl_log_process+0x5c>
     93a:	4b43      	ldr	r3, [pc, #268]	; (a48 <z_impl_log_process+0x160>)
     93c:	681b      	ldr	r3, [r3, #0]
     93e:	b10b      	cbz	r3, 944 <z_impl_log_process+0x5c>
		dropped_notify();
     940:	f7ff ff06 	bl	750 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
     944:	483e      	ldr	r0, [pc, #248]	; (a40 <z_impl_log_process+0x158>)
     946:	f003 fe6b 	bl	4620 <log_list_head_peek>
     94a:	1c04      	adds	r4, r0, #0
     94c:	bf18      	it	ne
     94e:	2401      	movne	r4, #1
}
     950:	4620      	mov	r0, r4
     952:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
     956:	4b3d      	ldr	r3, [pc, #244]	; (a4c <z_impl_log_process+0x164>)
     958:	781b      	ldrb	r3, [r3, #0]
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
     95a:	b9db      	cbnz	r3, 994 <z_impl_log_process+0xac>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
     95c:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
     95e:	07db      	lsls	r3, r3, #31
     960:	d418      	bmi.n	994 <z_impl_log_process+0xac>
	msg_str = log_msg_str_get(msg);
     962:	f003 ff63 	bl	482c <log_msg_str_get>
     966:	4681      	mov	r9, r0
	mask = count_s(msg_str, log_msg_nargs_get(msg));
     968:	4628      	mov	r0, r5
     96a:	f003 ff2c 	bl	47c6 <log_msg_nargs_get>
	u32_t mask = 0;
     96e:	4626      	mov	r6, r4
	bool arm = false;
     970:	4622      	mov	r2, r4
	mask = count_s(msg_str, log_msg_nargs_get(msg));
     972:	46cc      	mov	ip, r9
	u32_t arg = 0;
     974:	4623      	mov	r3, r4
				mask |= BIT(arg);
     976:	f04f 0e01 	mov.w	lr, #1
	while ((curr = *str++) && arg < nargs) {
     97a:	f81c 1b01 	ldrb.w	r1, [ip], #1
     97e:	b109      	cbz	r1, 984 <z_impl_log_process+0x9c>
     980:	4298      	cmp	r0, r3
     982:	d80e      	bhi.n	9a2 <z_impl_log_process+0xba>
	return ((u8_t *)data - (u8_t *)__log_const_start)/
     984:	4b32      	ldr	r3, [pc, #200]	; (a50 <z_impl_log_process+0x168>)
				LOG_ERR(ERR_MSG, idx, msg_str);
     986:	4a33      	ldr	r2, [pc, #204]	; (a54 <z_impl_log_process+0x16c>)
     988:	f8df b0e0 	ldr.w	fp, [pc, #224]	; a6c <z_impl_log_process+0x184>
     98c:	1a9b      	subs	r3, r3, r2
     98e:	f3c3 0ac9 	ubfx	sl, r3, #3, #10
	while (mask) {
     992:	b9d6      	cbnz	r6, 9ca <z_impl_log_process+0xe2>
     994:	4e30      	ldr	r6, [pc, #192]	; (a58 <z_impl_log_process+0x170>)
     996:	4f31      	ldr	r7, [pc, #196]	; (a5c <z_impl_log_process+0x174>)
     998:	1bbf      	subs	r7, r7, r6
     99a:	113f      	asrs	r7, r7, #4
     99c:	f04f 0800 	mov.w	r8, #0
     9a0:	e048      	b.n	a34 <z_impl_log_process+0x14c>
		if (curr == '%') {
     9a2:	2925      	cmp	r1, #37	; 0x25
     9a4:	d102      	bne.n	9ac <z_impl_log_process+0xc4>
			arm = !arm;
     9a6:	f082 0201 	eor.w	r2, r2, #1
     9aa:	e7e6      	b.n	97a <z_impl_log_process+0x92>
		} else if (arm && isalpha((int)curr)) {
     9ac:	2a00      	cmp	r2, #0
     9ae:	d0e4      	beq.n	97a <z_impl_log_process+0x92>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
}

static inline int isalpha(int c)
{
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
     9b0:	f041 0720 	orr.w	r7, r1, #32
     9b4:	3f61      	subs	r7, #97	; 0x61
     9b6:	2f19      	cmp	r7, #25
     9b8:	d8df      	bhi.n	97a <z_impl_log_process+0x92>
			if (curr == 's') {
     9ba:	2973      	cmp	r1, #115	; 0x73
				mask |= BIT(arg);
     9bc:	bf04      	itt	eq
     9be:	fa0e f203 	lsleq.w	r2, lr, r3
     9c2:	4316      	orreq	r6, r2
			arg++;
     9c4:	3301      	adds	r3, #1
			arm = false;
     9c6:	2200      	movs	r2, #0
     9c8:	e7d7      	b.n	97a <z_impl_log_process+0x92>
		idx = 31 - __builtin_clz(mask);
     9ca:	fab6 f786 	clz	r7, r6
     9ce:	f1c7 071f 	rsb	r7, r7, #31
		str = (const char *)log_msg_arg_get(msg, idx);
     9d2:	4639      	mov	r1, r7
     9d4:	4628      	mov	r0, r5
     9d6:	f003 fef9 	bl	47cc <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
     9da:	4b21      	ldr	r3, [pc, #132]	; (a60 <z_impl_log_process+0x178>)
     9dc:	4298      	cmp	r0, r3
		str = (const char *)log_msg_arg_get(msg, idx);
     9de:	4602      	mov	r2, r0
	return (((const char *)addr >= (const char *)RO_START) &&
     9e0:	d302      	bcc.n	9e8 <z_impl_log_process+0x100>
		if (!is_rodata(str) && !log_is_strdup(str) &&
     9e2:	4b20      	ldr	r3, [pc, #128]	; (a64 <z_impl_log_process+0x17c>)
     9e4:	4298      	cmp	r0, r3
     9e6:	d314      	bcc.n	a12 <z_impl_log_process+0x12a>
     9e8:	4610      	mov	r0, r2
     9ea:	f7ff ff6f 	bl	8cc <log_is_strdup>
     9ee:	b980      	cbnz	r0, a12 <z_impl_log_process+0x12a>
     9f0:	4b1d      	ldr	r3, [pc, #116]	; (a68 <z_impl_log_process+0x180>)
     9f2:	429a      	cmp	r2, r3
     9f4:	d00d      	beq.n	a12 <z_impl_log_process+0x12a>
				LOG_ERR(ERR_MSG, idx, msg_str);
     9f6:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
     9fa:	f043 0301 	orr.w	r3, r3, #1
     9fe:	f363 0807 	bfi	r8, r3, #0, #8
     a02:	f36a 188f 	bfi	r8, sl, #6, #10
     a06:	4643      	mov	r3, r8
     a08:	464a      	mov	r2, r9
     a0a:	4639      	mov	r1, r7
     a0c:	4658      	mov	r0, fp
     a0e:	f003 fe3d 	bl	468c <log_2>
		mask &= ~BIT(idx);
     a12:	2301      	movs	r3, #1
     a14:	fa03 f707 	lsl.w	r7, r3, r7
     a18:	ea26 0607 	bic.w	r6, r6, r7
     a1c:	e7b9      	b.n	992 <z_impl_log_process+0xaa>
	return backend->cb->active;
     a1e:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
     a20:	795b      	ldrb	r3, [r3, #5]
     a22:	b123      	cbz	r3, a2e <z_impl_log_process+0x146>
	backend->api->put(backend, msg);
     a24:	6833      	ldr	r3, [r6, #0]
     a26:	4629      	mov	r1, r5
     a28:	681b      	ldr	r3, [r3, #0]
     a2a:	4630      	mov	r0, r6
     a2c:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
     a2e:	f108 0801 	add.w	r8, r8, #1
     a32:	3610      	adds	r6, #16
     a34:	45b8      	cmp	r8, r7
     a36:	dbf2      	blt.n	a1e <z_impl_log_process+0x136>
     a38:	e77b      	b.n	932 <z_impl_log_process+0x4a>
     a3a:	bf00      	nop
     a3c:	200003ce 	.word	0x200003ce
     a40:	20000170 	.word	0x20000170
     a44:	20000164 	.word	0x20000164
     a48:	20000168 	.word	0x20000168
     a4c:	200003cf 	.word	0x200003cf
     a50:	000057d8 	.word	0x000057d8
     a54:	000057d0 	.word	0x000057d0
     a58:	00005808 	.word	0x00005808
     a5c:	00005818 	.word	0x00005818
     a60:	00005608 	.word	0x00005608
     a64:	000061ec 	.word	0x000061ec
     a68:	00005a83 	.word	0x00005a83
     a6c:	00005aa1 	.word	0x00005aa1

00000a70 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
     a70:	4b26      	ldr	r3, [pc, #152]	; (b0c <msg_finalize+0x9c>)
{
     a72:	b570      	push	{r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
     a74:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
     a76:	8141      	strh	r1, [r0, #10]
{
     a78:	4605      	mov	r5, r0
	msg->hdr.timestamp = timestamp_func();
     a7a:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
     a7c:	4c24      	ldr	r4, [pc, #144]	; (b10 <msg_finalize+0xa0>)
     a7e:	60e8      	str	r0, [r5, #12]
     a80:	f3bf 8f5b 	dmb	ish
     a84:	e854 3f00 	ldrex	r3, [r4]
     a88:	3301      	adds	r3, #1
     a8a:	e844 3200 	strex	r2, r3, [r4]
     a8e:	2a00      	cmp	r2, #0
     a90:	d1f8      	bne.n	a84 <msg_finalize+0x14>
     a92:	f3bf 8f5b 	dmb	ish
	__asm__ volatile(
     a96:	f04f 0320 	mov.w	r3, #32
     a9a:	f3ef 8611 	mrs	r6, BASEPRI
     a9e:	f383 8811 	msr	BASEPRI, r3
     aa2:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
     aa6:	481b      	ldr	r0, [pc, #108]	; (b14 <msg_finalize+0xa4>)
     aa8:	4629      	mov	r1, r5
     aaa:	f003 fdaf 	bl	460c <log_list_add_tail>
	__asm__ volatile(
     aae:	f386 8811 	msr	BASEPRI, r6
     ab2:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
     ab6:	4b18      	ldr	r3, [pc, #96]	; (b18 <msg_finalize+0xa8>)
     ab8:	781a      	ldrb	r2, [r3, #0]
     aba:	b17a      	cbz	r2, adc <msg_finalize+0x6c>
	__asm__ volatile(
     abc:	f04f 0320 	mov.w	r3, #32
     ac0:	f3ef 8411 	mrs	r4, BASEPRI
     ac4:	f383 8811 	msr	BASEPRI, r3
     ac8:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
     acc:	2000      	movs	r0, #0
     ace:	f7ff ff0b 	bl	8e8 <z_impl_log_process>
	__asm__ volatile(
     ad2:	f384 8811 	msr	BASEPRI, r4
     ad6:	f3bf 8f6f 	isb	sy
}
     ada:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
     adc:	490f      	ldr	r1, [pc, #60]	; (b1c <msg_finalize+0xac>)
     ade:	6823      	ldr	r3, [r4, #0]
     ae0:	6809      	ldr	r1, [r1, #0]
     ae2:	2900      	cmp	r1, #0
     ae4:	d0f9      	beq.n	ada <msg_finalize+0x6a>
     ae6:	2b01      	cmp	r3, #1
     ae8:	d106      	bne.n	af8 <msg_finalize+0x88>
	z_impl_k_timer_start(timer, duration, period);
     aea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
     aee:	480c      	ldr	r0, [pc, #48]	; (b20 <msg_finalize+0xb0>)
}
     af0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     af4:	f003 bb40 	b.w	4178 <z_impl_k_timer_start>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
     af8:	2b0a      	cmp	r3, #10
     afa:	d1ee      	bne.n	ada <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
     afc:	4808      	ldr	r0, [pc, #32]	; (b20 <msg_finalize+0xb0>)
     afe:	f004 fd56 	bl	55ae <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
     b02:	4808      	ldr	r0, [pc, #32]	; (b24 <msg_finalize+0xb4>)
}
     b04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     b08:	f003 b8ce 	b.w	3ca8 <z_impl_k_sem_give>
     b0c:	200024e4 	.word	0x200024e4
     b10:	20000164 	.word	0x20000164
     b14:	20000170 	.word	0x20000170
     b18:	200003cf 	.word	0x200003cf
     b1c:	2000022c 	.word	0x2000022c
     b20:	20000178 	.word	0x20000178
     b24:	20002640 	.word	0x20002640

00000b28 <log_process_thread_func>:
{
     b28:	b508      	push	{r3, lr}
	log_init();
     b2a:	f7ff fe6f 	bl	80c <log_init>
	return z_impl_k_current_get();
     b2e:	f003 f8b5 	bl	3c9c <z_impl_k_current_get>
	proc_tid = process_tid;
     b32:	4b0b      	ldr	r3, [pc, #44]	; (b60 <log_process_thread_func+0x38>)
     b34:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
     b36:	b130      	cbz	r0, b46 <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
     b38:	4b0a      	ldr	r3, [pc, #40]	; (b64 <log_process_thread_func+0x3c>)
	    process_tid &&
     b3a:	681b      	ldr	r3, [r3, #0]
     b3c:	2b09      	cmp	r3, #9
     b3e:	dd02      	ble.n	b46 <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
     b40:	4809      	ldr	r0, [pc, #36]	; (b68 <log_process_thread_func+0x40>)
     b42:	f003 f8b1 	bl	3ca8 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
     b46:	4c08      	ldr	r4, [pc, #32]	; (b68 <log_process_thread_func+0x40>)
     b48:	2000      	movs	r0, #0
     b4a:	f7ff fecd 	bl	8e8 <z_impl_log_process>
		if (log_process(false) == false) {
     b4e:	2800      	cmp	r0, #0
     b50:	d1fa      	bne.n	b48 <log_process_thread_func+0x20>
     b52:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     b56:	4620      	mov	r0, r4
     b58:	f003 f8cc 	bl	3cf4 <z_impl_k_sem_take>
     b5c:	e7f4      	b.n	b48 <log_process_thread_func+0x20>
     b5e:	bf00      	nop
     b60:	2000022c 	.word	0x2000022c
     b64:	20000164 	.word	0x20000164
     b68:	20002640 	.word	0x20002640

00000b6c <z_impl_log_panic>:
{
     b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
     b6e:	4f0e      	ldr	r7, [pc, #56]	; (ba8 <z_impl_log_panic+0x3c>)
     b70:	783d      	ldrb	r5, [r7, #0]
     b72:	b975      	cbnz	r5, b92 <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
     b74:	4c0d      	ldr	r4, [pc, #52]	; (bac <z_impl_log_panic+0x40>)
     b76:	4e0e      	ldr	r6, [pc, #56]	; (bb0 <z_impl_log_panic+0x44>)
	log_init();
     b78:	f7ff fe48 	bl	80c <log_init>
     b7c:	1b36      	subs	r6, r6, r4
     b7e:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
     b80:	42b5      	cmp	r5, r6
     b82:	db07      	blt.n	b94 <z_impl_log_panic+0x28>
     b84:	2000      	movs	r0, #0
     b86:	f7ff feaf 	bl	8e8 <z_impl_log_process>
		while (log_process(false) == true) {
     b8a:	2800      	cmp	r0, #0
     b8c:	d1fa      	bne.n	b84 <z_impl_log_panic+0x18>
	panic_mode = true;
     b8e:	2301      	movs	r3, #1
     b90:	703b      	strb	r3, [r7, #0]
}
     b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
     b94:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
     b96:	795b      	ldrb	r3, [r3, #5]
     b98:	b11b      	cbz	r3, ba2 <z_impl_log_panic+0x36>
	backend->api->panic(backend);
     b9a:	6823      	ldr	r3, [r4, #0]
     b9c:	4620      	mov	r0, r4
     b9e:	691b      	ldr	r3, [r3, #16]
     ba0:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
     ba2:	3501      	adds	r5, #1
     ba4:	3410      	adds	r4, #16
     ba6:	e7eb      	b.n	b80 <z_impl_log_panic+0x14>
     ba8:	200003cf 	.word	0x200003cf
     bac:	00005808 	.word	0x00005808
     bb0:	00005818 	.word	0x00005818

00000bb4 <log_free>:
{
     bb4:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
     bb6:	3804      	subs	r0, #4
     bb8:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
     bba:	f3bf 8f5b 	dmb	ish
     bbe:	e850 3f00 	ldrex	r3, [r0]
     bc2:	1e5a      	subs	r2, r3, #1
     bc4:	e840 2100 	strex	r1, r2, [r0]
     bc8:	2900      	cmp	r1, #0
     bca:	d1f8      	bne.n	bbe <log_free+0xa>
     bcc:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
     bd0:	2b01      	cmp	r3, #1
     bd2:	d103      	bne.n	bdc <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
     bd4:	a901      	add	r1, sp, #4
     bd6:	4803      	ldr	r0, [pc, #12]	; (be4 <log_free+0x30>)
     bd8:	f002 fdb2 	bl	3740 <k_mem_slab_free>
}
     bdc:	b003      	add	sp, #12
     bde:	f85d fb04 	ldr.w	pc, [sp], #4
     be2:	bf00      	nop
     be4:	200001a4 	.word	0x200001a4

00000be8 <log_msg_pool_init>:
static u8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
     be8:	2320      	movs	r3, #32
     bea:	461a      	mov	r2, r3
     bec:	4901      	ldr	r1, [pc, #4]	; (bf4 <log_msg_pool_init+0xc>)
     bee:	4802      	ldr	r0, [pc, #8]	; (bf8 <log_msg_pool_init+0x10>)
     bf0:	f004 bb88 	b.w	5304 <k_mem_slab_init>
     bf4:	200020e0 	.word	0x200020e0
     bf8:	20000230 	.word	0x20000230

00000bfc <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
     bfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
     bfe:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
     c00:	4d09      	ldr	r5, [pc, #36]	; (c28 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
     c02:	9301      	str	r3, [sp, #4]
     c04:	2001      	movs	r0, #1
     c06:	f7ff fe6f 	bl	8e8 <z_impl_log_process>
     c0a:	4604      	mov	r4, r0
			log_dropped();
     c0c:	f7ff fdc6 	bl	79c <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
     c10:	2200      	movs	r2, #0
     c12:	a901      	add	r1, sp, #4
     c14:	4628      	mov	r0, r5
     c16:	f002 fd67 	bl	36e8 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
     c1a:	b108      	cbz	r0, c20 <log_msg_no_space_handle+0x24>
     c1c:	2c00      	cmp	r4, #0
     c1e:	d1f1      	bne.n	c04 <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
     c20:	9801      	ldr	r0, [sp, #4]
     c22:	b003      	add	sp, #12
     c24:	bd30      	pop	{r4, r5, pc}
     c26:	bf00      	nop
     c28:	20000230 	.word	0x20000230

00000c2c <log_msg_chunk_alloc>:
{
     c2c:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
     c2e:	2200      	movs	r2, #0
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
     c30:	a901      	add	r1, sp, #4
     c32:	4806      	ldr	r0, [pc, #24]	; (c4c <log_msg_chunk_alloc+0x20>)
	union log_msg_chunk *msg = NULL;
     c34:	9201      	str	r2, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
     c36:	f002 fd57 	bl	36e8 <k_mem_slab_alloc>
	if (err != 0) {
     c3a:	b110      	cbz	r0, c42 <log_msg_chunk_alloc+0x16>
		msg = log_msg_no_space_handle();
     c3c:	f7ff ffde 	bl	bfc <log_msg_no_space_handle>
     c40:	9001      	str	r0, [sp, #4]
}
     c42:	9801      	ldr	r0, [sp, #4]
     c44:	b003      	add	sp, #12
     c46:	f85d fb04 	ldr.w	pc, [sp], #4
     c4a:	bf00      	nop
     c4c:	20000230 	.word	0x20000230

00000c50 <msg_free>:
{
     c50:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
     c52:	7a04      	ldrb	r4, [r0, #8]
	u32_t nargs = msg->hdr.params.std.nargs;
     c54:	7a45      	ldrb	r5, [r0, #9]
{
     c56:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
     c58:	f014 0401 	ands.w	r4, r4, #1
	u32_t nargs = msg->hdr.params.std.nargs;
     c5c:	ea4f 1515 	mov.w	r5, r5, lsr #4
	if (log_msg_is_std(msg) && nargs) {
     c60:	d00e      	beq.n	c80 <msg_free+0x30>
	if (msg->hdr.params.generic.ext == 1) {
     c62:	9b01      	ldr	r3, [sp, #4]
     c64:	7a1a      	ldrb	r2, [r3, #8]
     c66:	0792      	lsls	r2, r2, #30
     c68:	d504      	bpl.n	c74 <msg_free+0x24>
		cont_free(msg->payload.ext.next);
     c6a:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
     c6c:	4c10      	ldr	r4, [pc, #64]	; (cb0 <msg_free+0x60>)
     c6e:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
     c70:	9b03      	ldr	r3, [sp, #12]
     c72:	b9b3      	cbnz	r3, ca2 <msg_free+0x52>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
     c74:	a901      	add	r1, sp, #4
     c76:	480e      	ldr	r0, [pc, #56]	; (cb0 <msg_free+0x60>)
     c78:	f002 fd62 	bl	3740 <k_mem_slab_free>
}
     c7c:	b004      	add	sp, #16
     c7e:	bd70      	pop	{r4, r5, r6, pc}
	if (log_msg_is_std(msg) && nargs) {
     c80:	2d00      	cmp	r5, #0
     c82:	d0ee      	beq.n	c62 <msg_free+0x12>
		for (i = 0; i < nargs; i++) {
     c84:	42a5      	cmp	r5, r4
     c86:	9801      	ldr	r0, [sp, #4]
     c88:	d9eb      	bls.n	c62 <msg_free+0x12>
			void *buf = (void *)log_msg_arg_get(msg, i);
     c8a:	4621      	mov	r1, r4
     c8c:	f003 fd9e 	bl	47cc <log_msg_arg_get>
     c90:	4606      	mov	r6, r0
			if (log_is_strdup(buf)) {
     c92:	f7ff fe1b 	bl	8cc <log_is_strdup>
     c96:	b110      	cbz	r0, c9e <msg_free+0x4e>
				log_free(buf);
     c98:	4630      	mov	r0, r6
     c9a:	f7ff ff8b 	bl	bb4 <log_free>
		for (i = 0; i < nargs; i++) {
     c9e:	3401      	adds	r4, #1
     ca0:	e7f0      	b.n	c84 <msg_free+0x34>
		next = cont->next;
     ca2:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
     ca4:	a903      	add	r1, sp, #12
     ca6:	4620      	mov	r0, r4
     ca8:	f002 fd4a 	bl	3740 <k_mem_slab_free>
		cont = next;
     cac:	9503      	str	r5, [sp, #12]
     cae:	e7df      	b.n	c70 <msg_free+0x20>
     cb0:	20000230 	.word	0x20000230

00000cb4 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
     cb4:	b40e      	push	{r1, r2, r3}
     cb6:	b503      	push	{r0, r1, lr}
     cb8:	ab03      	add	r3, sp, #12
	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
     cba:	4601      	mov	r1, r0
{
     cbc:	f853 2b04 	ldr.w	r2, [r3], #4
	z_vprintk(out_func, (void *)log_output, fmt, args);
     cc0:	4804      	ldr	r0, [pc, #16]	; (cd4 <print_formatted+0x20>)
	va_start(args, fmt);
     cc2:	9301      	str	r3, [sp, #4]
	z_vprintk(out_func, (void *)log_output, fmt, args);
     cc4:	f003 fb20 	bl	4308 <z_vprintk>
#endif
	va_end(args);

	return length;
}
     cc8:	2000      	movs	r0, #0
     cca:	b002      	add	sp, #8
     ccc:	f85d eb04 	ldr.w	lr, [sp], #4
     cd0:	b003      	add	sp, #12
     cd2:	4770      	bx	lr
     cd4:	00004bd5 	.word	0x00004bd5

00000cd8 <prefix_print>:
}

static u32_t prefix_print(const struct log_output *log_output,
			 u32_t flags, bool func_on, u32_t timestamp, u8_t level,
			 u8_t domain_id, u16_t source_id)
{
     cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     cdc:	b085      	sub	sp, #20
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
     cde:	f011 0402 	ands.w	r4, r1, #2
{
     ce2:	4606      	mov	r6, r0
     ce4:	4690      	mov	r8, r2
     ce6:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
     cea:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
     cee:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
     cf2:	d007      	beq.n	d04 <prefix_print+0x2c>
	if (!format) {
     cf4:	f011 0f44 	tst.w	r1, #68	; 0x44
     cf8:	d137      	bne.n	d6a <prefix_print+0x92>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
     cfa:	461a      	mov	r2, r3
     cfc:	4932      	ldr	r1, [pc, #200]	; (dc8 <prefix_print+0xf0>)
     cfe:	f7ff ffd9 	bl	cb4 <print_formatted>
		length += timestamp_print(log_output, flags, timestamp);
     d02:	4604      	mov	r4, r0
	if (color) {
     d04:	f1b9 0f00 	cmp.w	r9, #0
     d08:	d00a      	beq.n	d20 <prefix_print+0x48>
		const char *color = start && (colors[level] != NULL) ?
     d0a:	4b30      	ldr	r3, [pc, #192]	; (dcc <prefix_print+0xf4>)
		print_formatted(log_output, "%s", color);
     d0c:	4930      	ldr	r1, [pc, #192]	; (dd0 <prefix_print+0xf8>)
		const char *color = start && (colors[level] != NULL) ?
     d0e:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", color);
     d12:	4b30      	ldr	r3, [pc, #192]	; (dd4 <prefix_print+0xfc>)
     d14:	4630      	mov	r0, r6
     d16:	2a00      	cmp	r2, #0
     d18:	bf08      	it	eq
     d1a:	461a      	moveq	r2, r3
     d1c:	f7ff ffca 	bl	cb4 <print_formatted>
	if (level_on) {
     d20:	b13d      	cbz	r5, d32 <prefix_print+0x5a>
		total += print_formatted(log_output, "<%s> ", severity[level]);
     d22:	4b2d      	ldr	r3, [pc, #180]	; (dd8 <prefix_print+0x100>)
     d24:	492d      	ldr	r1, [pc, #180]	; (ddc <prefix_print+0x104>)
     d26:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
     d2a:	4630      	mov	r0, r6
     d2c:	f7ff ffc2 	bl	cb4 <print_formatted>
     d30:	4605      	mov	r5, r0
	total += print_formatted(log_output,
     d32:	f1b8 0f00 	cmp.w	r8, #0
     d36:	d044      	beq.n	dc2 <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
     d38:	2301      	movs	r3, #1
     d3a:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
     d3e:	4b28      	ldr	r3, [pc, #160]	; (de0 <prefix_print+0x108>)
     d40:	f017 0f10 	tst.w	r7, #16
     d44:	4f27      	ldr	r7, [pc, #156]	; (de4 <prefix_print+0x10c>)
     d46:	bf18      	it	ne
     d48:	461f      	movne	r7, r3
     d4a:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
     d4e:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
     d52:	f7ff fd33 	bl	7bc <log_source_name_get>
     d56:	4639      	mov	r1, r7
     d58:	4602      	mov	r2, r0
     d5a:	4630      	mov	r0, r6
     d5c:	f7ff ffaa 	bl	cb4 <print_formatted>
     d60:	4428      	add	r0, r5
		length += ids_print(log_output, level_on, func_on,
				    domain_id, source_id, level);
	}

	return length;
}
     d62:	4420      	add	r0, r4
     d64:	b005      	add	sp, #20
     d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
     d6a:	4a1f      	ldr	r2, [pc, #124]	; (de8 <prefix_print+0x110>)
     d6c:	6811      	ldr	r1, [r2, #0]
     d6e:	b331      	cbz	r1, dbe <prefix_print+0xe6>
		timestamp /= timestamp_div;
     d70:	4a1e      	ldr	r2, [pc, #120]	; (dec <prefix_print+0x114>)
     d72:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
     d76:	6814      	ldr	r4, [r2, #0]
     d78:	fbb3 f3f4 	udiv	r3, r3, r4
		ms = (remainder * 1000U) / freq;
     d7c:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		seconds = timestamp / freq;
     d80:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
     d84:	fbb4 f2fe 	udiv	r2, r4, lr
     d88:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
     d8c:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
     d90:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
     d94:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
     d98:	fbb4 fbf1 	udiv	fp, r4, r1
     d9c:	fb01 441b 	mls	r4, r1, fp, r4
		mins = seconds / 60U;
     da0:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
     da4:	fb0c f404 	mul.w	r4, ip, r4
     da8:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
     dac:	e9cd b101 	strd	fp, r1, [sp, #4]
     db0:	fb0a e113 	mls	r1, sl, r3, lr
     db4:	9100      	str	r1, [sp, #0]
     db6:	490e      	ldr	r1, [pc, #56]	; (df0 <prefix_print+0x118>)
     db8:	f7ff ff7c 	bl	cb4 <print_formatted>
     dbc:	e7a1      	b.n	d02 <prefix_print+0x2a>
		length = 0;
     dbe:	4608      	mov	r0, r1
     dc0:	e79f      	b.n	d02 <prefix_print+0x2a>
	total += print_formatted(log_output,
     dc2:	4f08      	ldr	r7, [pc, #32]	; (de4 <prefix_print+0x10c>)
     dc4:	e7c1      	b.n	d4a <prefix_print+0x72>
     dc6:	bf00      	nop
     dc8:	00005b21 	.word	0x00005b21
     dcc:	00005818 	.word	0x00005818
     dd0:	0000600f 	.word	0x0000600f
     dd4:	00005b13 	.word	0x00005b13
     dd8:	0000582c 	.word	0x0000582c
     ddc:	00005b46 	.word	0x00005b46
     de0:	00005b1d 	.word	0x00005b1d
     de4:	00005b18 	.word	0x00005b18
     de8:	2000024c 	.word	0x2000024c
     dec:	20000250 	.word	0x20000250
     df0:	00005b2a 	.word	0x00005b2a

00000df4 <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  u32_t flags, u8_t level)
{
     df4:	b538      	push	{r3, r4, r5, lr}
     df6:	460c      	mov	r4, r1
	if (color) {
     df8:	07e1      	lsls	r1, r4, #31
{
     dfa:	4605      	mov	r5, r0
	if (color) {
     dfc:	d503      	bpl.n	e06 <postfix_print+0x12>
		print_formatted(log_output, "%s", color);
     dfe:	4a08      	ldr	r2, [pc, #32]	; (e20 <postfix_print+0x2c>)
     e00:	4908      	ldr	r1, [pc, #32]	; (e24 <postfix_print+0x30>)
     e02:	f7ff ff57 	bl	cb4 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
     e06:	06e2      	lsls	r2, r4, #27
     e08:	d408      	bmi.n	e1c <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
     e0a:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
     e0c:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
     e0e:	bf4c      	ite	mi
     e10:	4905      	ldrmi	r1, [pc, #20]	; (e28 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
     e12:	4906      	ldrpl	r1, [pc, #24]	; (e2c <postfix_print+0x38>)
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
     e14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
     e18:	f7ff bf4c 	b.w	cb4 <print_formatted>
}
     e1c:	bd38      	pop	{r3, r4, r5, pc}
     e1e:	bf00      	nop
     e20:	00005b13 	.word	0x00005b13
     e24:	0000600f 	.word	0x0000600f
     e28:	00005b05 	.word	0x00005b05
     e2c:	00005b04 	.word	0x00005b04

00000e30 <hexdump_line_print>:
{
     e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     e34:	4698      	mov	r8, r3
     e36:	9b08      	ldr	r3, [sp, #32]
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
     e38:	06dd      	lsls	r5, r3, #27
{
     e3a:	4604      	mov	r4, r0
     e3c:	460e      	mov	r6, r1
     e3e:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
     e40:	d405      	bmi.n	e4e <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
     e42:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
     e44:	bf4c      	ite	mi
     e46:	4929      	ldrmi	r1, [pc, #164]	; (eec <hexdump_line_print+0xbc>)
		print_formatted(ctx, "\r\n");
     e48:	4929      	ldrpl	r1, [pc, #164]	; (ef0 <hexdump_line_print+0xc0>)
     e4a:	f7ff ff33 	bl	cb4 <print_formatted>
		print_formatted(log_output, " ");
     e4e:	f8df 90a8 	ldr.w	r9, [pc, #168]	; ef8 <hexdump_line_print+0xc8>
{
     e52:	2500      	movs	r5, #0
	for (int i = 0; i < prefix_offset; i++) {
     e54:	4545      	cmp	r5, r8
     e56:	db2a      	blt.n	eae <hexdump_line_print+0x7e>
			print_formatted(log_output, "   ");
     e58:	f8df 80a0 	ldr.w	r8, [pc, #160]	; efc <hexdump_line_print+0xcc>
			print_formatted(log_output, "%02x ", data[i]);
     e5c:	f8df 90a0 	ldr.w	r9, [pc, #160]	; f00 <hexdump_line_print+0xd0>
			print_formatted(log_output, " ");
     e60:	f8df a094 	ldr.w	sl, [pc, #148]	; ef8 <hexdump_line_print+0xc8>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
     e64:	2500      	movs	r5, #0
		if (i < length) {
     e66:	42af      	cmp	r7, r5
     e68:	d92e      	bls.n	ec8 <hexdump_line_print+0x98>
			print_formatted(log_output, "%02x ", data[i]);
     e6a:	5d72      	ldrb	r2, [r6, r5]
     e6c:	4649      	mov	r1, r9
     e6e:	4620      	mov	r0, r4
     e70:	f7ff ff20 	bl	cb4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
     e74:	3501      	adds	r5, #1
     e76:	2d10      	cmp	r5, #16
     e78:	d11f      	bne.n	eba <hexdump_line_print+0x8a>
	print_formatted(log_output, "|");
     e7a:	491e      	ldr	r1, [pc, #120]	; (ef4 <hexdump_line_print+0xc4>)
			print_formatted(log_output, " ");
     e7c:	f8df 8078 	ldr.w	r8, [pc, #120]	; ef8 <hexdump_line_print+0xc8>
			print_formatted(log_output, "%c",
     e80:	f8df 9080 	ldr.w	r9, [pc, #128]	; f04 <hexdump_line_print+0xd4>
	print_formatted(log_output, "|");
     e84:	4620      	mov	r0, r4
     e86:	f7ff ff15 	bl	cb4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
     e8a:	2500      	movs	r5, #0
		if (i < length) {
     e8c:	42af      	cmp	r7, r5
     e8e:	d927      	bls.n	ee0 <hexdump_line_print+0xb0>
			      isprint((int)c) ? c : '.');
     e90:	5d72      	ldrb	r2, [r6, r5]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
     e92:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(log_output, "%c",
     e96:	2b5f      	cmp	r3, #95	; 0x5f
     e98:	bf28      	it	cs
     e9a:	222e      	movcs	r2, #46	; 0x2e
     e9c:	4649      	mov	r1, r9
     e9e:	4620      	mov	r0, r4
     ea0:	f7ff ff08 	bl	cb4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
     ea4:	3501      	adds	r5, #1
     ea6:	2d10      	cmp	r5, #16
     ea8:	d113      	bne.n	ed2 <hexdump_line_print+0xa2>
}
     eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
     eae:	4649      	mov	r1, r9
     eb0:	4620      	mov	r0, r4
     eb2:	f7ff feff 	bl	cb4 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
     eb6:	3501      	adds	r5, #1
     eb8:	e7cc      	b.n	e54 <hexdump_line_print+0x24>
		if (i > 0 && !(i % 8)) {
     eba:	076a      	lsls	r2, r5, #29
     ebc:	d1d3      	bne.n	e66 <hexdump_line_print+0x36>
			print_formatted(log_output, " ");
     ebe:	4651      	mov	r1, sl
     ec0:	4620      	mov	r0, r4
     ec2:	f7ff fef7 	bl	cb4 <print_formatted>
     ec6:	e7ce      	b.n	e66 <hexdump_line_print+0x36>
			print_formatted(log_output, "   ");
     ec8:	4641      	mov	r1, r8
     eca:	4620      	mov	r0, r4
     ecc:	f7ff fef2 	bl	cb4 <print_formatted>
     ed0:	e7d0      	b.n	e74 <hexdump_line_print+0x44>
		if (i > 0 && !(i % 8)) {
     ed2:	076b      	lsls	r3, r5, #29
     ed4:	d1da      	bne.n	e8c <hexdump_line_print+0x5c>
			print_formatted(log_output, " ");
     ed6:	4641      	mov	r1, r8
     ed8:	4620      	mov	r0, r4
     eda:	f7ff feeb 	bl	cb4 <print_formatted>
     ede:	e7d5      	b.n	e8c <hexdump_line_print+0x5c>
			print_formatted(log_output, " ");
     ee0:	4641      	mov	r1, r8
     ee2:	4620      	mov	r0, r4
     ee4:	f7ff fee6 	bl	cb4 <print_formatted>
     ee8:	e7dc      	b.n	ea4 <hexdump_line_print+0x74>
     eea:	bf00      	nop
     eec:	00005b05 	.word	0x00005b05
     ef0:	00005b04 	.word	0x00005b04
     ef4:	00005ae1 	.word	0x00005ae1
     ef8:	00005adf 	.word	0x00005adf
     efc:	00005add 	.word	0x00005add
     f00:	00005ad7 	.word	0x00005ad7
     f04:	00005ae3 	.word	0x00005ae3

00000f08 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    u32_t flags)
{
     f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
     f0c:	7a8b      	ldrb	r3, [r1, #10]
		log_output_msg_syst_process(log_output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
     f0e:	f013 0407 	ands.w	r4, r3, #7
{
     f12:	4617      	mov	r7, r2
     f14:	b08a      	sub	sp, #40	; 0x28
     f16:	4605      	mov	r5, r0
     f18:	460e      	mov	r6, r1
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
     f1a:	7a0a      	ldrb	r2, [r1, #8]
			0 : prefix_print(log_output, flags, std_msg, timestamp,
     f1c:	d01c      	beq.n	f58 <log_output_msg_process+0x50>
	return msg->hdr.ids.source_id;
     f1e:	8949      	ldrh	r1, [r1, #10]
     f20:	f3c3 03c2 	ubfx	r3, r3, #3, #3
     f24:	0989      	lsrs	r1, r1, #6
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
     f26:	43d2      	mvns	r2, r2
     f28:	9102      	str	r1, [sp, #8]
     f2a:	e9cd 4300 	strd	r4, r3, [sp]
     f2e:	f002 0201 	and.w	r2, r2, #1
     f32:	68f3      	ldr	r3, [r6, #12]
     f34:	4639      	mov	r1, r7
     f36:	f7ff fecf 	bl	cd8 <prefix_print>
     f3a:	4681      	mov	r9, r0
     f3c:	7a33      	ldrb	r3, [r6, #8]
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
     f3e:	07da      	lsls	r2, r3, #31
     f40:	d40c      	bmi.n	f5c <log_output_msg_process+0x54>
		std_print(msg, log_output);
     f42:	4629      	mov	r1, r5
     f44:	4630      	mov	r0, r6
     f46:	f003 fcdb 	bl	4900 <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
     f4a:	b34c      	cbz	r4, fa0 <log_output_msg_process+0x98>
		postfix_print(log_output, flags, level);
     f4c:	4622      	mov	r2, r4
     f4e:	4639      	mov	r1, r7
     f50:	4628      	mov	r0, r5
     f52:	f7ff ff4f 	bl	df4 <postfix_print>
     f56:	e023      	b.n	fa0 <log_output_msg_process+0x98>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
     f58:	46a1      	mov	r9, r4
     f5a:	e7ef      	b.n	f3c <log_output_msg_process+0x34>
	} else if (raw_string) {
     f5c:	bb34      	cbnz	r4, fac <log_output_msg_process+0xa4>
	size_t offset = 0;
     f5e:	4627      	mov	r7, r4
		length = log_output->size;
     f60:	68eb      	ldr	r3, [r5, #12]
     f62:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
     f64:	aa06      	add	r2, sp, #24
     f66:	463b      	mov	r3, r7
     f68:	68a9      	ldr	r1, [r5, #8]
     f6a:	4630      	mov	r0, r6
     f6c:	f003 fcb4 	bl	48d8 <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
     f70:	9a06      	ldr	r2, [sp, #24]
     f72:	686b      	ldr	r3, [r5, #4]
     f74:	601a      	str	r2, [r3, #0]
		if (length != 0) {
     f76:	b13a      	cbz	r2, f88 <log_output_msg_process+0x80>
			eol = (log_output->buf[length - 1] == '\n');
     f78:	68ab      	ldr	r3, [r5, #8]
     f7a:	4413      	add	r3, r2
     f7c:	f813 4c01 	ldrb.w	r4, [r3, #-1]
     f80:	f1a4 030a 	sub.w	r3, r4, #10
     f84:	425c      	negs	r4, r3
     f86:	415c      	adcs	r4, r3
		log_output_flush(log_output);
     f88:	4628      	mov	r0, r5
     f8a:	f003 fe16 	bl	4bba <log_output_flush>
		offset += length;
     f8e:	9b06      	ldr	r3, [sp, #24]
     f90:	441f      	add	r7, r3
	} while (length > 0);
     f92:	2b00      	cmp	r3, #0
     f94:	d1e4      	bne.n	f60 <log_output_msg_process+0x58>
	if (eol) {
     f96:	b11c      	cbz	r4, fa0 <log_output_msg_process+0x98>
		print_formatted(log_output, "\r");
     f98:	4914      	ldr	r1, [pc, #80]	; (fec <log_output_msg_process+0xe4>)
     f9a:	4628      	mov	r0, r5
     f9c:	f7ff fe8a 	bl	cb4 <print_formatted>
	}

	log_output_flush(log_output);
     fa0:	4628      	mov	r0, r5
     fa2:	f003 fe0a 	bl	4bba <log_output_flush>
}
     fa6:	b00a      	add	sp, #40	; 0x28
     fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(log_output, "%s", log_msg_str_get(msg));
     fac:	4630      	mov	r0, r6
     fae:	f003 fc3d 	bl	482c <log_msg_str_get>
     fb2:	490f      	ldr	r1, [pc, #60]	; (ff0 <log_output_msg_process+0xe8>)
     fb4:	4602      	mov	r2, r0
     fb6:	4628      	mov	r0, r5
     fb8:	f7ff fe7c 	bl	cb4 <print_formatted>
	u32_t offset = 0U;
     fbc:	f04f 0800 	mov.w	r8, #0
		length = sizeof(buf);
     fc0:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
     fc4:	aa05      	add	r2, sp, #20
     fc6:	4643      	mov	r3, r8
     fc8:	a906      	add	r1, sp, #24
     fca:	4630      	mov	r0, r6
		length = sizeof(buf);
     fcc:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
     fd0:	f003 fc82 	bl	48d8 <log_msg_hexdump_data_get>
		if (length) {
     fd4:	9a05      	ldr	r2, [sp, #20]
     fd6:	2a00      	cmp	r2, #0
     fd8:	d0b8      	beq.n	f4c <log_output_msg_process+0x44>
			hexdump_line_print(log_output, buf, length,
     fda:	464b      	mov	r3, r9
     fdc:	9700      	str	r7, [sp, #0]
     fde:	a906      	add	r1, sp, #24
     fe0:	4628      	mov	r0, r5
     fe2:	f7ff ff25 	bl	e30 <hexdump_line_print>
			offset += length;
     fe6:	9b05      	ldr	r3, [sp, #20]
     fe8:	4498      	add	r8, r3
     fea:	e7eb      	b.n	fc4 <log_output_msg_process+0xbc>
     fec:	00005ae6 	.word	0x00005ae6
     ff0:	0000600f 	.word	0x0000600f

00000ff4 <log_output_dropped_process>:
	postfix_print(log_output, flags, level);
	log_output_flush(log_output);
}

void log_output_dropped_process(const struct log_output *log_output, u32_t cnt)
{
     ff4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;
	struct device *dev = (struct device *)log_output->control_block->ctx;
     ff6:	e9d0 4300 	ldrd	r4, r3, [r0]
     ffa:	685d      	ldr	r5, [r3, #4]

	cnt = MIN(cnt, 9999);
	len = snprintf(buf, sizeof(buf), "%d", cnt);
     ffc:	4a0f      	ldr	r2, [pc, #60]	; (103c <log_output_dropped_process+0x48>)
     ffe:	f242 730f 	movw	r3, #9999	; 0x270f
    1002:	428b      	cmp	r3, r1
    1004:	bf28      	it	cs
    1006:	460b      	movcs	r3, r1
    1008:	4668      	mov	r0, sp
    100a:	2105      	movs	r1, #5
    100c:	f001 fb94 	bl	2738 <snprintf>

	buffer_write(outf, (u8_t *)prefix, sizeof(prefix) - 1, dev);
    1010:	462b      	mov	r3, r5
	len = snprintf(buf, sizeof(buf), "%d", cnt);
    1012:	4606      	mov	r6, r0
	buffer_write(outf, (u8_t *)prefix, sizeof(prefix) - 1, dev);
    1014:	220b      	movs	r2, #11
    1016:	4620      	mov	r0, r4
    1018:	4909      	ldr	r1, [pc, #36]	; (1040 <log_output_dropped_process+0x4c>)
    101a:	f003 fc64 	bl	48e6 <buffer_write>
	buffer_write(outf, buf, len, dev);
    101e:	462b      	mov	r3, r5
    1020:	4632      	mov	r2, r6
    1022:	4669      	mov	r1, sp
    1024:	4620      	mov	r0, r4
    1026:	f003 fc5e 	bl	48e6 <buffer_write>
	buffer_write(outf, (u8_t *)postfix, sizeof(postfix) - 1, dev);
    102a:	462b      	mov	r3, r5
    102c:	221b      	movs	r2, #27
    102e:	4905      	ldr	r1, [pc, #20]	; (1044 <log_output_dropped_process+0x50>)
    1030:	4620      	mov	r0, r4
    1032:	f003 fc58 	bl	48e6 <buffer_write>
}
    1036:	b002      	add	sp, #8
    1038:	bd70      	pop	{r4, r5, r6, pc}
    103a:	bf00      	nop
    103c:	00006159 	.word	0x00006159
    1040:	00005b07 	.word	0x00005b07
    1044:	00005ae8 	.word	0x00005ae8

00001048 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(u32_t frequency)
{
	timestamp_div = 1U;
    1048:	4a08      	ldr	r2, [pc, #32]	; (106c <log_output_timestamp_freq_set+0x24>)
{
    104a:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    104c:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    104e:	4c08      	ldr	r4, [pc, #32]	; (1070 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    1050:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    1052:	2100      	movs	r1, #0
    1054:	42a0      	cmp	r0, r4
    1056:	d804      	bhi.n	1062 <log_output_timestamp_freq_set+0x1a>
    1058:	b101      	cbz	r1, 105c <log_output_timestamp_freq_set+0x14>
    105a:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    105c:	4b05      	ldr	r3, [pc, #20]	; (1074 <log_output_timestamp_freq_set+0x2c>)
    105e:	6018      	str	r0, [r3, #0]
}
    1060:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    1062:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    1064:	005b      	lsls	r3, r3, #1
    1066:	2101      	movs	r1, #1
    1068:	e7f4      	b.n	1054 <log_output_timestamp_freq_set+0xc>
    106a:	bf00      	nop
    106c:	20000250 	.word	0x20000250
    1070:	000f4240 	.word	0x000f4240
    1074:	2000024c 	.word	0x2000024c

00001078 <panic>:
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
    1078:	4801      	ldr	r0, [pc, #4]	; (1080 <panic+0x8>)
    107a:	f003 bd9e 	b.w	4bba <log_output_flush>
    107e:	bf00      	nop
    1080:	00005858 	.word	0x00005858

00001084 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const log_output, u32_t cnt)
{
	log_output_dropped_process(log_output, cnt);
    1084:	4801      	ldr	r0, [pc, #4]	; (108c <dropped+0x8>)
    1086:	f7ff bfb5 	b.w	ff4 <log_output_dropped_process>
    108a:	bf00      	nop
    108c:	00005858 	.word	0x00005858

00001090 <log_backend_uart_init>:

	log_backend_std_put(&log_output, flag, msg);
}

static void log_backend_uart_init(void)
{
    1090:	b508      	push	{r3, lr}
    1092:	4803      	ldr	r0, [pc, #12]	; (10a0 <log_backend_uart_init+0x10>)
    1094:	f002 f982 	bl	339c <z_impl_device_get_binding>
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *log_output,
				      void *ctx)
{
	log_output->control_block->ctx = ctx;
    1098:	4b02      	ldr	r3, [pc, #8]	; (10a4 <log_backend_uart_init+0x14>)
    109a:	6058      	str	r0, [r3, #4]

	dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
	assert(dev);

	log_output_ctx_set(&log_output, dev);
}
    109c:	bd08      	pop	{r3, pc}
    109e:	bf00      	nop
    10a0:	00005b6c 	.word	0x00005b6c
    10a4:	2000025c 	.word	0x2000025c

000010a8 <put>:
{
    10a8:	b510      	push	{r4, lr}
	log_msg_get(msg);
    10aa:	4608      	mov	r0, r1
    10ac:	460c      	mov	r4, r1
    10ae:	f003 fb7d 	bl	47ac <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
    10b2:	4621      	mov	r1, r4
    10b4:	4804      	ldr	r0, [pc, #16]	; (10c8 <put+0x20>)
    10b6:	220f      	movs	r2, #15
    10b8:	f7ff ff26 	bl	f08 <log_output_msg_process>
	log_msg_put(msg);
    10bc:	4620      	mov	r0, r4
}
    10be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    10c2:	f003 bba0 	b.w	4806 <log_msg_put>
    10c6:	bf00      	nop
    10c8:	00005858 	.word	0x00005858

000010cc <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    10cc:	280a      	cmp	r0, #10
{
    10ce:	b538      	push	{r3, r4, r5, lr}
    10d0:	4604      	mov	r4, r0
    10d2:	4d07      	ldr	r5, [pc, #28]	; (10f0 <console_out+0x24>)
	if ('\n' == c) {
    10d4:	d104      	bne.n	10e0 <console_out+0x14>
    10d6:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
    10d8:	6843      	ldr	r3, [r0, #4]
    10da:	210d      	movs	r1, #13
    10dc:	685b      	ldr	r3, [r3, #4]
    10de:	4798      	blx	r3
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    10e0:	6828      	ldr	r0, [r5, #0]
    10e2:	6843      	ldr	r3, [r0, #4]
    10e4:	b2e1      	uxtb	r1, r4
    10e6:	685b      	ldr	r3, [r3, #4]
    10e8:	4798      	blx	r3

	return c;
}
    10ea:	4620      	mov	r0, r4
    10ec:	bd38      	pop	{r3, r4, r5, pc}
    10ee:	bf00      	nop
    10f0:	20000268 	.word	0x20000268

000010f4 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
    10f4:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
    10f6:	4c04      	ldr	r4, [pc, #16]	; (1108 <uart_console_hook_install+0x14>)
    10f8:	4620      	mov	r0, r4
    10fa:	f001 fb17 	bl	272c <__stdout_hook_install>
	__printk_hook_install(console_out);
    10fe:	4620      	mov	r0, r4
}
    1100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__printk_hook_install(console_out);
    1104:	f7ff bac0 	b.w	688 <__printk_hook_install>
    1108:	000010cd 	.word	0x000010cd

0000110c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    110c:	b508      	push	{r3, lr}
    110e:	4804      	ldr	r0, [pc, #16]	; (1120 <uart_console_init+0x14>)
    1110:	f002 f944 	bl	339c <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    1114:	4b03      	ldr	r3, [pc, #12]	; (1124 <uart_console_init+0x18>)
    1116:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    1118:	f7ff ffec 	bl	10f4 <uart_console_hook_install>

	return 0;
}
    111c:	2000      	movs	r0, #0
    111e:	bd08      	pop	{r3, pc}
    1120:	00005b6c 	.word	0x00005b6c
    1124:	20000268 	.word	0x20000268

00001128 <nrf_power_clock_isr>:
#endif
}

NRF_STATIC_INLINE bool nrf_clock_event_check(NRF_CLOCK_Type const * p_reg, nrf_clock_event_t event)
{
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    1128:	4b15      	ldr	r3, [pc, #84]	; (1180 <nrf_power_clock_isr+0x58>)
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
    112a:	b507      	push	{r0, r1, r2, lr}
    112c:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    112e:	b182      	cbz	r2, 1152 <nrf_power_clock_isr+0x2a>
    return p_reg->INTENSET & mask;
    1130:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1134:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    1138:	07d1      	lsls	r1, r2, #31
    113a:	d50a      	bpl.n	1152 <nrf_power_clock_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    113c:	2200      	movs	r2, #0
    113e:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    1140:	681b      	ldr	r3, [r3, #0]
	ARG_UNUSED(arg);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct device *hfclk_dev = DEVICE_GET(clock_nrf5_m16src);
		struct nrf_clock_control *data = hfclk_dev->driver_data;
    1142:	4810      	ldr	r0, [pc, #64]	; (1184 <nrf_power_clock_isr+0x5c>)
    1144:	9300      	str	r3, [sp, #0]
    (void)dummy;
    1146:	9b00      	ldr	r3, [sp, #0]

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
    1148:	6883      	ldr	r3, [r0, #8]
    114a:	7a5b      	ldrb	r3, [r3, #9]
    114c:	b90b      	cbnz	r3, 1152 <nrf_power_clock_isr+0x2a>
			clkstarted_handle(hfclk_dev);
    114e:	f003 fd71 	bl	4c34 <clkstarted_handle>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    1152:	4b0d      	ldr	r3, [pc, #52]	; (1188 <nrf_power_clock_isr+0x60>)
    1154:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    1156:	b182      	cbz	r2, 117a <nrf_power_clock_isr+0x52>
    return p_reg->INTENSET & mask;
    1158:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    115c:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    1160:	0792      	lsls	r2, r2, #30
    1162:	d50a      	bpl.n	117a <nrf_power_clock_isr+0x52>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1164:	2200      	movs	r2, #0
    1166:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    1168:	681b      	ldr	r3, [r3, #0]
    116a:	9301      	str	r3, [sp, #4]
    (void)dummy;
    116c:	9b01      	ldr	r3, [sp, #4]

		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started(lfclk_dev);
		}
		clkstarted_handle(lfclk_dev);
    116e:	4807      	ldr	r0, [pc, #28]	; (118c <nrf_power_clock_isr+0x64>)
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
    1170:	b003      	add	sp, #12
    1172:	f85d eb04 	ldr.w	lr, [sp], #4
		clkstarted_handle(lfclk_dev);
    1176:	f003 bd5d 	b.w	4c34 <clkstarted_handle>
}
    117a:	b003      	add	sp, #12
    117c:	f85d fb04 	ldr.w	pc, [sp], #4
    1180:	40000100 	.word	0x40000100
    1184:	20002540 	.word	0x20002540
    1188:	40000104 	.word	0x40000104
    118c:	2000254c 	.word	0x2000254c

00001190 <rtc1_nrf_isr>:
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
    1190:	4b0d      	ldr	r3, [pc, #52]	; (11c8 <rtc1_nrf_isr+0x38>)
    1192:	2200      	movs	r2, #0
    1194:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	__asm__ volatile(
    1198:	f04f 0220 	mov.w	r2, #32
    119c:	f3ef 8111 	mrs	r1, BASEPRI
    11a0:	f382 8811 	msr	BASEPRI, r2
    11a4:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    11a8:	4a08      	ldr	r2, [pc, #32]	; (11cc <rtc1_nrf_isr+0x3c>)
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    11aa:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
    11ae:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    11b0:	1ac0      	subs	r0, r0, r3
    11b2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    11b6:	4403      	add	r3, r0
    11b8:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    11ba:	f381 8811 	msr	BASEPRI, r1
    11be:	f3bf 8f6f 	isb	sy
		}
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    11c2:	f002 bf41 	b.w	4048 <z_clock_announce>
    11c6:	bf00      	nop
    11c8:	40011000 	.word	0x40011000
    11cc:	20000284 	.word	0x20000284

000011d0 <z_clock_driver_init>:
}

int z_clock_driver_init(struct device *device)
{
    11d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    11d2:	481c      	ldr	r0, [pc, #112]	; (1244 <z_clock_driver_init+0x74>)
    11d4:	f002 f8e2 	bl	339c <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_INST_0_NORDIC_NRF_CLOCK_LABEL "_32K");
	if (!clock) {
    11d8:	b380      	cbz	r0, 123c <z_clock_driver_init+0x6c>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
    11da:	6843      	ldr	r3, [r0, #4]
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    11dc:	4d1a      	ldr	r5, [pc, #104]	; (1248 <z_clock_driver_init+0x78>)
    11de:	681b      	ldr	r3, [r3, #0]
    11e0:	2100      	movs	r1, #0
    11e2:	4798      	blx	r3
    p_reg->CC[ch] = cc_val;
    11e4:	2601      	movs	r6, #1
    p_reg->PRESCALER = val;
    11e6:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
    11e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
    11ec:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
    11f0:	f8c5 6540 	str.w	r6, [r5, #1344]	; 0x540
    p_reg->INTENSET = mask;
    11f4:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    11f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    11fc:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1200:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1204:	601c      	str	r4, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    1206:	681b      	ldr	r3, [r3, #0]
    1208:	9301      	str	r3, [sp, #4]
    (void)dummy;
    120a:	9b01      	ldr	r3, [sp, #4]
    120c:	4b0f      	ldr	r3, [pc, #60]	; (124c <z_clock_driver_init+0x7c>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
    120e:	4631      	mov	r1, r6
    1210:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    1214:	2011      	movs	r0, #17
    1216:	4622      	mov	r2, r4
    1218:	f000 f918 	bl	144c <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
    121c:	2011      	movs	r0, #17
    121e:	f000 f905 	bl	142c <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    1222:	4b0b      	ldr	r3, [pc, #44]	; (1250 <z_clock_driver_init+0x80>)
    1224:	601e      	str	r6, [r3, #0]
    1226:	602e      	str	r6, [r5, #0]
     return p_reg->COUNTER;
    1228:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	if (!IS_ENABLED(TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
    122c:	4433      	add	r3, r6
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    122e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    1232:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	}

	return 0;
    1236:	4620      	mov	r0, r4
}
    1238:	b002      	add	sp, #8
    123a:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    123c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1240:	e7fa      	b.n	1238 <z_clock_driver_init+0x68>
    1242:	bf00      	nop
    1244:	00005b8a 	.word	0x00005b8a
    1248:	40011000 	.word	0x40011000
    124c:	e000e100 	.word	0xe000e100
    1250:	40011008 	.word	0x40011008

00001254 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
    1254:	b5f0      	push	{r4, r5, r6, r7, lr}
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
    1256:	4e25      	ldr	r6, [pc, #148]	; (12ec <z_clock_set_timeout+0x98>)
    1258:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    125c:	bf08      	it	eq
    125e:	4630      	moveq	r0, r6
	__asm__ volatile(
    1260:	f04f 0320 	mov.w	r3, #32
    1264:	f3ef 8511 	mrs	r5, BASEPRI
    1268:	f383 8811 	msr	BASEPRI, r3
    126c:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    1270:	491f      	ldr	r1, [pc, #124]	; (12f0 <z_clock_set_timeout+0x9c>)
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, dt, t = counter();
	u32_t unannounced = counter_sub(t, last_count);
    1272:	4b20      	ldr	r3, [pc, #128]	; (12f4 <z_clock_set_timeout+0xa0>)
    1274:	f8d1 4504 	ldr.w	r4, [r1, #1284]	; 0x504
    1278:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
    127a:	1ae2      	subs	r2, r4, r3
    127c:	f022 477f 	bic.w	r7, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    1280:	0212      	lsls	r2, r2, #8
    1282:	d419      	bmi.n	12b8 <z_clock_set_timeout+0x64>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
    1284:	1e42      	subs	r2, r0, #1
    1286:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    128a:	42b2      	cmp	r2, r6
    128c:	bfa8      	it	ge
    128e:	4632      	movge	r2, r6
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    1290:	1c78      	adds	r0, r7, #1
    1292:	4410      	add	r0, r2
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
    1294:	42b0      	cmp	r0, r6
    1296:	bf94      	ite	ls
    1298:	1818      	addls	r0, r3, r0
    129a:	1998      	addhi	r0, r3, r6
	return (a - b) & COUNTER_MAX;
    129c:	1b04      	subs	r4, r0, r4
    129e:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    12a2:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
	 * least on nRF52.  Some experimentation on nrf52840 shows
	 * that you need to be early by about 400 processor cycles
	 * (about 1/5th of a RTC cycle) in order to reliably get the
	 * interrupt.  The docs say two cycles, they mean two cycles.
	 */
	if (counter_sub(cyc, t) > 2) {
    12a6:	2c02      	cmp	r4, #2
    p_reg->CC[ch] = cc_val;
    12a8:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
    12ac:	d906      	bls.n	12bc <z_clock_set_timeout+0x68>
	__asm__ volatile(
    12ae:	f385 8811 	msr	BASEPRI, r5
    12b2:	f3bf 8f6f 	isb	sy
	}
#endif

	k_spin_unlock(&lock, key);
#endif /* CONFIG_TICKLESS_KERNEL */
}
    12b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ticks = 0;
    12b8:	2200      	movs	r2, #0
    12ba:	e7e9      	b.n	1290 <z_clock_set_timeout+0x3c>
     return p_reg->COUNTER;
    12bc:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
		if (dt == 0 || dt > 0x7fffff) {
    12c0:	4a0d      	ldr	r2, [pc, #52]	; (12f8 <z_clock_set_timeout+0xa4>)
	return (a - b) & COUNTER_MAX;
    12c2:	1ac3      	subs	r3, r0, r3
    12c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		if (dt == 0 || dt > 0x7fffff) {
    12c8:	1e5c      	subs	r4, r3, #1
    12ca:	4294      	cmp	r4, r2
    12cc:	d905      	bls.n	12da <z_clock_set_timeout+0x86>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    12ce:	4b0b      	ldr	r3, [pc, #44]	; (12fc <z_clock_set_timeout+0xa8>)
    12d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    12d4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    12d8:	e7e9      	b.n	12ae <z_clock_set_timeout+0x5a>
		} else if (dt == 1) {
    12da:	2b01      	cmp	r3, #1
			set_comparator(cyc + 2);
    12dc:	bf02      	ittt	eq
    12de:	3002      	addeq	r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    12e0:	f020 407f 	biceq.w	r0, r0, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    12e4:	f8c1 0540 	streq.w	r0, [r1, #1344]	; 0x540
    12e8:	e7e1      	b.n	12ae <z_clock_set_timeout+0x5a>
    12ea:	bf00      	nop
    12ec:	00fffffe 	.word	0x00fffffe
    12f0:	40011000 	.word	0x40011000
    12f4:	20000284 	.word	0x20000284
    12f8:	007ffffe 	.word	0x007ffffe
    12fc:	e000e100 	.word	0xe000e100

00001300 <z_clock_elapsed>:
	__asm__ volatile(
    1300:	f04f 0220 	mov.w	r2, #32
    1304:	f3ef 8311 	mrs	r3, BASEPRI
    1308:	f382 8811 	msr	BASEPRI, r2
    130c:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    1310:	4a06      	ldr	r2, [pc, #24]	; (132c <z_clock_elapsed+0x2c>)
    1312:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    1316:	4a06      	ldr	r2, [pc, #24]	; (1330 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    1318:	6812      	ldr	r2, [r2, #0]
    131a:	1a80      	subs	r0, r0, r2
    131c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    1320:	f383 8811 	msr	BASEPRI, r3
    1324:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    1328:	4770      	bx	lr
    132a:	bf00      	nop
    132c:	40011000 	.word	0x40011000
    1330:	20000284 	.word	0x20000284

00001334 <z_timer_cycle_get_32>:
	__asm__ volatile(
    1334:	f04f 0320 	mov.w	r3, #32
    1338:	f3ef 8211 	mrs	r2, BASEPRI
    133c:	f383 8811 	msr	BASEPRI, r3
    1340:	f3bf 8f6f 	isb	sy

u32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) + last_count;
    1344:	4906      	ldr	r1, [pc, #24]	; (1360 <z_timer_cycle_get_32+0x2c>)
    1346:	4b07      	ldr	r3, [pc, #28]	; (1364 <z_timer_cycle_get_32+0x30>)
    1348:	6808      	ldr	r0, [r1, #0]
    134a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    134e:	f382 8811 	msr	BASEPRI, r2
    1352:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    1356:	1a1b      	subs	r3, r3, r0
    1358:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    135c:	4418      	add	r0, r3
    135e:	4770      	bx	lr
    1360:	20000284 	.word	0x20000284
    1364:	40011000 	.word	0x40011000

00001368 <z_arm_exc_exit>:
    /* r0 contains the caller mode */
    push {r0, lr}
#endif

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    1368:	4804      	ldr	r0, [pc, #16]	; (137c <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
    136a:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
    136c:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
    136e:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    1370:	d003      	beq.n	137a <_EXIT_EXC>

#if defined(CONFIG_CPU_CORTEX_M)
    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    1372:	4903      	ldr	r1, [pc, #12]	; (1380 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
    1374:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    1378:	600a      	str	r2, [r1, #0]

0000137a <_EXIT_EXC>:
    bl z_check_stack_sentinel
#endif /* CONFIG_CPU_CORTEX_M */
#endif /* CONFIG_STACK_SENTINEL */

#if defined(CONFIG_CPU_CORTEX_M)
    bx lr
    137a:	4770      	bx	lr
    ldr r0, =_kernel
    137c:	2000038c 	.word	0x2000038c
    ldr r1, =_SCS_ICSR
    1380:	e000ed04 	.word	0xe000ed04

00001384 <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    1384:	4a09      	ldr	r2, [pc, #36]	; (13ac <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    1386:	490a      	ldr	r1, [pc, #40]	; (13b0 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    1388:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    138a:	6809      	ldr	r1, [r1, #0]
    138c:	6699      	str	r1, [r3, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    138e:	4909      	ldr	r1, [pc, #36]	; (13b4 <arch_swap+0x30>)
	_current->arch.basepri = key;
    1390:	6658      	str	r0, [r3, #100]	; 0x64
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1392:	684b      	ldr	r3, [r1, #4]
    1394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1398:	604b      	str	r3, [r1, #4]
    139a:	2300      	movs	r3, #0
    139c:	f383 8811 	msr	BASEPRI, r3
    13a0:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    13a4:	6893      	ldr	r3, [r2, #8]
}
    13a6:	6e98      	ldr	r0, [r3, #104]	; 0x68
    13a8:	4770      	bx	lr
    13aa:	bf00      	nop
    13ac:	2000038c 	.word	0x2000038c
    13b0:	0000592c 	.word	0x0000592c
    13b4:	e000ed00 	.word	0xe000ed00

000013b8 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    13b8:	4912      	ldr	r1, [pc, #72]	; (1404 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    13ba:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    13bc:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
    13c0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    13c2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    13c6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    13ca:	2020      	movs	r0, #32
    msr BASEPRI, r0
    13cc:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    13d0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    13d4:	4f0c      	ldr	r7, [pc, #48]	; (1408 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    13d6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    13da:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    13dc:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    13de:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    13e0:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs r3, #0
    13e2:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    13e4:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    13e6:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
    13ea:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    13ec:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    13ee:	f003 fcf7 	bl	4de0 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    13f2:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    13f6:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
    13fa:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    13fe:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    1402:	4770      	bx	lr
    ldr r1, =_kernel
    1404:	2000038c 	.word	0x2000038c
    ldr v4, =_SCS_ICSR
    1408:	e000ed04 	.word	0xe000ed04

0000140c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    140c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1410:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    1412:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1416:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    141a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    141c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1420:	2902      	cmp	r1, #2
    beq _oops
    1422:	d0ff      	beq.n	1424 <_oops>

00001424 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1424:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    1426:	f003 fcd0 	bl	4dca <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    142a:	bd01      	pop	{r0, pc}

0000142c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    142c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    142e:	2b00      	cmp	r3, #0
    1430:	db08      	blt.n	1444 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1432:	2201      	movs	r2, #1
    1434:	f000 001f 	and.w	r0, r0, #31
    1438:	fa02 f000 	lsl.w	r0, r2, r0
    143c:	095b      	lsrs	r3, r3, #5
    143e:	4a02      	ldr	r2, [pc, #8]	; (1448 <arch_irq_enable+0x1c>)
    1440:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    1444:	4770      	bx	lr
    1446:	bf00      	nop
    1448:	e000e100 	.word	0xe000e100

0000144c <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    144c:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    144e:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1450:	bfa8      	it	ge
    1452:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    1456:	f101 0101 	add.w	r1, r1, #1
    145a:	ea4f 1141 	mov.w	r1, r1, lsl #5
    145e:	bfae      	itee	ge
    1460:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1464:	f000 000f 	andlt.w	r0, r0, #15
    1468:	4b03      	ldrlt	r3, [pc, #12]	; (1478 <z_arm_irq_priority_set+0x2c>)
    146a:	b2c9      	uxtb	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    146c:	bfac      	ite	ge
    146e:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1472:	5419      	strblt	r1, [r3, r0]
}
    1474:	4770      	bx	lr
    1476:	bf00      	nop
    1478:	e000ed14 	.word	0xe000ed14

0000147c <arch_new_thread>:
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     size_t stackSize, k_thread_entry_t pEntry,
		     void *parameter1, void *parameter2, void *parameter3,
		     int priority, unsigned int options)
{
    147c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    147e:	461e      	mov	r6, r3
#endif
	stackEnd = pStackMem + stackSize;

	struct __esf *pInitCtx;

	z_new_thread_init(thread, pStackMem, stackSize, priority,
    1480:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1482:	9300      	str	r3, [sp, #0]
	stackEnd = pStackMem + stackSize;
    1484:	188c      	adds	r4, r1, r2
	z_new_thread_init(thread, pStackMem, stackSize, priority,
    1486:	9b09      	ldr	r3, [sp, #36]	; 0x24
{
    1488:	4605      	mov	r5, r0
	z_new_thread_init(thread, pStackMem, stackSize, priority,
    148a:	f004 f812 	bl	54b2 <z_new_thread_init>
	 *
	 * The initial carved stack frame only needs to contain the basic
	 * stack frame (state context), because no FP operations have been
	 * performed yet for this thread.
	 */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    148e:	f1a4 0320 	sub.w	r3, r4, #32
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
    1492:	4a0a      	ldr	r2, [pc, #40]	; (14bc <arch_new_thread+0x40>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    1494:	f023 0307 	bic.w	r3, r3, #7
	pInitCtx->basic.pc &= 0xfffffffe;
    1498:	f022 0201 	bic.w	r2, r2, #1
    149c:	619a      	str	r2, [r3, #24]
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
    149e:	9a06      	ldr	r2, [sp, #24]
    14a0:	605a      	str	r2, [r3, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
    14a2:	9a07      	ldr	r2, [sp, #28]
    14a4:	609a      	str	r2, [r3, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
    14a6:	9a08      	ldr	r2, [sp, #32]
    14a8:	60da      	str	r2, [r3, #12]
	pInitCtx->basic.xpsr =
    14aa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
	pInitCtx->basic.a1 = (u32_t)pEntry;
    14ae:	601e      	str	r6, [r3, #0]
	pInitCtx->basic.xpsr =
    14b0:	61da      	str	r2, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    14b2:	64ab      	str	r3, [r5, #72]	; 0x48
#if defined(CONFIG_CPU_CORTEX_R)
	pInitCtx->basic.lr = (u32_t)pInitCtx->basic.pc;
	thread->callee_saved.spsr = A_BIT | T_BIT | MODE_SYS;
	thread->callee_saved.lr = (u32_t)pInitCtx->basic.pc;
#endif
	thread->arch.basepri = 0;
    14b4:	2300      	movs	r3, #0
    14b6:	666b      	str	r3, [r5, #100]	; 0x64

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    14b8:	b002      	add	sp, #8
    14ba:	bd70      	pop	{r4, r5, r6, pc}
    14bc:	000042d5 	.word	0x000042d5

000014c0 <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
    14c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    14c2:	4605      	mov	r5, r0
    14c4:	460c      	mov	r4, r1
    14c6:	4617      	mov	r7, r2
    14c8:	461e      	mov	r6, r3
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    14ca:	f000 fb93 	bl	1bf4 <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
    14ce:	4b0a      	ldr	r3, [pc, #40]	; (14f8 <arch_switch_to_main_thread+0x38>)
	start_of_main_stack =
    14d0:	443c      	add	r4, r7
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    14d2:	4628      	mov	r0, r5
	_current = main_thread;
    14d4:	609d      	str	r5, [r3, #8]
	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);
    14d6:	f024 0407 	bic.w	r4, r4, #7
	z_arm_configure_dynamic_mpu_regions(main_thread);
    14da:	f003 fc81 	bl	4de0 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    14de:	4630      	mov	r0, r6
    14e0:	f384 8809 	msr	PSP, r4
    14e4:	2100      	movs	r1, #0
    14e6:	b663      	cpsie	if
    14e8:	f381 8811 	msr	BASEPRI, r1
    14ec:	f3bf 8f6f 	isb	sy
    14f0:	2200      	movs	r2, #0
    14f2:	2300      	movs	r3, #0
    14f4:	f002 feee 	bl	42d4 <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    14f8:	2000038c 	.word	0x2000038c

000014fc <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr r1, =_SCB_SCR
    14fc:	4901      	ldr	r1, [pc, #4]	; (1504 <z_arm_cpu_idle_init+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    14fe:	2210      	movs	r2, #16
	str r2, [r1]
    1500:	600a      	str	r2, [r1, #0]
#endif
	bx lr
    1502:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    1504:	e000ed10 	.word	0xe000ed10

00001508 <arch_cpu_idle>:
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    1508:	4040      	eors	r0, r0
	msr BASEPRI, r0
    150a:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    150e:	bf30      	wfi

	bx lr
    1510:	4770      	bx	lr
    1512:	bf00      	nop

00001514 <z_arm_bus_fault>:
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_reserved)

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) || \
	defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	mrs r0, MSP
    1514:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    1518:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
    151c:	4672      	mov	r2, lr

	push {r0, lr}
    151e:	b501      	push	{r0, lr}
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE || CONFIG_ARMv7_M_ARMV8_M_MAINLINE */

	bl z_arm_fault
    1520:	f000 fa46 	bl	19b0 <z_arm_fault>

#if defined(CONFIG_CPU_CORTEX_M)
	pop {r0, pc}
    1524:	bd01      	pop	{r0, pc}
    1526:	bf00      	nop

00001528 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    1528:	b573      	push	{r0, r1, r4, r5, r6, lr}
    152a:	4606      	mov	r6, r0

	if (esf != NULL) {
    152c:	460c      	mov	r4, r1
    152e:	2900      	cmp	r1, #0
    1530:	d038      	beq.n	15a4 <z_arm_fatal_error+0x7c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    1532:	2201      	movs	r2, #1
    1534:	f04f 0300 	mov.w	r3, #0
    1538:	f362 0307 	bfi	r3, r2, #0, #8
    153c:	4d1d      	ldr	r5, [pc, #116]	; (15b4 <z_arm_fatal_error+0x8c>)
    153e:	4a1e      	ldr	r2, [pc, #120]	; (15b8 <z_arm_fatal_error+0x90>)
    1540:	481e      	ldr	r0, [pc, #120]	; (15bc <z_arm_fatal_error+0x94>)
    1542:	1aad      	subs	r5, r5, r2
    1544:	f3c5 05c9 	ubfx	r5, r5, #3, #10
    1548:	f365 138f 	bfi	r3, r5, #6, #10
    154c:	f8ad 3000 	strh.w	r3, [sp]
    1550:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    1554:	6809      	ldr	r1, [r1, #0]
    1556:	f003 f8b1 	bl	46bc <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    155a:	2201      	movs	r2, #1
    155c:	f04f 0300 	mov.w	r3, #0
    1560:	f362 0307 	bfi	r3, r2, #0, #8
    1564:	f365 138f 	bfi	r3, r5, #6, #10
    1568:	f8ad 3000 	strh.w	r3, [sp]
    156c:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    1570:	68e1      	ldr	r1, [r4, #12]
    1572:	4813      	ldr	r0, [pc, #76]	; (15c0 <z_arm_fatal_error+0x98>)
    1574:	f003 f8a2 	bl	46bc <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    1578:	2301      	movs	r3, #1
    157a:	f04f 0200 	mov.w	r2, #0
    157e:	f363 0207 	bfi	r2, r3, #0, #8
    1582:	f365 128f 	bfi	r2, r5, #6, #10
    1586:	69e1      	ldr	r1, [r4, #28]
    1588:	480e      	ldr	r0, [pc, #56]	; (15c4 <z_arm_fatal_error+0x9c>)
    158a:	f003 f86b 	bl	4664 <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    158e:	f04f 0200 	mov.w	r2, #0
    1592:	2301      	movs	r3, #1
    1594:	f363 0207 	bfi	r2, r3, #0, #8
    1598:	f365 128f 	bfi	r2, r5, #6, #10
    159c:	69a1      	ldr	r1, [r4, #24]
    159e:	480a      	ldr	r0, [pc, #40]	; (15c8 <z_arm_fatal_error+0xa0>)
    15a0:	f003 f860 	bl	4664 <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    15a4:	4621      	mov	r1, r4
    15a6:	4630      	mov	r0, r6
}
    15a8:	b002      	add	sp, #8
    15aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    15ae:	f001 bf37 	b.w	3420 <z_fatal_error>
    15b2:	bf00      	nop
    15b4:	000057e8 	.word	0x000057e8
    15b8:	000057d0 	.word	0x000057d0
    15bc:	00005bb6 	.word	0x00005bb6
    15c0:	00005be5 	.word	0x00005be5
    15c4:	00005c14 	.word	0x00005c14
    15c8:	00005c23 	.word	0x00005c23

000015cc <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    15cc:	bf30      	wfi
    b z_SysNmiOnReset
    15ce:	f7ff bffd 	b.w	15cc <z_SysNmiOnReset>
    15d2:	bf00      	nop

000015d4 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    15d4:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    15d6:	4b08      	ldr	r3, [pc, #32]	; (15f8 <z_arm_prep_c+0x24>)
    15d8:	4a08      	ldr	r2, [pc, #32]	; (15fc <z_arm_prep_c+0x28>)
    15da:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    15de:	6093      	str	r3, [r2, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    15e0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    15e4:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
    15e8:	f001 ff98 	bl	351c <z_bss_zero>
	z_data_copy();
    15ec:	f001 ffa0 	bl	3530 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_int_lib_init();
    15f0:	f000 face 	bl	1b90 <z_arm_int_lib_init>
	z_cstart();
    15f4:	f001 ffd4 	bl	35a0 <z_cstart>
    15f8:	00000000 	.word	0x00000000
    15fc:	e000ed00 	.word	0xe000ed00

00001600 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1600:	b501      	push	{r0, lr}
	 * device for the next timer deadline is not interrupted.  For
	 * non-tickless idle, this ensures that the clearing of the kernel idle
	 * state is not interrupted.  In each case, z_sys_power_save_idle_exit
	 * is called with interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    1602:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1604:	4a0b      	ldr	r2, [pc, #44]	; (1634 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1606:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    1608:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    160a:	bf1e      	ittt	ne
	movne	r1, #0
    160c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    160e:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    1610:	f003 fe76 	blne	5300 <z_sys_power_save_idle_exit>
_idle_state_cleared:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1614:	b662      	cpsie	i
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    1616:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    161a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    161e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 */
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    1622:	4905      	ldr	r1, [pc, #20]	; (1638 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1624:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1626:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    1628:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    162a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    162e:	4903      	ldr	r1, [pc, #12]	; (163c <_isr_wrapper+0x3c>)
	bx r1
    1630:	4708      	bx	r1
    1632:	0000      	.short	0x0000
	ldr r2, =_kernel
    1634:	2000038c 	.word	0x2000038c
	ldr r1, =_sw_isr_table
    1638:	00005608 	.word	0x00005608
	ldr r1, =z_arm_int_exit
    163c:	00001369 	.word	0x00001369

00001640 <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    1640:	f003 fcd6 	bl	4ff0 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1644:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1646:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
    164a:	4808      	ldr	r0, [pc, #32]	; (166c <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    164c:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    1650:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1652:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    1656:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    165a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    165c:	4308      	orrs	r0, r1
    msr CONTROL, r0
    165e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    1662:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    1666:	f7ff ffb5 	bl	15d4 <z_arm_prep_c>
    166a:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
    166c:	20001818 	.word	0x20001818

00001670 <usage_fault.isra.2>:
 */
static u32_t usage_fault(const z_arch_esf_t *esf)
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    1670:	2301      	movs	r3, #1
    1672:	f04f 0100 	mov.w	r1, #0
static u32_t usage_fault(const z_arch_esf_t *esf)
    1676:	b510      	push	{r4, lr}
	PR_FAULT_INFO("***** USAGE FAULT *****");
    1678:	f363 0107 	bfi	r1, r3, #0, #8
    167c:	4c33      	ldr	r4, [pc, #204]	; (174c <usage_fault.isra.2+0xdc>)
    167e:	4b34      	ldr	r3, [pc, #208]	; (1750 <usage_fault.isra.2+0xe0>)
    1680:	4834      	ldr	r0, [pc, #208]	; (1754 <usage_fault.isra.2+0xe4>)
    1682:	1ae4      	subs	r4, r4, r3
    1684:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    1688:	f364 118f 	bfi	r1, r4, #6, #10
    168c:	f002 ffdd 	bl	464a <log_0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1690:	4b31      	ldr	r3, [pc, #196]	; (1758 <usage_fault.isra.2+0xe8>)
    1692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1694:	019a      	lsls	r2, r3, #6
    1696:	d509      	bpl.n	16ac <usage_fault.isra.2+0x3c>
		PR_FAULT_INFO("  Division by zero");
    1698:	f04f 0100 	mov.w	r1, #0
    169c:	2301      	movs	r3, #1
    169e:	f363 0107 	bfi	r1, r3, #0, #8
    16a2:	f364 118f 	bfi	r1, r4, #6, #10
    16a6:	482d      	ldr	r0, [pc, #180]	; (175c <usage_fault.isra.2+0xec>)
    16a8:	f002 ffcf 	bl	464a <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    16ac:	4b2a      	ldr	r3, [pc, #168]	; (1758 <usage_fault.isra.2+0xe8>)
    16ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    16b0:	01db      	lsls	r3, r3, #7
    16b2:	d509      	bpl.n	16c8 <usage_fault.isra.2+0x58>
		PR_FAULT_INFO("  Unaligned memory access");
    16b4:	f04f 0100 	mov.w	r1, #0
    16b8:	2301      	movs	r3, #1
    16ba:	f363 0107 	bfi	r1, r3, #0, #8
    16be:	f364 118f 	bfi	r1, r4, #6, #10
    16c2:	4827      	ldr	r0, [pc, #156]	; (1760 <usage_fault.isra.2+0xf0>)
    16c4:	f002 ffc1 	bl	464a <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    16c8:	4b23      	ldr	r3, [pc, #140]	; (1758 <usage_fault.isra.2+0xe8>)
    16ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    16cc:	0318      	lsls	r0, r3, #12
    16ce:	d509      	bpl.n	16e4 <usage_fault.isra.2+0x74>
		PR_FAULT_INFO("  No coprocessor instructions");
    16d0:	f04f 0100 	mov.w	r1, #0
    16d4:	2301      	movs	r3, #1
    16d6:	f363 0107 	bfi	r1, r3, #0, #8
    16da:	f364 118f 	bfi	r1, r4, #6, #10
    16de:	4821      	ldr	r0, [pc, #132]	; (1764 <usage_fault.isra.2+0xf4>)
    16e0:	f002 ffb3 	bl	464a <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    16e4:	4b1c      	ldr	r3, [pc, #112]	; (1758 <usage_fault.isra.2+0xe8>)
    16e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    16e8:	0359      	lsls	r1, r3, #13
    16ea:	d509      	bpl.n	1700 <usage_fault.isra.2+0x90>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    16ec:	f04f 0100 	mov.w	r1, #0
    16f0:	2301      	movs	r3, #1
    16f2:	f363 0107 	bfi	r1, r3, #0, #8
    16f6:	f364 118f 	bfi	r1, r4, #6, #10
    16fa:	481b      	ldr	r0, [pc, #108]	; (1768 <usage_fault.isra.2+0xf8>)
    16fc:	f002 ffa5 	bl	464a <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1700:	4b15      	ldr	r3, [pc, #84]	; (1758 <usage_fault.isra.2+0xe8>)
    1702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1704:	039a      	lsls	r2, r3, #14
    1706:	d509      	bpl.n	171c <usage_fault.isra.2+0xac>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    1708:	f04f 0100 	mov.w	r1, #0
    170c:	2301      	movs	r3, #1
    170e:	f363 0107 	bfi	r1, r3, #0, #8
    1712:	f364 118f 	bfi	r1, r4, #6, #10
    1716:	4815      	ldr	r0, [pc, #84]	; (176c <usage_fault.isra.2+0xfc>)
    1718:	f002 ff97 	bl	464a <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    171c:	4b0e      	ldr	r3, [pc, #56]	; (1758 <usage_fault.isra.2+0xe8>)
    171e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1720:	03db      	lsls	r3, r3, #15
    1722:	d509      	bpl.n	1738 <usage_fault.isra.2+0xc8>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    1724:	f04f 0100 	mov.w	r1, #0
    1728:	2301      	movs	r3, #1
    172a:	f363 0107 	bfi	r1, r3, #0, #8
    172e:	f364 118f 	bfi	r1, r4, #6, #10
    1732:	480f      	ldr	r0, [pc, #60]	; (1770 <usage_fault.isra.2+0x100>)
    1734:	f002 ff89 	bl	464a <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1738:	4a07      	ldr	r2, [pc, #28]	; (1758 <usage_fault.isra.2+0xe8>)
    173a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    173c:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    1740:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    1744:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    1746:	2000      	movs	r0, #0
    1748:	bd10      	pop	{r4, pc}
    174a:	bf00      	nop
    174c:	000057e8 	.word	0x000057e8
    1750:	000057d0 	.word	0x000057d0
    1754:	00005db1 	.word	0x00005db1
    1758:	e000ed00 	.word	0xe000ed00
    175c:	00005dc9 	.word	0x00005dc9
    1760:	00005ddc 	.word	0x00005ddc
    1764:	00005df6 	.word	0x00005df6
    1768:	00005e14 	.word	0x00005e14
    176c:	00005e39 	.word	0x00005e39
    1770:	00005e53 	.word	0x00005e53

00001774 <mem_manage_fault.isra.4>:
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    1774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	PR_FAULT_INFO("***** MPU FAULT *****");
    1776:	2301      	movs	r3, #1
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    1778:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    177a:	f04f 0100 	mov.w	r1, #0
    177e:	f363 0107 	bfi	r1, r3, #0, #8
    1782:	4c36      	ldr	r4, [pc, #216]	; (185c <mem_manage_fault.isra.4+0xe8>)
    1784:	4b36      	ldr	r3, [pc, #216]	; (1860 <mem_manage_fault.isra.4+0xec>)
    1786:	1ae4      	subs	r4, r4, r3
    1788:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    178c:	f364 118f 	bfi	r1, r4, #6, #10
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    1790:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** MPU FAULT *****");
    1792:	4834      	ldr	r0, [pc, #208]	; (1864 <mem_manage_fault.isra.4+0xf0>)
    1794:	f002 ff59 	bl	464a <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1798:	4b33      	ldr	r3, [pc, #204]	; (1868 <mem_manage_fault.isra.4+0xf4>)
    179a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    179c:	06d9      	lsls	r1, r3, #27
    179e:	d509      	bpl.n	17b4 <mem_manage_fault.isra.4+0x40>
		PR_FAULT_INFO("  Stacking error (context area might be"
    17a0:	f04f 0100 	mov.w	r1, #0
    17a4:	2301      	movs	r3, #1
    17a6:	f363 0107 	bfi	r1, r3, #0, #8
    17aa:	f364 118f 	bfi	r1, r4, #6, #10
    17ae:	482f      	ldr	r0, [pc, #188]	; (186c <mem_manage_fault.isra.4+0xf8>)
    17b0:	f002 ff4b 	bl	464a <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    17b4:	4b2c      	ldr	r3, [pc, #176]	; (1868 <mem_manage_fault.isra.4+0xf4>)
    17b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    17b8:	071a      	lsls	r2, r3, #28
    17ba:	d509      	bpl.n	17d0 <mem_manage_fault.isra.4+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    17bc:	f04f 0100 	mov.w	r1, #0
    17c0:	2301      	movs	r3, #1
    17c2:	f363 0107 	bfi	r1, r3, #0, #8
    17c6:	f364 118f 	bfi	r1, r4, #6, #10
    17ca:	4829      	ldr	r0, [pc, #164]	; (1870 <mem_manage_fault.isra.4+0xfc>)
    17cc:	f002 ff3d 	bl	464a <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    17d0:	4d25      	ldr	r5, [pc, #148]	; (1868 <mem_manage_fault.isra.4+0xf4>)
    17d2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    17d4:	079b      	lsls	r3, r3, #30
    17d6:	d51c      	bpl.n	1812 <mem_manage_fault.isra.4+0x9e>
		PR_FAULT_INFO("  Data Access Violation");
    17d8:	2301      	movs	r3, #1
    17da:	f04f 0100 	mov.w	r1, #0
    17de:	f363 0107 	bfi	r1, r3, #0, #8
    17e2:	f364 118f 	bfi	r1, r4, #6, #10
    17e6:	4823      	ldr	r0, [pc, #140]	; (1874 <mem_manage_fault.isra.4+0x100>)
    17e8:	f002 ff2f 	bl	464a <log_0>
		mmfar = SCB->MMFAR;
    17ec:	6b69      	ldr	r1, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    17ee:	6aab      	ldr	r3, [r5, #40]	; 0x28
    17f0:	0618      	lsls	r0, r3, #24
    17f2:	d50e      	bpl.n	1812 <mem_manage_fault.isra.4+0x9e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    17f4:	f04f 0200 	mov.w	r2, #0
    17f8:	2301      	movs	r3, #1
    17fa:	f363 0207 	bfi	r2, r3, #0, #8
    17fe:	f364 128f 	bfi	r2, r4, #6, #10
    1802:	481d      	ldr	r0, [pc, #116]	; (1878 <mem_manage_fault.isra.4+0x104>)
    1804:	f002 ff2e 	bl	4664 <log_1>
			if (from_hard_fault) {
    1808:	b11f      	cbz	r7, 1812 <mem_manage_fault.isra.4+0x9e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    180a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    180c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    1810:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    1812:	4b15      	ldr	r3, [pc, #84]	; (1868 <mem_manage_fault.isra.4+0xf4>)
    1814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1816:	07da      	lsls	r2, r3, #31
    1818:	d509      	bpl.n	182e <mem_manage_fault.isra.4+0xba>
		PR_FAULT_INFO("  Instruction Access Violation");
    181a:	f04f 0100 	mov.w	r1, #0
    181e:	2301      	movs	r3, #1
    1820:	f363 0107 	bfi	r1, r3, #0, #8
    1824:	f364 118f 	bfi	r1, r4, #6, #10
    1828:	4814      	ldr	r0, [pc, #80]	; (187c <mem_manage_fault.isra.4+0x108>)
    182a:	f002 ff0e 	bl	464a <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    182e:	4b0e      	ldr	r3, [pc, #56]	; (1868 <mem_manage_fault.isra.4+0xf4>)
    1830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1832:	069b      	lsls	r3, r3, #26
    1834:	d509      	bpl.n	184a <mem_manage_fault.isra.4+0xd6>
		PR_FAULT_INFO(
    1836:	f04f 0100 	mov.w	r1, #0
    183a:	2301      	movs	r3, #1
    183c:	f363 0107 	bfi	r1, r3, #0, #8
    1840:	f364 118f 	bfi	r1, r4, #6, #10
    1844:	480e      	ldr	r0, [pc, #56]	; (1880 <mem_manage_fault.isra.4+0x10c>)
    1846:	f002 ff00 	bl	464a <log_0>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    184a:	4b07      	ldr	r3, [pc, #28]	; (1868 <mem_manage_fault.isra.4+0xf4>)
    184c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    184e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    1850:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    1852:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    1856:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    1858:	7030      	strb	r0, [r6, #0]
}
    185a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    185c:	000057e8 	.word	0x000057e8
    1860:	000057d0 	.word	0x000057d0
    1864:	00005cd9 	.word	0x00005cd9
    1868:	e000ed00 	.word	0xe000ed00
    186c:	00005cef 	.word	0x00005cef
    1870:	00005d22 	.word	0x00005d22
    1874:	00005d35 	.word	0x00005d35
    1878:	00005d4d 	.word	0x00005d4d
    187c:	00005d63 	.word	0x00005d63
    1880:	00005d82 	.word	0x00005d82

00001884 <bus_fault.isra.5>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    1884:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	PR_FAULT_INFO("***** BUS FAULT *****");
    1886:	2301      	movs	r3, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    1888:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    188a:	f04f 0100 	mov.w	r1, #0
    188e:	f363 0107 	bfi	r1, r3, #0, #8
    1892:	4c3c      	ldr	r4, [pc, #240]	; (1984 <bus_fault.isra.5+0x100>)
    1894:	4b3c      	ldr	r3, [pc, #240]	; (1988 <bus_fault.isra.5+0x104>)
    1896:	1ae4      	subs	r4, r4, r3
    1898:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    189c:	f364 118f 	bfi	r1, r4, #6, #10
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    18a0:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
    18a2:	483a      	ldr	r0, [pc, #232]	; (198c <bus_fault.isra.5+0x108>)
    18a4:	f002 fed1 	bl	464a <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    18a8:	4b39      	ldr	r3, [pc, #228]	; (1990 <bus_fault.isra.5+0x10c>)
    18aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    18ac:	04d9      	lsls	r1, r3, #19
    18ae:	d509      	bpl.n	18c4 <bus_fault.isra.5+0x40>
		PR_FAULT_INFO("  Stacking error");
    18b0:	f04f 0100 	mov.w	r1, #0
    18b4:	2301      	movs	r3, #1
    18b6:	f363 0107 	bfi	r1, r3, #0, #8
    18ba:	f364 118f 	bfi	r1, r4, #6, #10
    18be:	4835      	ldr	r0, [pc, #212]	; (1994 <bus_fault.isra.5+0x110>)
    18c0:	f002 fec3 	bl	464a <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    18c4:	4b32      	ldr	r3, [pc, #200]	; (1990 <bus_fault.isra.5+0x10c>)
    18c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    18c8:	051a      	lsls	r2, r3, #20
    18ca:	d509      	bpl.n	18e0 <bus_fault.isra.5+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    18cc:	f04f 0100 	mov.w	r1, #0
    18d0:	2301      	movs	r3, #1
    18d2:	f363 0107 	bfi	r1, r3, #0, #8
    18d6:	f364 118f 	bfi	r1, r4, #6, #10
    18da:	482f      	ldr	r0, [pc, #188]	; (1998 <bus_fault.isra.5+0x114>)
    18dc:	f002 feb5 	bl	464a <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    18e0:	4d2b      	ldr	r5, [pc, #172]	; (1990 <bus_fault.isra.5+0x10c>)
    18e2:	6aab      	ldr	r3, [r5, #40]	; 0x28
    18e4:	059b      	lsls	r3, r3, #22
    18e6:	d51c      	bpl.n	1922 <bus_fault.isra.5+0x9e>
		PR_FAULT_INFO("  Precise data bus error");
    18e8:	2301      	movs	r3, #1
    18ea:	f04f 0100 	mov.w	r1, #0
    18ee:	f363 0107 	bfi	r1, r3, #0, #8
    18f2:	f364 118f 	bfi	r1, r4, #6, #10
    18f6:	4829      	ldr	r0, [pc, #164]	; (199c <bus_fault.isra.5+0x118>)
    18f8:	f002 fea7 	bl	464a <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    18fc:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    18fe:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1900:	0418      	lsls	r0, r3, #16
    1902:	d50e      	bpl.n	1922 <bus_fault.isra.5+0x9e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    1904:	f04f 0200 	mov.w	r2, #0
    1908:	2301      	movs	r3, #1
    190a:	f363 0207 	bfi	r2, r3, #0, #8
    190e:	f364 128f 	bfi	r2, r4, #6, #10
    1912:	4823      	ldr	r0, [pc, #140]	; (19a0 <bus_fault.isra.5+0x11c>)
    1914:	f002 fea6 	bl	4664 <log_1>
			if (from_hard_fault) {
    1918:	b11f      	cbz	r7, 1922 <bus_fault.isra.5+0x9e>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    191a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    191c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    1920:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1922:	4b1b      	ldr	r3, [pc, #108]	; (1990 <bus_fault.isra.5+0x10c>)
    1924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1926:	0559      	lsls	r1, r3, #21
    1928:	d509      	bpl.n	193e <bus_fault.isra.5+0xba>
		PR_FAULT_INFO("  Imprecise data bus error");
    192a:	f04f 0100 	mov.w	r1, #0
    192e:	2301      	movs	r3, #1
    1930:	f363 0107 	bfi	r1, r3, #0, #8
    1934:	f364 118f 	bfi	r1, r4, #6, #10
    1938:	481a      	ldr	r0, [pc, #104]	; (19a4 <bus_fault.isra.5+0x120>)
    193a:	f002 fe86 	bl	464a <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    193e:	4b14      	ldr	r3, [pc, #80]	; (1990 <bus_fault.isra.5+0x10c>)
    1940:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1942:	05d2      	lsls	r2, r2, #23
    1944:	d511      	bpl.n	196a <bus_fault.isra.5+0xe6>
		PR_FAULT_INFO("  Instruction bus error");
    1946:	f04f 0100 	mov.w	r1, #0
    194a:	2301      	movs	r3, #1
    194c:	f363 0107 	bfi	r1, r3, #0, #8
    1950:	4815      	ldr	r0, [pc, #84]	; (19a8 <bus_fault.isra.5+0x124>)
    1952:	f364 118f 	bfi	r1, r4, #6, #10
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    1956:	f002 fe78 	bl	464a <log_0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    195a:	4a0d      	ldr	r2, [pc, #52]	; (1990 <bus_fault.isra.5+0x10c>)
    195c:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    195e:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1960:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    1964:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    1966:	7030      	strb	r0, [r6, #0]
}
    1968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    196a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    196c:	049b      	lsls	r3, r3, #18
    196e:	d5f4      	bpl.n	195a <bus_fault.isra.5+0xd6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    1970:	f04f 0100 	mov.w	r1, #0
    1974:	2301      	movs	r3, #1
    1976:	f363 0107 	bfi	r1, r3, #0, #8
    197a:	f364 118f 	bfi	r1, r4, #6, #10
    197e:	480b      	ldr	r0, [pc, #44]	; (19ac <bus_fault.isra.5+0x128>)
    1980:	e7e9      	b.n	1956 <bus_fault.isra.5+0xd2>
    1982:	bf00      	nop
    1984:	000057e8 	.word	0x000057e8
    1988:	000057d0 	.word	0x000057d0
    198c:	00005c51 	.word	0x00005c51
    1990:	e000ed00 	.word	0xe000ed00
    1994:	00005c67 	.word	0x00005c67
    1998:	00005d22 	.word	0x00005d22
    199c:	00005c78 	.word	0x00005c78
    19a0:	00005c91 	.word	0x00005c91
    19a4:	00005ca6 	.word	0x00005ca6
    19a8:	00005cc1 	.word	0x00005cc1
    19ac:	00005d82 	.word	0x00005d82

000019b0 <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
    19b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    19b4:	4b64      	ldr	r3, [pc, #400]	; (1b48 <z_arm_fault+0x198>)
    19b6:	685e      	ldr	r6, [r3, #4]
{
    19b8:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    19ba:	f3c6 0408 	ubfx	r4, r6, #0, #9
    19be:	2500      	movs	r5, #0
    19c0:	f385 8811 	msr	BASEPRI, r5
    19c4:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    19c8:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    19cc:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    19d0:	d111      	bne.n	19f6 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    19d2:	f002 030c 	and.w	r3, r2, #12
    19d6:	2b08      	cmp	r3, #8
    19d8:	d10f      	bne.n	19fa <z_arm_fault+0x4a>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    19da:	2301      	movs	r3, #1
    19dc:	f04f 0100 	mov.w	r1, #0
    19e0:	f363 0107 	bfi	r1, r3, #0, #8
    19e4:	4a59      	ldr	r2, [pc, #356]	; (1b4c <z_arm_fault+0x19c>)
    19e6:	4b5a      	ldr	r3, [pc, #360]	; (1b50 <z_arm_fault+0x1a0>)
    19e8:	485a      	ldr	r0, [pc, #360]	; (1b54 <z_arm_fault+0x1a4>)
    19ea:	1a9b      	subs	r3, r3, r2
    19ec:	08db      	lsrs	r3, r3, #3
    19ee:	f363 118f 	bfi	r1, r3, #6, #10
    19f2:	f002 fe2a 	bl	464a <log_0>
		return NULL;
    19f6:	462f      	mov	r7, r5
    19f8:	e004      	b.n	1a04 <z_arm_fault+0x54>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    19fa:	0712      	lsls	r2, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    19fc:	bf4e      	itee	mi
    19fe:	460f      	movmi	r7, r1
			ptr_esf = (z_arch_esf_t *)msp;
    1a00:	4607      	movpl	r7, r0
			*nested_exc = true;
    1a02:	2501      	movpl	r5, #1
	*recoverable = false;
    1a04:	2300      	movs	r3, #0
    1a06:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    1a0a:	1ee3      	subs	r3, r4, #3
    1a0c:	2b09      	cmp	r3, #9
    1a0e:	d87f      	bhi.n	1b10 <z_arm_fault+0x160>
    1a10:	e8df f003 	tbb	[pc, r3]
    1a14:	4c6d6905 	.word	0x4c6d6905
    1a18:	7e7e7e7e 	.word	0x7e7e7e7e
    1a1c:	717e      	.short	0x717e
	PR_FAULT_INFO("***** HARD FAULT *****");
    1a1e:	2301      	movs	r3, #1
    1a20:	f04f 0100 	mov.w	r1, #0
    1a24:	f363 0107 	bfi	r1, r3, #0, #8
    1a28:	4e49      	ldr	r6, [pc, #292]	; (1b50 <z_arm_fault+0x1a0>)
    1a2a:	4b48      	ldr	r3, [pc, #288]	; (1b4c <z_arm_fault+0x19c>)
    1a2c:	484a      	ldr	r0, [pc, #296]	; (1b58 <z_arm_fault+0x1a8>)
    1a2e:	1af6      	subs	r6, r6, r3
    1a30:	f3c6 06c9 	ubfx	r6, r6, #3, #10
    1a34:	f366 118f 	bfi	r1, r6, #6, #10
    1a38:	f002 fe07 	bl	464a <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1a3c:	4b42      	ldr	r3, [pc, #264]	; (1b48 <z_arm_fault+0x198>)
    1a3e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
	*recoverable = false;
    1a40:	f04f 0800 	mov.w	r8, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1a44:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
    1a48:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1a4c:	d00b      	beq.n	1a66 <z_arm_fault+0xb6>
		PR_EXC("  Bus fault on vector table read");
    1a4e:	f04f 0100 	mov.w	r1, #0
    1a52:	2301      	movs	r3, #1
    1a54:	f363 0107 	bfi	r1, r3, #0, #8
    1a58:	4840      	ldr	r0, [pc, #256]	; (1b5c <z_arm_fault+0x1ac>)
    1a5a:	f366 118f 	bfi	r1, r6, #6, #10
	PR_FAULT_INFO(
    1a5e:	f002 fdf4 	bl	464a <log_0>
	u32_t reason = K_ERR_CPU_EXCEPTION;
    1a62:	2400      	movs	r4, #0
    1a64:	e025      	b.n	1ab2 <z_arm_fault+0x102>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    1a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1a68:	005b      	lsls	r3, r3, #1
    1a6a:	d522      	bpl.n	1ab2 <z_arm_fault+0x102>
		PR_EXC("  Fault escalation (see below)");
    1a6c:	2301      	movs	r3, #1
    1a6e:	f04f 0100 	mov.w	r1, #0
    1a72:	f363 0107 	bfi	r1, r3, #0, #8
    1a76:	f366 118f 	bfi	r1, r6, #6, #10
    1a7a:	4839      	ldr	r0, [pc, #228]	; (1b60 <z_arm_fault+0x1b0>)
    1a7c:	f002 fde5 	bl	464a <log_0>
		if (SCB_MMFSR != 0) {
    1a80:	4b38      	ldr	r3, [pc, #224]	; (1b64 <z_arm_fault+0x1b4>)
    1a82:	781b      	ldrb	r3, [r3, #0]
    1a84:	b12b      	cbz	r3, 1a92 <z_arm_fault+0xe2>
			reason = mem_manage_fault(esf, 1, recoverable);
    1a86:	f10d 0107 	add.w	r1, sp, #7
    1a8a:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    1a8c:	f7ff fe72 	bl	1774 <mem_manage_fault.isra.4>
    1a90:	e00e      	b.n	1ab0 <z_arm_fault+0x100>
		} else if (SCB_BFSR != 0) {
    1a92:	4b35      	ldr	r3, [pc, #212]	; (1b68 <z_arm_fault+0x1b8>)
    1a94:	781b      	ldrb	r3, [r3, #0]
    1a96:	b12b      	cbz	r3, 1aa4 <z_arm_fault+0xf4>
			reason = bus_fault(esf, 1, recoverable);
    1a98:	f10d 0107 	add.w	r1, sp, #7
    1a9c:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    1a9e:	f7ff fef1 	bl	1884 <bus_fault.isra.5>
    1aa2:	e005      	b.n	1ab0 <z_arm_fault+0x100>
		} else if (SCB_UFSR != 0) {
    1aa4:	4b31      	ldr	r3, [pc, #196]	; (1b6c <z_arm_fault+0x1bc>)
    1aa6:	881b      	ldrh	r3, [r3, #0]
    1aa8:	b29b      	uxth	r3, r3
    1aaa:	b113      	cbz	r3, 1ab2 <z_arm_fault+0x102>
			reason = usage_fault(esf);
    1aac:	f7ff fde0 	bl	1670 <usage_fault.isra.2>
    1ab0:	4604      	mov	r4, r0
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    1ab2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1ab6:	b99b      	cbnz	r3, 1ae0 <z_arm_fault+0x130>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    1ab8:	2220      	movs	r2, #32
    1aba:	4639      	mov	r1, r7
    1abc:	a802      	add	r0, sp, #8
    1abe:	f003 f9c4 	bl	4e4a <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    1ac2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1ac4:	2d00      	cmp	r5, #0
    1ac6:	d03a      	beq.n	1b3e <z_arm_fault+0x18e>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    1ac8:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1acc:	b922      	cbnz	r2, 1ad8 <z_arm_fault+0x128>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1ace:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    1ad2:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1ad6:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    1ad8:	a902      	add	r1, sp, #8
    1ada:	4620      	mov	r0, r4
    1adc:	f7ff fd24 	bl	1528 <z_arm_fatal_error>
}
    1ae0:	b00a      	add	sp, #40	; 0x28
    1ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    1ae6:	f10d 0107 	add.w	r1, sp, #7
    1aea:	2000      	movs	r0, #0
    1aec:	e7ce      	b.n	1a8c <z_arm_fault+0xdc>
		reason = bus_fault(esf, 0, recoverable);
    1aee:	f10d 0107 	add.w	r1, sp, #7
    1af2:	2000      	movs	r0, #0
    1af4:	e7d3      	b.n	1a9e <z_arm_fault+0xee>
	PR_FAULT_INFO(
    1af6:	2301      	movs	r3, #1
    1af8:	f04f 0100 	mov.w	r1, #0
    1afc:	f363 0107 	bfi	r1, r3, #0, #8
    1b00:	4a12      	ldr	r2, [pc, #72]	; (1b4c <z_arm_fault+0x19c>)
    1b02:	4b13      	ldr	r3, [pc, #76]	; (1b50 <z_arm_fault+0x1a0>)
    1b04:	481a      	ldr	r0, [pc, #104]	; (1b70 <z_arm_fault+0x1c0>)
    1b06:	1a9b      	subs	r3, r3, r2
    1b08:	08db      	lsrs	r3, r3, #3
    1b0a:	f363 118f 	bfi	r1, r3, #6, #10
    1b0e:	e7a6      	b.n	1a5e <z_arm_fault+0xae>
	PR_FAULT_INFO("***** %s %d) *****",
    1b10:	2201      	movs	r2, #1
    1b12:	f04f 0300 	mov.w	r3, #0
    1b16:	f362 0307 	bfi	r3, r2, #0, #8
    1b1a:	490d      	ldr	r1, [pc, #52]	; (1b50 <z_arm_fault+0x1a0>)
    1b1c:	4a0b      	ldr	r2, [pc, #44]	; (1b4c <z_arm_fault+0x19c>)
    1b1e:	4815      	ldr	r0, [pc, #84]	; (1b74 <z_arm_fault+0x1c4>)
    1b20:	1a89      	subs	r1, r1, r2
    1b22:	08c9      	lsrs	r1, r1, #3
    1b24:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
    1b28:	f361 138f 	bfi	r3, r1, #6, #10
    1b2c:	f1a4 0210 	sub.w	r2, r4, #16
    1b30:	4911      	ldr	r1, [pc, #68]	; (1b78 <z_arm_fault+0x1c8>)
    1b32:	bf18      	it	ne
    1b34:	4601      	movne	r1, r0
    1b36:	4811      	ldr	r0, [pc, #68]	; (1b7c <z_arm_fault+0x1cc>)
    1b38:	f002 fda8 	bl	468c <log_2>
    1b3c:	e791      	b.n	1a62 <z_arm_fault+0xb2>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1b3e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    1b42:	f023 0301 	bic.w	r3, r3, #1
    1b46:	e7c6      	b.n	1ad6 <z_arm_fault+0x126>
    1b48:	e000ed00 	.word	0xe000ed00
    1b4c:	000057d0 	.word	0x000057d0
    1b50:	000057e8 	.word	0x000057e8
    1b54:	00005e7e 	.word	0x00005e7e
    1b58:	00005ea9 	.word	0x00005ea9
    1b5c:	00005ec0 	.word	0x00005ec0
    1b60:	00005ee1 	.word	0x00005ee1
    1b64:	e000ed28 	.word	0xe000ed28
    1b68:	e000ed29 	.word	0xe000ed29
    1b6c:	e000ed2a 	.word	0xe000ed2a
    1b70:	00005f00 	.word	0x00005f00
    1b74:	00005f4b 	.word	0x00005f4b
    1b78:	00005f36 	.word	0x00005f36
    1b7c:	00005f64 	.word	0x00005f64

00001b80 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1b80:	4a02      	ldr	r2, [pc, #8]	; (1b8c <z_arm_fault_init+0xc>)
    1b82:	6953      	ldr	r3, [r2, #20]
    1b84:	f043 0310 	orr.w	r3, r3, #16
    1b88:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    1b8a:	4770      	bx	lr
    1b8c:	e000ed00 	.word	0xe000ed00

00001b90 <z_arm_int_lib_init>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1b90:	4804      	ldr	r0, [pc, #16]	; (1ba4 <z_arm_int_lib_init+0x14>)
 * @return N/A
 */

void z_arm_int_lib_init(void)
{
	int irq = 0;
    1b92:	2300      	movs	r3, #0
    1b94:	2120      	movs	r1, #32
    1b96:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1b98:	3301      	adds	r3, #1
    1b9a:	2b27      	cmp	r3, #39	; 0x27
    1b9c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1ba0:	d1f9      	bne.n	1b96 <z_arm_int_lib_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    1ba2:	4770      	bx	lr
    1ba4:	e000e100 	.word	0xe000e100

00001ba8 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
    1ba8:	b538      	push	{r3, r4, r5, lr}
    1baa:	4605      	mov	r5, r0
	__asm__ volatile(
    1bac:	f04f 0320 	mov.w	r3, #32
    1bb0:	f3ef 8411 	mrs	r4, BASEPRI
    1bb4:	f383 8811 	msr	BASEPRI, r3
    1bb8:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
    1bbc:	f003 fc88 	bl	54d0 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
    1bc0:	4b0a      	ldr	r3, [pc, #40]	; (1bec <z_impl_k_thread_abort+0x44>)
    1bc2:	689b      	ldr	r3, [r3, #8]
    1bc4:	42ab      	cmp	r3, r5
    1bc6:	d10b      	bne.n	1be0 <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    1bc8:	4b09      	ldr	r3, [pc, #36]	; (1bf0 <z_impl_k_thread_abort+0x48>)
    1bca:	685a      	ldr	r2, [r3, #4]
    1bcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
    1bd0:	b912      	cbnz	r2, 1bd8 <z_impl_k_thread_abort+0x30>
	z_check_stack_sentinel();

#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
    1bd2:	4620      	mov	r0, r4
    1bd4:	f7ff fbd6 	bl	1384 <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1bd8:	685a      	ldr	r2, [r3, #4]
    1bda:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    1bde:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
    1be0:	4620      	mov	r0, r4
}
    1be2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
    1be6:	f003 bbdc 	b.w	53a2 <z_reschedule_irqlock>
    1bea:	bf00      	nop
    1bec:	2000038c 	.word	0x2000038c
    1bf0:	e000ed00 	.word	0xe000ed00

00001bf4 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    1bf4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    1bf6:	4b08      	ldr	r3, [pc, #32]	; (1c18 <z_arm_configure_static_mpu_regions+0x24>)
    1bf8:	9301      	str	r3, [sp, #4]
    1bfa:	4b08      	ldr	r3, [pc, #32]	; (1c1c <z_arm_configure_static_mpu_regions+0x28>)
    1bfc:	9302      	str	r3, [sp, #8]
    1bfe:	4b08      	ldr	r3, [pc, #32]	; (1c20 <z_arm_configure_static_mpu_regions+0x2c>)
    1c00:	9303      	str	r3, [sp, #12]

	/* Define a constant array of k_mem_partition objects
	 * to hold the configuration of the respective static
	 * MPU regions.
	 */
	const struct k_mem_partition *static_regions[] = {
    1c02:	ab01      	add	r3, sp, #4
    1c04:	9300      	str	r3, [sp, #0]
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    1c06:	4a07      	ldr	r2, [pc, #28]	; (1c24 <z_arm_configure_static_mpu_regions+0x30>)
    1c08:	4b07      	ldr	r3, [pc, #28]	; (1c28 <z_arm_configure_static_mpu_regions+0x34>)
    1c0a:	2101      	movs	r1, #1
    1c0c:	4668      	mov	r0, sp
    1c0e:	f000 f8b5 	bl	1d7c <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    1c12:	b005      	add	sp, #20
    1c14:	f85d fb04 	ldr.w	pc, [sp], #4
    1c18:	20000000 	.word	0x20000000
    1c1c:	00000000 	.word	0x00000000
    1c20:	060b0000 	.word	0x060b0000
    1c24:	20000000 	.word	0x20000000
    1c28:	20010000 	.word	0x20010000

00001c2c <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct k_mem_partition
	*regions[], u8_t regions_num, u8_t start_reg_index,
	bool do_sanity_check)
{
    1c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    1c2e:	4f2e      	ldr	r7, [pc, #184]	; (1ce8 <mpu_configure_regions+0xbc>)
    1c30:	460e      	mov	r6, r1
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    1c32:	2100      	movs	r1, #0
    1c34:	42b1      	cmp	r1, r6
    1c36:	da22      	bge.n	1c7e <mpu_configure_regions+0x52>
		if (regions[i]->size == 0U) {
    1c38:	f850 c021 	ldr.w	ip, [r0, r1, lsl #2]
    1c3c:	f8dc 4004 	ldr.w	r4, [ip, #4]
    1c40:	2c00      	cmp	r4, #0
    1c42:	d04f      	beq.n	1ce4 <mpu_configure_regions+0xb8>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    1c44:	b1eb      	cbz	r3, 1c82 <mpu_configure_regions+0x56>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1)) == 0U)
    1c46:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    1c4a:	ea14 0f0e 	tst.w	r4, lr
    1c4e:	d106      	bne.n	1c5e <mpu_configure_regions+0x32>
		&&
    1c50:	2c1f      	cmp	r4, #31
    1c52:	d904      	bls.n	1c5e <mpu_configure_regions+0x32>
		((part->start & (part->size - 1)) == 0U);
    1c54:	f8dc 5000 	ldr.w	r5, [ip]
		&&
    1c58:	ea1e 0f05 	tst.w	lr, r5
    1c5c:	d011      	beq.n	1c82 <mpu_configure_regions+0x56>
				(!mpu_partition_is_valid(regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    1c5e:	2301      	movs	r3, #1
    1c60:	f04f 0200 	mov.w	r2, #0
    1c64:	f363 0207 	bfi	r2, r3, #0, #8
    1c68:	4820      	ldr	r0, [pc, #128]	; (1cec <mpu_configure_regions+0xc0>)
    1c6a:	4b21      	ldr	r3, [pc, #132]	; (1cf0 <mpu_configure_regions+0xc4>)
    1c6c:	1a1b      	subs	r3, r3, r0
    1c6e:	08db      	lsrs	r3, r3, #3
    1c70:	4820      	ldr	r0, [pc, #128]	; (1cf4 <mpu_configure_regions+0xc8>)
    1c72:	f363 128f 	bfi	r2, r3, #6, #10
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    1c76:	f002 fcf5 	bl	4664 <log_1>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, regions[i]);
    1c7a:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    1c7e:	4610      	mov	r0, r2
    1c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 * to that power-of-two value.
 */
static inline u32_t size_to_mpu_rasr_size(u32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    1c82:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, regions[i]);
    1c84:	b2d5      	uxtb	r5, r2
	region_conf.base = new_region->start;
    1c86:	f8dc 2000 	ldr.w	r2, [ip]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
    1c8a:	f8dc c008 	ldr.w	ip, [ip, #8]
    1c8e:	d91a      	bls.n	1cc6 <mpu_configure_regions+0x9a>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    1c90:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    1c94:	d819      	bhi.n	1cca <mpu_configure_regions+0x9e>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    1c96:	3c01      	subs	r4, #1
    1c98:	fab4 f484 	clz	r4, r4
    1c9c:	f1c4 041f 	rsb	r4, r4, #31
    1ca0:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1)) {
    1ca2:	2d07      	cmp	r5, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    1ca4:	ea4c 0404 	orr.w	r4, ip, r4
    1ca8:	d911      	bls.n	1cce <mpu_configure_regions+0xa2>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    1caa:	2301      	movs	r3, #1
    1cac:	f04f 0200 	mov.w	r2, #0
    1cb0:	f363 0207 	bfi	r2, r3, #0, #8
    1cb4:	490d      	ldr	r1, [pc, #52]	; (1cec <mpu_configure_regions+0xc0>)
    1cb6:	4b0e      	ldr	r3, [pc, #56]	; (1cf0 <mpu_configure_regions+0xc4>)
    1cb8:	480f      	ldr	r0, [pc, #60]	; (1cf8 <mpu_configure_regions+0xcc>)
    1cba:	1a5b      	subs	r3, r3, r1
    1cbc:	08db      	lsrs	r3, r3, #3
    1cbe:	f363 128f 	bfi	r2, r3, #6, #10
    1cc2:	4629      	mov	r1, r5
    1cc4:	e7d7      	b.n	1c76 <mpu_configure_regions+0x4a>
		return REGION_32B;
    1cc6:	2408      	movs	r4, #8
    1cc8:	e7eb      	b.n	1ca2 <mpu_configure_regions+0x76>
		return REGION_4G;
    1cca:	243e      	movs	r4, #62	; 0x3e
    1ccc:	e7e9      	b.n	1ca2 <mpu_configure_regions+0x76>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1cce:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    1cd2:	432a      	orrs	r2, r5
    1cd4:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1cd8:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    1cdc:	60bd      	str	r5, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1cde:	60fa      	str	r2, [r7, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1ce0:	613c      	str	r4, [r7, #16]
		reg_index++;
    1ce2:	1c6a      	adds	r2, r5, #1
	for (i = 0; i < regions_num; i++) {
    1ce4:	3101      	adds	r1, #1
    1ce6:	e7a5      	b.n	1c34 <mpu_configure_regions+0x8>
    1ce8:	e000ed90 	.word	0xe000ed90
    1cec:	000057d0 	.word	0x000057d0
    1cf0:	000057e0 	.word	0x000057e0
    1cf4:	00005f7b 	.word	0x00005f7b
    1cf8:	00005f9e 	.word	0x00005f9e

00001cfc <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    1cfc:	4b03      	ldr	r3, [pc, #12]	; (1d0c <arm_core_mpu_enable+0x10>)
    1cfe:	2205      	movs	r2, #5
    1d00:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    1d02:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1d06:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    1d0a:	4770      	bx	lr
    1d0c:	e000ed90 	.word	0xe000ed90

00001d10 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    1d10:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    1d14:	4b01      	ldr	r3, [pc, #4]	; (1d1c <arm_core_mpu_disable+0xc>)
    1d16:	2200      	movs	r2, #0
    1d18:	605a      	str	r2, [r3, #4]
}
    1d1a:	4770      	bx	lr
    1d1c:	e000ed90 	.word	0xe000ed90

00001d20 <arm_mpu_init>:
 */
static int arm_mpu_init(struct device *arg)
{
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    1d20:	4913      	ldr	r1, [pc, #76]	; (1d70 <arm_mpu_init+0x50>)
    1d22:	6808      	ldr	r0, [r1, #0]
    1d24:	2808      	cmp	r0, #8
{
    1d26:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    1d28:	d81e      	bhi.n	1d68 <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    1d2a:	f7ff fff1 	bl	1d10 <arm_core_mpu_disable>
	MPU->RNR = index;
    1d2e:	4c11      	ldr	r4, [pc, #68]	; (1d74 <arm_mpu_init+0x54>)
    1d30:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1d32:	2200      	movs	r2, #0
    1d34:	4290      	cmp	r0, r2
    1d36:	f101 010c 	add.w	r1, r1, #12
    1d3a:	d105      	bne.n	1d48 <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    1d3c:	4b0e      	ldr	r3, [pc, #56]	; (1d78 <arm_mpu_init+0x58>)
    1d3e:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    1d40:	f7ff ffdc 	bl	1cfc <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    1d44:	2000      	movs	r0, #0
}
    1d46:	bd10      	pop	{r4, pc}
    1d48:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1d4a:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    1d4e:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    1d52:	4313      	orrs	r3, r2
    1d54:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1d58:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1d5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
    1d5e:	f043 0301 	orr.w	r3, r3, #1
    1d62:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1d64:	3201      	adds	r2, #1
    1d66:	e7e5      	b.n	1d34 <arm_mpu_init+0x14>
		return -1;
    1d68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1d6c:	e7eb      	b.n	1d46 <arm_mpu_init+0x26>
    1d6e:	bf00      	nop
    1d70:	00005894 	.word	0x00005894
    1d74:	e000ed90 	.word	0xe000ed90
    1d78:	200003d1 	.word	0x200003d1

00001d7c <arm_core_mpu_configure_static_mpu_regions>:
{
    1d7c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    1d7e:	4c03      	ldr	r4, [pc, #12]	; (1d8c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    1d80:	2301      	movs	r3, #1
    1d82:	7822      	ldrb	r2, [r4, #0]
    1d84:	f7ff ff52 	bl	1c2c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    1d88:	7020      	strb	r0, [r4, #0]
}
    1d8a:	bd10      	pop	{r4, pc}
    1d8c:	200003d1 	.word	0x200003d1

00001d90 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    1d90:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    1d92:	4a08      	ldr	r2, [pc, #32]	; (1db4 <arm_core_mpu_configure_dynamic_mpu_regions+0x24>)
    1d94:	2300      	movs	r3, #0
    1d96:	7812      	ldrb	r2, [r2, #0]
    1d98:	f7ff ff48 	bl	1c2c <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    1d9c:	f110 0f16 	cmn.w	r0, #22
    1da0:	d003      	beq.n	1daa <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    1da2:	4b05      	ldr	r3, [pc, #20]	; (1db8 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
  MPU->RASR = 0U;
    1da4:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    1da6:	2807      	cmp	r0, #7
    1da8:	dd00      	ble.n	1dac <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
}
    1daa:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    1dac:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
    1dae:	611a      	str	r2, [r3, #16]
    1db0:	3001      	adds	r0, #1
    1db2:	e7f8      	b.n	1da6 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    1db4:	200003d1 	.word	0x200003d1
    1db8:	e000ed90 	.word	0xe000ed90

00001dbc <z_prf>:
	*sptr = p;
	return i;
}

int z_prf(int (*func)(), void *dest, const char *format, va_list vargs)
{
    1dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1dc0:	b09f      	sub	sp, #124	; 0x7c
    1dc2:	461e      	mov	r6, r3
	struct zero_padding zero;
	VALTYPE val;

#define PUTC(c)	do { if ((*func)(c, dest) == EOF) return EOF; } while (false)

	count = 0;
    1dc4:	2300      	movs	r3, #0
{
    1dc6:	9001      	str	r0, [sp, #4]
    1dc8:	9104      	str	r1, [sp, #16]
	count = 0;
    1dca:	9300      	str	r3, [sp, #0]

	while ((c = *format++)) {
    1dcc:	4613      	mov	r3, r2
    1dce:	f813 0b01 	ldrb.w	r0, [r3], #1
    1dd2:	9305      	str	r3, [sp, #20]
    1dd4:	b158      	cbz	r0, 1dee <z_prf+0x32>
		if (c != '%') {
    1dd6:	2825      	cmp	r0, #37	; 0x25
    1dd8:	f000 8085 	beq.w	1ee6 <z_prf+0x12a>
			PUTC(c);
    1ddc:	9904      	ldr	r1, [sp, #16]
    1dde:	9b01      	ldr	r3, [sp, #4]
    1de0:	4798      	blx	r3
    1de2:	3001      	adds	r0, #1
    1de4:	f040 840d 	bne.w	2602 <z_prf+0x846>
    1de8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1dec:	9300      	str	r3, [sp, #0]
		}
	}
	return count;

#undef PUTC
}
    1dee:	9800      	ldr	r0, [sp, #0]
    1df0:	b01f      	add	sp, #124	; 0x7c
    1df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				switch (c) {
    1df6:	2c23      	cmp	r4, #35	; 0x23
    1df8:	d06c      	beq.n	1ed4 <z_prf+0x118>
    1dfa:	d861      	bhi.n	1ec0 <z_prf+0x104>
    1dfc:	2c00      	cmp	r4, #0
    1dfe:	d0f6      	beq.n	1dee <z_prf+0x32>
					fspace = true;
    1e00:	2c20      	cmp	r4, #32
    1e02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1e04:	bf08      	it	eq
    1e06:	2301      	moveq	r3, #1
    1e08:	930a      	str	r3, [sp, #40]	; 0x28
					fminus = true;
    1e0a:	f8cd 8014 	str.w	r8, [sp, #20]
			while (strchr("-+ #0", (c = *format++)) != NULL) {
    1e0e:	f8dd 8014 	ldr.w	r8, [sp, #20]
    1e12:	48b9      	ldr	r0, [pc, #740]	; (20f8 <z_prf+0x33c>)
    1e14:	f818 4b01 	ldrb.w	r4, [r8], #1
    1e18:	4621      	mov	r1, r4
    1e1a:	f002 fffc 	bl	4e16 <strchr>
    1e1e:	2800      	cmp	r0, #0
    1e20:	d1e9      	bne.n	1df6 <z_prf+0x3a>
			if (c == '*') {
    1e22:	2c2a      	cmp	r4, #42	; 0x2a
    1e24:	d166      	bne.n	1ef4 <z_prf+0x138>
				width = va_arg(vargs, int);
    1e26:	f856 3b04 	ldr.w	r3, [r6], #4
    1e2a:	9307      	str	r3, [sp, #28]
				if (width < 0) {
    1e2c:	2b00      	cmp	r3, #0
					width = -width;
    1e2e:	bfbf      	itttt	lt
    1e30:	425b      	neglt	r3, r3
    1e32:	9307      	strlt	r3, [sp, #28]
					fminus = true;
    1e34:	2301      	movlt	r3, #1
    1e36:	930b      	strlt	r3, [sp, #44]	; 0x2c
				c = *format++;
    1e38:	9b05      	ldr	r3, [sp, #20]
    1e3a:	f898 4000 	ldrb.w	r4, [r8]
    1e3e:	f103 0802 	add.w	r8, r3, #2
			if (c == '.') {
    1e42:	2c2e      	cmp	r4, #46	; 0x2e
    1e44:	d17c      	bne.n	1f40 <z_prf+0x184>
				if (c == '*') {
    1e46:	f898 3000 	ldrb.w	r3, [r8]
    1e4a:	2b2a      	cmp	r3, #42	; 0x2a
    1e4c:	d175      	bne.n	1f3a <z_prf+0x17e>
					precision = va_arg(vargs, int);
    1e4e:	f856 5b04 	ldr.w	r5, [r6], #4
				c = *format++;
    1e52:	f108 0801 	add.w	r8, r8, #1
				c = *format++;
    1e56:	f818 4b01 	ldrb.w	r4, [r8], #1
			if (strchr("hlz", c) != NULL) {
    1e5a:	48a8      	ldr	r0, [pc, #672]	; (20fc <z_prf+0x340>)
    1e5c:	4621      	mov	r1, r4
    1e5e:	4627      	mov	r7, r4
    1e60:	f002 ffd9 	bl	4e16 <strchr>
    1e64:	2800      	cmp	r0, #0
    1e66:	d06e      	beq.n	1f46 <z_prf+0x18a>
				c = *format++;
    1e68:	4643      	mov	r3, r8
				} else if (i == 'h' && c == 'h') {
    1e6a:	2f68      	cmp	r7, #104	; 0x68
				c = *format++;
    1e6c:	f813 4b01 	ldrb.w	r4, [r3], #1
    1e70:	9305      	str	r3, [sp, #20]
				} else if (i == 'h' && c == 'h') {
    1e72:	d107      	bne.n	1e84 <z_prf+0xc8>
    1e74:	2c68      	cmp	r4, #104	; 0x68
    1e76:	d105      	bne.n	1e84 <z_prf+0xc8>
					c = *format++;
    1e78:	f108 0302 	add.w	r3, r8, #2
    1e7c:	f898 4001 	ldrb.w	r4, [r8, #1]
    1e80:	9305      	str	r3, [sp, #20]
					i = 'H';
    1e82:	2748      	movs	r7, #72	; 0x48
			switch (c) {
    1e84:	2c67      	cmp	r4, #103	; 0x67
    1e86:	d87c      	bhi.n	1f82 <z_prf+0x1c6>
    1e88:	2c65      	cmp	r4, #101	; 0x65
    1e8a:	f080 8139 	bcs.w	2100 <z_prf+0x344>
    1e8e:	2c47      	cmp	r4, #71	; 0x47
    1e90:	d85d      	bhi.n	1f4e <z_prf+0x192>
    1e92:	2c45      	cmp	r4, #69	; 0x45
    1e94:	f080 8134 	bcs.w	2100 <z_prf+0x344>
    1e98:	2c00      	cmp	r4, #0
    1e9a:	d0a8      	beq.n	1dee <z_prf+0x32>
    1e9c:	2c25      	cmp	r4, #37	; 0x25
    1e9e:	f000 83ac 	beq.w	25fa <z_prf+0x83e>
				PUTC('%');
    1ea2:	9904      	ldr	r1, [sp, #16]
    1ea4:	9b01      	ldr	r3, [sp, #4]
    1ea6:	2025      	movs	r0, #37	; 0x25
    1ea8:	4798      	blx	r3
    1eaa:	3001      	adds	r0, #1
    1eac:	d09c      	beq.n	1de8 <z_prf+0x2c>
				PUTC(c);
    1eae:	9904      	ldr	r1, [sp, #16]
    1eb0:	9b01      	ldr	r3, [sp, #4]
    1eb2:	4620      	mov	r0, r4
    1eb4:	4798      	blx	r3
    1eb6:	3001      	adds	r0, #1
    1eb8:	d096      	beq.n	1de8 <z_prf+0x2c>
				count += 2;
    1eba:	9b00      	ldr	r3, [sp, #0]
    1ebc:	3302      	adds	r3, #2
    1ebe:	e3a2      	b.n	2606 <z_prf+0x84a>
				switch (c) {
    1ec0:	2c2d      	cmp	r4, #45	; 0x2d
    1ec2:	d00a      	beq.n	1eda <z_prf+0x11e>
    1ec4:	2c30      	cmp	r4, #48	; 0x30
    1ec6:	d00b      	beq.n	1ee0 <z_prf+0x124>
					fplus = true;
    1ec8:	2c2b      	cmp	r4, #43	; 0x2b
    1eca:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1ecc:	bf08      	it	eq
    1ece:	2301      	moveq	r3, #1
    1ed0:	9309      	str	r3, [sp, #36]	; 0x24
    1ed2:	e79a      	b.n	1e0a <z_prf+0x4e>
					falt = true;
    1ed4:	2301      	movs	r3, #1
    1ed6:	9306      	str	r3, [sp, #24]
    1ed8:	e797      	b.n	1e0a <z_prf+0x4e>
					fminus = true;
    1eda:	2301      	movs	r3, #1
    1edc:	930b      	str	r3, [sp, #44]	; 0x2c
    1ede:	e794      	b.n	1e0a <z_prf+0x4e>
					fzero = true;
    1ee0:	2301      	movs	r3, #1
    1ee2:	9308      	str	r3, [sp, #32]
    1ee4:	e791      	b.n	1e0a <z_prf+0x4e>
			fminus = fplus = fspace = falt = fzero = false;
    1ee6:	2300      	movs	r3, #0
    1ee8:	9308      	str	r3, [sp, #32]
    1eea:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
    1eee:	930b      	str	r3, [sp, #44]	; 0x2c
    1ef0:	9306      	str	r3, [sp, #24]
    1ef2:	e78c      	b.n	1e0e <z_prf+0x52>
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    1ef4:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
			} else if (!isdigit(c)) {
    1ef8:	2b09      	cmp	r3, #9
				width = 0;
    1efa:	9007      	str	r0, [sp, #28]
			} else if (!isdigit(c)) {
    1efc:	d8a1      	bhi.n	1e42 <z_prf+0x86>
		i = 10 * i + *p++ - '0';
    1efe:	220a      	movs	r2, #10
	while (isdigit(*p)) {
    1f00:	f8dd 8014 	ldr.w	r8, [sp, #20]
    1f04:	f818 4b01 	ldrb.w	r4, [r8], #1
    1f08:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    1f0c:	2b09      	cmp	r3, #9
    1f0e:	d898      	bhi.n	1e42 <z_prf+0x86>
		i = 10 * i + *p++ - '0';
    1f10:	9b07      	ldr	r3, [sp, #28]
    1f12:	f8cd 8014 	str.w	r8, [sp, #20]
    1f16:	fb02 4403 	mla	r4, r2, r3, r4
    1f1a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    1f1e:	9307      	str	r3, [sp, #28]
    1f20:	e7ee      	b.n	1f00 <z_prf+0x144>
    1f22:	fb01 3505 	mla	r5, r1, r5, r3
    1f26:	3d30      	subs	r5, #48	; 0x30
    1f28:	4690      	mov	r8, r2
	while (isdigit(*p)) {
    1f2a:	4642      	mov	r2, r8
    1f2c:	f812 3b01 	ldrb.w	r3, [r2], #1
    1f30:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    1f34:	2809      	cmp	r0, #9
    1f36:	d9f4      	bls.n	1f22 <z_prf+0x166>
    1f38:	e78d      	b.n	1e56 <z_prf+0x9a>
	int i = 0;
    1f3a:	2500      	movs	r5, #0
		i = 10 * i + *p++ - '0';
    1f3c:	210a      	movs	r1, #10
    1f3e:	e7f4      	b.n	1f2a <z_prf+0x16e>
			precision = -1;
    1f40:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    1f44:	e789      	b.n	1e5a <z_prf+0x9e>
    1f46:	f8cd 8014 	str.w	r8, [sp, #20]
			i = 0;
    1f4a:	4607      	mov	r7, r0
    1f4c:	e79a      	b.n	1e84 <z_prf+0xc8>
			switch (c) {
    1f4e:	2c63      	cmp	r4, #99	; 0x63
    1f50:	d05a      	beq.n	2008 <z_prf+0x24c>
    1f52:	d820      	bhi.n	1f96 <z_prf+0x1da>
    1f54:	2c58      	cmp	r4, #88	; 0x58
    1f56:	d1a4      	bne.n	1ea2 <z_prf+0xe6>
				if (c == 'o') {
    1f58:	2c6f      	cmp	r4, #111	; 0x6f
    1f5a:	f106 0904 	add.w	r9, r6, #4
    1f5e:	6831      	ldr	r1, [r6, #0]
    1f60:	f040 831c 	bne.w	259c <z_prf+0x7e0>
	if (alt_form) {
    1f64:	9b06      	ldr	r3, [sp, #24]
    1f66:	2b00      	cmp	r3, #0
    1f68:	f000 830a 	beq.w	2580 <z_prf+0x7c4>
		*buf++ = '0';
    1f6c:	2330      	movs	r3, #48	; 0x30
    1f6e:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		if (!value) {
    1f72:	2900      	cmp	r1, #0
    1f74:	f040 830f 	bne.w	2596 <z_prf+0x7da>
			*buf++ = 0;
    1f78:	f88d 105d 	strb.w	r1, [sp, #93]	; 0x5d
			prefix = 0;
    1f7c:	4688      	mov	r8, r1
			return 1;
    1f7e:	2601      	movs	r6, #1
    1f80:	e026      	b.n	1fd0 <z_prf+0x214>
			switch (c) {
    1f82:	2c70      	cmp	r4, #112	; 0x70
    1f84:	f000 82e7 	beq.w	2556 <z_prf+0x79a>
    1f88:	d828      	bhi.n	1fdc <z_prf+0x220>
    1f8a:	2c6e      	cmp	r4, #110	; 0x6e
    1f8c:	f000 82d0 	beq.w	2530 <z_prf+0x774>
    1f90:	d8e2      	bhi.n	1f58 <z_prf+0x19c>
    1f92:	2c69      	cmp	r4, #105	; 0x69
    1f94:	d185      	bne.n	1ea2 <z_prf+0xe6>
				switch (i) {
    1f96:	6834      	ldr	r4, [r6, #0]
	if (value < 0) {
    1f98:	2c00      	cmp	r4, #0
    1f9a:	f106 0904 	add.w	r9, r6, #4
    1f9e:	f280 809c 	bge.w	20da <z_prf+0x31e>
		*buf++ = '-';
    1fa2:	232d      	movs	r3, #45	; 0x2d
    1fa4:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		value = -value;
    1fa8:	4261      	negs	r1, r4
		*buf++ = ' ';
    1faa:	f10d 065d 	add.w	r6, sp, #93	; 0x5d
	return _to_x(buf, value, 10);
    1fae:	4630      	mov	r0, r6
    1fb0:	220a      	movs	r2, #10
    1fb2:	f002 ff96 	bl	4ee2 <_to_x>
				if (fplus || fspace || val < 0) {
    1fb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
	return (buf + _to_udec(buf, value)) - start;
    1fb8:	4406      	add	r6, r0
    1fba:	a817      	add	r0, sp, #92	; 0x5c
    1fbc:	1a36      	subs	r6, r6, r0
				if (fplus || fspace || val < 0) {
    1fbe:	2b00      	cmp	r3, #0
    1fc0:	f040 8324 	bne.w	260c <z_prf+0x850>
    1fc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1fc6:	2b00      	cmp	r3, #0
    1fc8:	f040 8320 	bne.w	260c <z_prf+0x850>
    1fcc:	ea4f 78d4 	mov.w	r8, r4, lsr #31
			if (precision >= 0) {
    1fd0:	2d00      	cmp	r5, #0
    1fd2:	da22      	bge.n	201a <z_prf+0x25e>
			zero.predot = zero.postdot = zero.trail = 0;
    1fd4:	2500      	movs	r5, #0
    1fd6:	462f      	mov	r7, r5
    1fd8:	46aa      	mov	sl, r5
    1fda:	e0e5      	b.n	21a8 <z_prf+0x3ec>
			switch (c) {
    1fdc:	2c75      	cmp	r4, #117	; 0x75
    1fde:	d0bb      	beq.n	1f58 <z_prf+0x19c>
    1fe0:	2c78      	cmp	r4, #120	; 0x78
    1fe2:	d0b9      	beq.n	1f58 <z_prf+0x19c>
    1fe4:	2c73      	cmp	r4, #115	; 0x73
    1fe6:	f47f af5c 	bne.w	1ea2 <z_prf+0xe6>
				cptr = va_arg(vargs, char *);
    1fea:	46b1      	mov	r9, r6
					precision = INT_MAX;
    1fec:	2d00      	cmp	r5, #0
				cptr = va_arg(vargs, char *);
    1fee:	f859 3b04 	ldr.w	r3, [r9], #4
					precision = INT_MAX;
    1ff2:	bfb8      	it	lt
    1ff4:	f06f 4500 	mvnlt.w	r5, #2147483648	; 0x80000000
				for (clen = 0; clen < precision; clen++) {
    1ff8:	2600      	movs	r6, #0
    1ffa:	42b5      	cmp	r5, r6
    1ffc:	f040 82bb 	bne.w	2576 <z_prf+0x7ba>
    2000:	462e      	mov	r6, r5
    2002:	2500      	movs	r5, #0
    2004:	46a8      	mov	r8, r5
    2006:	e009      	b.n	201c <z_prf+0x260>
				buf[0] = va_arg(vargs, int);
    2008:	46b1      	mov	r9, r6
				break;
    200a:	f04f 0800 	mov.w	r8, #0
				buf[0] = va_arg(vargs, int);
    200e:	f859 3b04 	ldr.w	r3, [r9], #4
    2012:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
				clen = 1;
    2016:	2601      	movs	r6, #1
				break;
    2018:	4645      	mov	r5, r8
    201a:	ab17      	add	r3, sp, #92	; 0x5c
				zero_head = precision - clen + prefix;
    201c:	eb05 0208 	add.w	r2, r5, r8
			zero.predot = zero.postdot = zero.trail = 0;
    2020:	2500      	movs	r5, #0
				zero_head = precision - clen + prefix;
    2022:	1b92      	subs	r2, r2, r6
			zero.predot = zero.postdot = zero.trail = 0;
    2024:	462f      	mov	r7, r5
    2026:	46aa      	mov	sl, r5
			if (zero_head < 0) {
    2028:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
			width -= clen + zero_head;
    202c:	1991      	adds	r1, r2, r6
    202e:	9106      	str	r1, [sp, #24]
    2030:	9907      	ldr	r1, [sp, #28]
    2032:	1990      	adds	r0, r2, r6
    2034:	1a0c      	subs	r4, r1, r0
			if (!fminus && width > 0) {
    2036:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2038:	b911      	cbnz	r1, 2040 <z_prf+0x284>
    203a:	2c00      	cmp	r4, #0
    203c:	f300 8304 	bgt.w	2648 <z_prf+0x88c>
			while (prefix-- > 0) {
    2040:	eb03 0b08 	add.w	fp, r3, r8
    2044:	455b      	cmp	r3, fp
    2046:	f040 8301 	bne.w	264c <z_prf+0x890>
			while (zero_head-- > 0) {
    204a:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
    204e:	f080 830d 	bcs.w	266c <z_prf+0x8b0>
			clen -= prefix;
    2052:	eba6 0608 	sub.w	r6, r6, r8
			if (zero.predot) {
    2056:	f1ba 0f00 	cmp.w	sl, #0
    205a:	d011      	beq.n	2080 <z_prf+0x2c4>
				c = *cptr;
    205c:	f89b 0000 	ldrb.w	r0, [fp]
				while (isdigit(c)) {
    2060:	eb0b 0806 	add.w	r8, fp, r6
    2064:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    2068:	2b09      	cmp	r3, #9
    206a:	eba8 060b 	sub.w	r6, r8, fp
    206e:	f240 8308 	bls.w	2682 <z_prf+0x8c6>
    2072:	46d0      	mov	r8, sl
				while (zero.predot-- > 0) {
    2074:	f118 38ff 	adds.w	r8, r8, #4294967295	; 0xffffffff
    2078:	f080 830c 	bcs.w	2694 <z_prf+0x8d8>
				clen -= zero.predot;
    207c:	eba6 060a 	sub.w	r6, r6, sl
			if (zero.postdot) {
    2080:	b1af      	cbz	r7, 20ae <z_prf+0x2f2>
    2082:	eb0b 0806 	add.w	r8, fp, r6
					c = *cptr++;
    2086:	f81b ab01 	ldrb.w	sl, [fp], #1
					PUTC(c);
    208a:	9904      	ldr	r1, [sp, #16]
    208c:	9b01      	ldr	r3, [sp, #4]
    208e:	4650      	mov	r0, sl
    2090:	4798      	blx	r3
    2092:	3001      	adds	r0, #1
    2094:	f43f aea8 	beq.w	1de8 <z_prf+0x2c>
				} while (c != '.');
    2098:	f1ba 0f2e 	cmp.w	sl, #46	; 0x2e
    209c:	eba8 060b 	sub.w	r6, r8, fp
    20a0:	d1f1      	bne.n	2086 <z_prf+0x2ca>
				while (zero.postdot-- > 0) {
    20a2:	46b8      	mov	r8, r7
    20a4:	f1b8 0f00 	cmp.w	r8, #0
    20a8:	f300 82fd 	bgt.w	26a6 <z_prf+0x8ea>
				clen -= zero.postdot;
    20ac:	1bf6      	subs	r6, r6, r7
			if (zero.trail) {
    20ae:	b195      	cbz	r5, 20d6 <z_prf+0x31a>
				c = *cptr;
    20b0:	f89b 0000 	ldrb.w	r0, [fp]
				while (isdigit(c) || c == '.') {
    20b4:	eb0b 0806 	add.w	r8, fp, r6
    20b8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    20bc:	2b09      	cmp	r3, #9
    20be:	eba8 060b 	sub.w	r6, r8, fp
    20c2:	f240 82fb 	bls.w	26bc <z_prf+0x900>
    20c6:	282e      	cmp	r0, #46	; 0x2e
    20c8:	f000 82f8 	beq.w	26bc <z_prf+0x900>
				while (zero.trail-- > 0) {
    20cc:	462f      	mov	r7, r5
    20ce:	2f00      	cmp	r7, #0
    20d0:	f300 82fd 	bgt.w	26ce <z_prf+0x912>
				clen -= zero.trail;
    20d4:	1b76      	subs	r6, r6, r5
    20d6:	445e      	add	r6, fp
    20d8:	e30c      	b.n	26f4 <z_prf+0x938>
	} else if (fplus) {
    20da:	9b09      	ldr	r3, [sp, #36]	; 0x24
    20dc:	b123      	cbz	r3, 20e8 <z_prf+0x32c>
		*buf++ = '+';
    20de:	232b      	movs	r3, #43	; 0x2b
		*buf++ = ' ';
    20e0:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
    20e4:	4621      	mov	r1, r4
    20e6:	e760      	b.n	1faa <z_prf+0x1ee>
	} else if (fspace) {
    20e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    20ea:	b10b      	cbz	r3, 20f0 <z_prf+0x334>
		*buf++ = ' ';
    20ec:	2320      	movs	r3, #32
    20ee:	e7f7      	b.n	20e0 <z_prf+0x324>
	} else if (fspace) {
    20f0:	4621      	mov	r1, r4
    20f2:	ae17      	add	r6, sp, #92	; 0x5c
    20f4:	e75b      	b.n	1fae <z_prf+0x1f2>
    20f6:	bf00      	nop
    20f8:	00005fc4 	.word	0x00005fc4
    20fc:	00005fca 	.word	0x00005fca
				u.d = va_arg(vargs, double);
    2100:	f106 0907 	add.w	r9, r6, #7
    2104:	f029 0907 	bic.w	r9, r9, #7
    2108:	e8f9 2302 	ldrd	r2, r3, [r9], #8
	fract = (double_temp << 11) & ~HIGHBIT64;
    210c:	02d8      	lsls	r0, r3, #11
    210e:	ea40 5052 	orr.w	r0, r0, r2, lsr #21
    2112:	02d6      	lsls	r6, r2, #11
    2114:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
    2118:	9602      	str	r6, [sp, #8]
    211a:	9003      	str	r0, [sp, #12]
    211c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
	if (sign) {
    2120:	2a00      	cmp	r2, #0
	exp = double_temp >> 52 & 0x7ff;
    2122:	f3c3 510a 	ubfx	r1, r3, #20, #11
	if (sign) {
    2126:	f173 0300 	sbcs.w	r3, r3, #0
	fract = (double_temp << 11) & ~HIGHBIT64;
    212a:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
	if (sign) {
    212e:	da43      	bge.n	21b8 <z_prf+0x3fc>
		*buf++ = '-';
    2130:	232d      	movs	r3, #45	; 0x2d
		*buf++ = ' ';
    2132:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
    2136:	f10d 075d 	add.w	r7, sp, #93	; 0x5d
	if (exp == 0x7ff) {
    213a:	f240 73ff 	movw	r3, #2047	; 0x7ff
    213e:	4299      	cmp	r1, r3
    2140:	d155      	bne.n	21ee <z_prf+0x432>
		if (!fract) {
    2142:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    2146:	4313      	orrs	r3, r2
    2148:	f1a4 0441 	sub.w	r4, r4, #65	; 0x41
    214c:	f107 0b03 	add.w	fp, r7, #3
    2150:	d142      	bne.n	21d8 <z_prf+0x41c>
			if (isupper(c)) {
    2152:	2c19      	cmp	r4, #25
    2154:	d83a      	bhi.n	21cc <z_prf+0x410>
				*buf++ = 'I';
    2156:	2349      	movs	r3, #73	; 0x49
    2158:	703b      	strb	r3, [r7, #0]
				*buf++ = 'N';
    215a:	234e      	movs	r3, #78	; 0x4e
    215c:	707b      	strb	r3, [r7, #1]
				*buf++ = 'F';
    215e:	2346      	movs	r3, #70	; 0x46
		*buf = 0;
    2160:	2500      	movs	r5, #0
		return buf - start;
    2162:	ae17      	add	r6, sp, #92	; 0x5c
				*buf++ = 'n';
    2164:	70bb      	strb	r3, [r7, #2]
		*buf = 0;
    2166:	70fd      	strb	r5, [r7, #3]
		return buf - start;
    2168:	ebab 0b06 	sub.w	fp, fp, r6
			zero.predot = zero.postdot = zero.trail = 0;
    216c:	462f      	mov	r7, r5
    216e:	46aa      	mov	sl, r5
				if (fplus || fspace || (buf[0] == '-')) {
    2170:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2172:	2b00      	cmp	r3, #0
    2174:	f040 81d9 	bne.w	252a <z_prf+0x76e>
    2178:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    217a:	2b00      	cmp	r3, #0
    217c:	f040 81d5 	bne.w	252a <z_prf+0x76e>
    2180:	f89d 805c 	ldrb.w	r8, [sp, #92]	; 0x5c
    2184:	f1a8 032d 	sub.w	r3, r8, #45	; 0x2d
    2188:	f1d3 0800 	rsbs	r8, r3, #0
    218c:	eb48 0803 	adc.w	r8, r8, r3
				if (!isdigit(buf[prefix])) {
    2190:	ab1e      	add	r3, sp, #120	; 0x78
    2192:	4443      	add	r3, r8
				clen += zero.predot + zero.postdot + zero.trail;
    2194:	44bb      	add	fp, r7
    2196:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
    219a:	3b30      	subs	r3, #48	; 0x30
    219c:	eb0b 060a 	add.w	r6, fp, sl
				if (!isdigit(buf[prefix])) {
    21a0:	2b09      	cmp	r3, #9
				clen += zero.predot + zero.postdot + zero.trail;
    21a2:	442e      	add	r6, r5
				if (!isdigit(buf[prefix])) {
    21a4:	f200 8237 	bhi.w	2616 <z_prf+0x85a>
			} else if (fzero) {
    21a8:	9b08      	ldr	r3, [sp, #32]
    21aa:	2b00      	cmp	r3, #0
    21ac:	f000 8236 	beq.w	261c <z_prf+0x860>
    21b0:	9b07      	ldr	r3, [sp, #28]
    21b2:	1b9a      	subs	r2, r3, r6
    21b4:	ab17      	add	r3, sp, #92	; 0x5c
    21b6:	e737      	b.n	2028 <z_prf+0x26c>
	} else if (fplus) {
    21b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    21ba:	b10b      	cbz	r3, 21c0 <z_prf+0x404>
		*buf++ = '+';
    21bc:	232b      	movs	r3, #43	; 0x2b
    21be:	e7b8      	b.n	2132 <z_prf+0x376>
	} else if (fspace) {
    21c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    21c2:	b10b      	cbz	r3, 21c8 <z_prf+0x40c>
		*buf++ = ' ';
    21c4:	2320      	movs	r3, #32
    21c6:	e7b4      	b.n	2132 <z_prf+0x376>
	} else if (fspace) {
    21c8:	af17      	add	r7, sp, #92	; 0x5c
    21ca:	e7b6      	b.n	213a <z_prf+0x37e>
				*buf++ = 'i';
    21cc:	2369      	movs	r3, #105	; 0x69
    21ce:	703b      	strb	r3, [r7, #0]
				*buf++ = 'n';
    21d0:	236e      	movs	r3, #110	; 0x6e
    21d2:	707b      	strb	r3, [r7, #1]
				*buf++ = 'f';
    21d4:	2366      	movs	r3, #102	; 0x66
    21d6:	e7c3      	b.n	2160 <z_prf+0x3a4>
			if (isupper(c)) {
    21d8:	2c19      	cmp	r4, #25
				*buf++ = 'N';
    21da:	bf99      	ittee	ls
    21dc:	234e      	movls	r3, #78	; 0x4e
				*buf++ = 'A';
    21de:	2241      	movls	r2, #65	; 0x41
				*buf++ = 'n';
    21e0:	236e      	movhi	r3, #110	; 0x6e
				*buf++ = 'a';
    21e2:	2261      	movhi	r2, #97	; 0x61
				*buf++ = 'N';
    21e4:	bf94      	ite	ls
    21e6:	703b      	strbls	r3, [r7, #0]
				*buf++ = 'n';
    21e8:	703b      	strbhi	r3, [r7, #0]
				*buf++ = 'a';
    21ea:	707a      	strb	r2, [r7, #1]
    21ec:	e7b8      	b.n	2160 <z_prf+0x3a4>
	if ((exp | fract) != 0) {
    21ee:	9b02      	ldr	r3, [sp, #8]
    21f0:	9803      	ldr	r0, [sp, #12]
    21f2:	430b      	orrs	r3, r1
    21f4:	930c      	str	r3, [sp, #48]	; 0x30
    21f6:	17cb      	asrs	r3, r1, #31
    21f8:	4303      	orrs	r3, r0
    21fa:	930d      	str	r3, [sp, #52]	; 0x34
    21fc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
		c = 'f';
    2200:	2c46      	cmp	r4, #70	; 0x46
    2202:	bf08      	it	eq
    2204:	2466      	moveq	r4, #102	; 0x66
	if ((exp | fract) != 0) {
    2206:	4313      	orrs	r3, r2
    2208:	f000 80ff 	beq.w	240a <z_prf+0x64e>
		if (exp == 0) {
    220c:	2900      	cmp	r1, #0
    220e:	f000 809f 	beq.w	2350 <z_prf+0x594>
		fract |= HIGHBIT64;
    2212:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    2214:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
    2218:	f2a1 38fe 	subw	r8, r1, #1022	; 0x3fe
		fract |= HIGHBIT64;
    221c:	9313      	str	r3, [sp, #76]	; 0x4c
    221e:	2600      	movs	r6, #0
	while (exp <= -3) {
    2220:	f118 0f02 	cmn.w	r8, #2
    2224:	f2c0 80a8 	blt.w	2378 <z_prf+0x5bc>
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    2228:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
    222c:	f04f 0b00 	mov.w	fp, #0
	while (exp > 0) {
    2230:	f1b8 0f00 	cmp.w	r8, #0
    2234:	f300 80cc 	bgt.w	23d0 <z_prf+0x614>
		_rlrshift(&fract);
    2238:	a812      	add	r0, sp, #72	; 0x48
		exp++;
    223a:	f108 0801 	add.w	r8, r8, #1
		_rlrshift(&fract);
    223e:	f002 fe72 	bl	4f26 <_rlrshift>
	while (exp < (0 + 4)) {
    2242:	f1b8 0f04 	cmp.w	r8, #4
    2246:	d1f7      	bne.n	2238 <z_prf+0x47c>
		precision = 6;		/* Default precision if none given */
    2248:	2d00      	cmp	r5, #0
	if ((c == 'g') || (c == 'G')) {
    224a:	f004 03df 	and.w	r3, r4, #223	; 0xdf
		precision = 6;		/* Default precision if none given */
    224e:	bfb8      	it	lt
    2250:	2506      	movlt	r5, #6
	if ((c == 'g') || (c == 'G')) {
    2252:	2b47      	cmp	r3, #71	; 0x47
    2254:	f040 80e1 	bne.w	241a <z_prf+0x65e>
		if (decexp < (-4 + 1) || decexp > precision) {
    2258:	1cf2      	adds	r2, r6, #3
    225a:	db02      	blt.n	2262 <z_prf+0x4a6>
    225c:	42ae      	cmp	r6, r5
    225e:	f340 80d7 	ble.w	2410 <z_prf+0x654>
			c += 'e' - 'g';
    2262:	3c02      	subs	r4, #2
    2264:	b2e4      	uxtb	r4, r4
			if (precision > 0) {
    2266:	2d00      	cmp	r5, #0
    2268:	f000 80dd 	beq.w	2426 <z_prf+0x66a>
		if (!falt && (precision > 0)) {
    226c:	9b06      	ldr	r3, [sp, #24]
				precision--;
    226e:	3d01      	subs	r5, #1
		if (!falt && (precision > 0)) {
    2270:	2b00      	cmp	r3, #0
    2272:	f040 80d8 	bne.w	2426 <z_prf+0x66a>
    2276:	2d00      	cmp	r5, #0
    2278:	bfd4      	ite	le
    227a:	f04f 0800 	movle.w	r8, #0
    227e:	f04f 0801 	movgt.w	r8, #1
	if (c == 'f') {
    2282:	2c66      	cmp	r4, #102	; 0x66
    2284:	f040 80d1 	bne.w	242a <z_prf+0x66e>
		if (exp < 0) {
    2288:	eb16 0a05 	adds.w	sl, r6, r5
    228c:	f140 80d5 	bpl.w	243a <z_prf+0x67e>
	digit_count = 16;
    2290:	2310      	movs	r3, #16
    2292:	9311      	str	r3, [sp, #68]	; 0x44
    2294:	2466      	movs	r4, #102	; 0x66
			exp = 0;
    2296:	f04f 0a00 	mov.w	sl, #0
	ltemp = 0x0800000000000000;
    229a:	2200      	movs	r2, #0
    229c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    22a0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
	while (exp--) {
    22a4:	f11a 3aff 	adds.w	sl, sl, #4294967295	; 0xffffffff
    22a8:	f080 80c9 	bcs.w	243e <z_prf+0x682>
	fract += ltemp;
    22ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
    22ae:	9a14      	ldr	r2, [sp, #80]	; 0x50
    22b0:	9915      	ldr	r1, [sp, #84]	; 0x54
    22b2:	189b      	adds	r3, r3, r2
    22b4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    22b6:	eb41 0202 	adc.w	r2, r1, r2
    22ba:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
	if ((fract >> 32) & 0xF0000000) {
    22be:	f002 4370 	and.w	r3, r2, #4026531840	; 0xf0000000
    22c2:	930e      	str	r3, [sp, #56]	; 0x38
    22c4:	2300      	movs	r3, #0
    22c6:	930f      	str	r3, [sp, #60]	; 0x3c
    22c8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    22cc:	4313      	orrs	r3, r2
    22ce:	d006      	beq.n	22de <z_prf+0x522>
		_ldiv5(&fract);
    22d0:	a812      	add	r0, sp, #72	; 0x48
    22d2:	f002 fe3a 	bl	4f4a <_ldiv5>
		_rlrshift(&fract);
    22d6:	a812      	add	r0, sp, #72	; 0x48
    22d8:	f002 fe25 	bl	4f26 <_rlrshift>
		decexp++;
    22dc:	3601      	adds	r6, #1
	if (c == 'f') {
    22de:	2c66      	cmp	r4, #102	; 0x66
    22e0:	f040 80c7 	bne.w	2472 <z_prf+0x6b6>
		if (decexp > 0) {
    22e4:	2e00      	cmp	r6, #0
    22e6:	f340 80b1 	ble.w	244c <z_prf+0x690>
			while (decexp > 0 && digit_count > 0) {
    22ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
    22ec:	2b00      	cmp	r3, #0
    22ee:	dd07      	ble.n	2300 <z_prf+0x544>
				*buf++ = _get_digit(&fract, &digit_count);
    22f0:	a911      	add	r1, sp, #68	; 0x44
    22f2:	a812      	add	r0, sp, #72	; 0x48
    22f4:	f002 fe55 	bl	4fa2 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    22f8:	3e01      	subs	r6, #1
				*buf++ = _get_digit(&fract, &digit_count);
    22fa:	f807 0b01 	strb.w	r0, [r7], #1
			while (decexp > 0 && digit_count > 0) {
    22fe:	d1f4      	bne.n	22ea <z_prf+0x52e>
			zp->predot = decexp;
    2300:	46b2      	mov	sl, r6
    2302:	46bb      	mov	fp, r7
			decexp = 0;
    2304:	2600      	movs	r6, #0
		if (falt || (precision > 0)) {
    2306:	9b06      	ldr	r3, [sp, #24]
    2308:	b913      	cbnz	r3, 2310 <z_prf+0x554>
    230a:	2d00      	cmp	r5, #0
    230c:	f340 80af 	ble.w	246e <z_prf+0x6b2>
			*buf++ = '.';
    2310:	232e      	movs	r3, #46	; 0x2e
    2312:	f80b 3b01 	strb.w	r3, [fp], #1
		if (decexp < 0 && precision > 0) {
    2316:	2e00      	cmp	r6, #0
    2318:	f000 80a7 	beq.w	246a <z_prf+0x6ae>
    231c:	2d00      	cmp	r5, #0
    231e:	f340 80a6 	ble.w	246e <z_prf+0x6b2>
			zp->postdot = -decexp;
    2322:	4277      	negs	r7, r6
    2324:	42af      	cmp	r7, r5
    2326:	bfa8      	it	ge
    2328:	462f      	movge	r7, r5
			precision -= zp->postdot;
    232a:	1bed      	subs	r5, r5, r7
		while (precision > 0 && digit_count > 0) {
    232c:	2d00      	cmp	r5, #0
    232e:	dd03      	ble.n	2338 <z_prf+0x57c>
    2330:	9b11      	ldr	r3, [sp, #68]	; 0x44
    2332:	2b00      	cmp	r3, #0
    2334:	f300 8091 	bgt.w	245a <z_prf+0x69e>
	if (prune_zero) {
    2338:	f1b8 0f00 	cmp.w	r8, #0
    233c:	f040 80af 	bne.w	249e <z_prf+0x6e2>
	*buf = 0;
    2340:	2300      	movs	r3, #0
	return buf - start;
    2342:	ae17      	add	r6, sp, #92	; 0x5c
	*buf = 0;
    2344:	f88b 3000 	strb.w	r3, [fp]
	return buf - start;
    2348:	ebab 0b06 	sub.w	fp, fp, r6
    234c:	e710      	b.n	2170 <z_prf+0x3b4>
				exp--;
    234e:	3901      	subs	r1, #1
			while (((fract <<= 1) & HIGHBIT64) == 0) {
    2350:	9b02      	ldr	r3, [sp, #8]
    2352:	18db      	adds	r3, r3, r3
    2354:	9302      	str	r3, [sp, #8]
    2356:	9b03      	ldr	r3, [sp, #12]
    2358:	415b      	adcs	r3, r3
    235a:	9303      	str	r3, [sp, #12]
    235c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    2360:	2a00      	cmp	r2, #0
    2362:	f173 0300 	sbcs.w	r3, r3, #0
    2366:	daf2      	bge.n	234e <z_prf+0x592>
    2368:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    236c:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
    2370:	e74f      	b.n	2212 <z_prf+0x456>
			_rlrshift(&fract);
    2372:	a812      	add	r0, sp, #72	; 0x48
    2374:	f002 fdd7 	bl	4f26 <_rlrshift>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
    2378:	e9dd 2c12 	ldrd	r2, ip, [sp, #72]	; 0x48
    237c:	f04f 0b00 	mov.w	fp, #0
    2380:	48b9      	ldr	r0, [pc, #740]	; (2668 <z_prf+0x8ac>)
    2382:	2100      	movs	r1, #0
    2384:	4559      	cmp	r1, fp
    2386:	bf08      	it	eq
    2388:	4560      	cmpeq	r0, ip
    238a:	f108 0801 	add.w	r8, r8, #1
    238e:	d3f0      	bcc.n	2372 <z_prf+0x5b6>
		fract *= 5U;
    2390:	2005      	movs	r0, #5
    2392:	fba2 2300 	umull	r2, r3, r2, r0
    2396:	fb00 330c 	mla	r3, r0, ip, r3
    239a:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
		decexp--;
    239e:	46dc      	mov	ip, fp
    23a0:	3e01      	subs	r6, #1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    23a2:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
    23a6:	f04f 0b00 	mov.w	fp, #0
    23aa:	2100      	movs	r1, #0
    23ac:	458b      	cmp	fp, r1
    23ae:	bf08      	it	eq
    23b0:	459a      	cmpeq	sl, r3
    23b2:	d206      	bcs.n	23c2 <z_prf+0x606>
    23b4:	f1bc 0f00 	cmp.w	ip, #0
    23b8:	f43f af32 	beq.w	2220 <z_prf+0x464>
    23bc:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
    23c0:	e72e      	b.n	2220 <z_prf+0x464>
			fract <<= 1;
    23c2:	1892      	adds	r2, r2, r2
    23c4:	415b      	adcs	r3, r3
			exp--;
    23c6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    23ca:	f04f 0c01 	mov.w	ip, #1
    23ce:	e7ec      	b.n	23aa <z_prf+0x5ee>
		_ldiv5(&fract);
    23d0:	a812      	add	r0, sp, #72	; 0x48
    23d2:	f002 fdba 	bl	4f4a <_ldiv5>
		exp--;
    23d6:	e9dd 1012 	ldrd	r1, r0, [sp, #72]	; 0x48
    23da:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		decexp++;
    23de:	3601      	adds	r6, #1
    23e0:	f04f 0c00 	mov.w	ip, #0
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    23e4:	2300      	movs	r3, #0
    23e6:	459b      	cmp	fp, r3
    23e8:	bf08      	it	eq
    23ea:	4582      	cmpeq	sl, r0
    23ec:	d206      	bcs.n	23fc <z_prf+0x640>
    23ee:	f1bc 0f00 	cmp.w	ip, #0
    23f2:	f43f af1d 	beq.w	2230 <z_prf+0x474>
    23f6:	e9cd 1012 	strd	r1, r0, [sp, #72]	; 0x48
    23fa:	e719      	b.n	2230 <z_prf+0x474>
			fract <<= 1;
    23fc:	1849      	adds	r1, r1, r1
    23fe:	4140      	adcs	r0, r0
			exp--;
    2400:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    2404:	f04f 0c01 	mov.w	ip, #1
    2408:	e7ec      	b.n	23e4 <z_prf+0x628>
	if ((exp | fract) != 0) {
    240a:	2600      	movs	r6, #0
    240c:	46b0      	mov	r8, r6
    240e:	e713      	b.n	2238 <z_prf+0x47c>
		if (!falt && (precision > 0)) {
    2410:	9b06      	ldr	r3, [sp, #24]
			precision -= decexp;
    2412:	1bad      	subs	r5, r5, r6
		if (!falt && (precision > 0)) {
    2414:	b923      	cbnz	r3, 2420 <z_prf+0x664>
			c = 'f';
    2416:	2466      	movs	r4, #102	; 0x66
    2418:	e72d      	b.n	2276 <z_prf+0x4ba>
	prune_zero = false;		/* Assume trailing 0's allowed     */
    241a:	f04f 0800 	mov.w	r8, #0
    241e:	e730      	b.n	2282 <z_prf+0x4c6>
    2420:	f04f 0800 	mov.w	r8, #0
    2424:	e730      	b.n	2288 <z_prf+0x4cc>
    2426:	f04f 0800 	mov.w	r8, #0
		exp = precision + 1;
    242a:	f105 0a01 	add.w	sl, r5, #1
	digit_count = 16;
    242e:	2310      	movs	r3, #16
    2430:	459a      	cmp	sl, r3
    2432:	9311      	str	r3, [sp, #68]	; 0x44
	if (exp > 16) {
    2434:	bfa8      	it	ge
    2436:	469a      	movge	sl, r3
    2438:	e72f      	b.n	229a <z_prf+0x4de>
		if (exp < 0) {
    243a:	2466      	movs	r4, #102	; 0x66
    243c:	e7f7      	b.n	242e <z_prf+0x672>
		_ldiv5(&ltemp);
    243e:	a814      	add	r0, sp, #80	; 0x50
    2440:	f002 fd83 	bl	4f4a <_ldiv5>
		_rlrshift(&ltemp);
    2444:	a814      	add	r0, sp, #80	; 0x50
    2446:	f002 fd6e 	bl	4f26 <_rlrshift>
    244a:	e72b      	b.n	22a4 <z_prf+0x4e8>
			*buf++ = '0';
    244c:	46bb      	mov	fp, r7
    244e:	2330      	movs	r3, #48	; 0x30
    2450:	f80b 3b01 	strb.w	r3, [fp], #1
			zero.predot = zero.postdot = zero.trail = 0;
    2454:	f04f 0a00 	mov.w	sl, #0
    2458:	e755      	b.n	2306 <z_prf+0x54a>
			*buf++ = _get_digit(&fract, &digit_count);
    245a:	a911      	add	r1, sp, #68	; 0x44
    245c:	a812      	add	r0, sp, #72	; 0x48
    245e:	f002 fda0 	bl	4fa2 <_get_digit>
			precision--;
    2462:	3d01      	subs	r5, #1
			*buf++ = _get_digit(&fract, &digit_count);
    2464:	f80b 0b01 	strb.w	r0, [fp], #1
			precision--;
    2468:	e760      	b.n	232c <z_prf+0x570>
			zero.predot = zero.postdot = zero.trail = 0;
    246a:	4637      	mov	r7, r6
    246c:	e75e      	b.n	232c <z_prf+0x570>
    246e:	2700      	movs	r7, #0
    2470:	e762      	b.n	2338 <z_prf+0x57c>
		*buf = _get_digit(&fract, &digit_count);
    2472:	a911      	add	r1, sp, #68	; 0x44
    2474:	a812      	add	r0, sp, #72	; 0x48
    2476:	f002 fd94 	bl	4fa2 <_get_digit>
		if (falt || (precision > 0)) {
    247a:	9b06      	ldr	r3, [sp, #24]
		*buf = _get_digit(&fract, &digit_count);
    247c:	7038      	strb	r0, [r7, #0]
		if (*buf++ != '0') {
    247e:	2830      	cmp	r0, #48	; 0x30
			decexp--;
    2480:	bf18      	it	ne
    2482:	f106 36ff 	addne.w	r6, r6, #4294967295	; 0xffffffff
		if (falt || (precision > 0)) {
    2486:	2b00      	cmp	r3, #0
    2488:	d13b      	bne.n	2502 <z_prf+0x746>
    248a:	2d00      	cmp	r5, #0
    248c:	dc39      	bgt.n	2502 <z_prf+0x746>
		if (*buf++ != '0') {
    248e:	f107 0b01 	add.w	fp, r7, #1
	if (prune_zero) {
    2492:	f1b8 0f00 	cmp.w	r8, #0
    2496:	d045      	beq.n	2524 <z_prf+0x768>
			zero.predot = zero.postdot = zero.trail = 0;
    2498:	f04f 0a00 	mov.w	sl, #0
    249c:	4657      	mov	r7, sl
		while (*--buf == '0')
    249e:	465b      	mov	r3, fp
    24a0:	f81b 2d01 	ldrb.w	r2, [fp, #-1]!
    24a4:	2a30      	cmp	r2, #48	; 0x30
    24a6:	d0fa      	beq.n	249e <z_prf+0x6e2>
		if (*buf != '.') {
    24a8:	2a2e      	cmp	r2, #46	; 0x2e
    24aa:	bf18      	it	ne
    24ac:	469b      	movne	fp, r3
    24ae:	2500      	movs	r5, #0
	if ((c == 'e') || (c == 'E')) {
    24b0:	f004 03df 	and.w	r3, r4, #223	; 0xdf
    24b4:	2b45      	cmp	r3, #69	; 0x45
    24b6:	f47f af43 	bne.w	2340 <z_prf+0x584>
		if (decexp < 0) {
    24ba:	2e00      	cmp	r6, #0
		*buf++ = c;
    24bc:	465a      	mov	r2, fp
			decexp = -decexp;
    24be:	bfba      	itte	lt
    24c0:	4276      	neglt	r6, r6
			*buf++ = '-';
    24c2:	232d      	movlt	r3, #45	; 0x2d
			*buf++ = '+';
    24c4:	232b      	movge	r3, #43	; 0x2b
		if (decexp >= 100) {
    24c6:	2e63      	cmp	r6, #99	; 0x63
		*buf++ = c;
    24c8:	f802 4b02 	strb.w	r4, [r2], #2
			*buf++ = '-';
    24cc:	f88b 3001 	strb.w	r3, [fp, #1]
		if (decexp >= 100) {
    24d0:	dd0a      	ble.n	24e8 <z_prf+0x72c>
			*buf++ = (decexp / 100) + '0';
    24d2:	2164      	movs	r1, #100	; 0x64
    24d4:	fb96 f3f1 	sdiv	r3, r6, r1
    24d8:	f103 0030 	add.w	r0, r3, #48	; 0x30
    24dc:	f10b 0203 	add.w	r2, fp, #3
    24e0:	f88b 0002 	strb.w	r0, [fp, #2]
			decexp %= 100;
    24e4:	fb01 6613 	mls	r6, r1, r3, r6
		*buf++ = (decexp / 10) + '0';
    24e8:	210a      	movs	r1, #10
    24ea:	4693      	mov	fp, r2
    24ec:	fb96 f3f1 	sdiv	r3, r6, r1
		decexp %= 10;
    24f0:	fb01 6613 	mls	r6, r1, r3, r6
		*buf++ = (decexp / 10) + '0';
    24f4:	f103 0030 	add.w	r0, r3, #48	; 0x30
		*buf++ = decexp + '0';
    24f8:	3630      	adds	r6, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    24fa:	f80b 0b02 	strb.w	r0, [fp], #2
		*buf++ = decexp + '0';
    24fe:	7056      	strb	r6, [r2, #1]
    2500:	e71e      	b.n	2340 <z_prf+0x584>
			*buf++ = '.';
    2502:	232e      	movs	r3, #46	; 0x2e
    2504:	f107 0b02 	add.w	fp, r7, #2
    2508:	707b      	strb	r3, [r7, #1]
		while (precision > 0 && digit_count > 0) {
    250a:	2d00      	cmp	r5, #0
    250c:	ddc1      	ble.n	2492 <z_prf+0x6d6>
    250e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    2510:	2b00      	cmp	r3, #0
    2512:	ddbe      	ble.n	2492 <z_prf+0x6d6>
			*buf++ = _get_digit(&fract, &digit_count);
    2514:	a911      	add	r1, sp, #68	; 0x44
    2516:	a812      	add	r0, sp, #72	; 0x48
    2518:	f002 fd43 	bl	4fa2 <_get_digit>
			precision--;
    251c:	3d01      	subs	r5, #1
			*buf++ = _get_digit(&fract, &digit_count);
    251e:	f80b 0b01 	strb.w	r0, [fp], #1
			precision--;
    2522:	e7f2      	b.n	250a <z_prf+0x74e>
			zero.predot = zero.postdot = zero.trail = 0;
    2524:	46c2      	mov	sl, r8
    2526:	4647      	mov	r7, r8
    2528:	e7c2      	b.n	24b0 <z_prf+0x6f4>
					prefix = 1;
    252a:	f04f 0801 	mov.w	r8, #1
    252e:	e62f      	b.n	2190 <z_prf+0x3d4>
				switch (i) {
    2530:	46b1      	mov	r9, r6
    2532:	2f68      	cmp	r7, #104	; 0x68
    2534:	f859 3b04 	ldr.w	r3, [r9], #4
    2538:	d005      	beq.n	2546 <z_prf+0x78a>
    253a:	dc01      	bgt.n	2540 <z_prf+0x784>
    253c:	2f48      	cmp	r7, #72	; 0x48
    253e:	d007      	beq.n	2550 <z_prf+0x794>
					*va_arg(vargs, int *) = count;
    2540:	9a00      	ldr	r2, [sp, #0]
    2542:	601a      	str	r2, [r3, #0]
					break;
    2544:	e001      	b.n	254a <z_prf+0x78e>
					*va_arg(vargs, short *) = count;
    2546:	9a00      	ldr	r2, [sp, #0]
    2548:	801a      	strh	r2, [r3, #0]
				continue;
    254a:	464e      	mov	r6, r9
    254c:	9a05      	ldr	r2, [sp, #20]
    254e:	e43d      	b.n	1dcc <z_prf+0x10>
					*va_arg(vargs, char *) = count;
    2550:	9a00      	ldr	r2, [sp, #0]
    2552:	701a      	strb	r2, [r3, #0]
					break;
    2554:	e7f9      	b.n	254a <z_prf+0x78e>
				val = (uintptr_t) va_arg(vargs, void *);
    2556:	46b1      	mov	r9, r6
		*buf++ = '0';
    2558:	f647 0330 	movw	r3, #30768	; 0x7830
	len = _to_x(buf, value, 16);
    255c:	2210      	movs	r2, #16
    255e:	f859 1b04 	ldr.w	r1, [r9], #4
		*buf++ = '0';
    2562:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
	len = _to_x(buf, value, 16);
    2566:	f10d 005e 	add.w	r0, sp, #94	; 0x5e
    256a:	f002 fcba 	bl	4ee2 <_to_x>
				prefix = 2;
    256e:	f04f 0802 	mov.w	r8, #2
	return len + (buf - buf0);
    2572:	1c86      	adds	r6, r0, #2
				break;
    2574:	e52c      	b.n	1fd0 <z_prf+0x214>
					if (cptr[clen] == '\0') {
    2576:	5d9a      	ldrb	r2, [r3, r6]
    2578:	2a00      	cmp	r2, #0
    257a:	d04a      	beq.n	2612 <z_prf+0x856>
				for (clen = 0; clen < precision; clen++) {
    257c:	3601      	adds	r6, #1
    257e:	e53c      	b.n	1ffa <z_prf+0x23e>
	if (alt_form) {
    2580:	ac17      	add	r4, sp, #92	; 0x5c
	return (buf - buf0) + _to_x(buf, value, 8);
    2582:	2208      	movs	r2, #8
    2584:	4620      	mov	r0, r4
    2586:	f002 fcac 	bl	4ee2 <_to_x>
    258a:	ae17      	add	r6, sp, #92	; 0x5c
    258c:	1ba6      	subs	r6, r4, r6
    258e:	4406      	add	r6, r0
			prefix = 0;
    2590:	f04f 0800 	mov.w	r8, #0
    2594:	e51c      	b.n	1fd0 <z_prf+0x214>
		*buf++ = '0';
    2596:	f10d 045d 	add.w	r4, sp, #93	; 0x5d
    259a:	e7f2      	b.n	2582 <z_prf+0x7c6>
				} else if (c == 'u') {
    259c:	2c75      	cmp	r4, #117	; 0x75
    259e:	d105      	bne.n	25ac <z_prf+0x7f0>
	return _to_x(buf, value, 10);
    25a0:	220a      	movs	r2, #10
    25a2:	a817      	add	r0, sp, #92	; 0x5c
    25a4:	f002 fc9d 	bl	4ee2 <_to_x>
    25a8:	4606      	mov	r6, r0
    25aa:	e7f1      	b.n	2590 <z_prf+0x7d4>
	if (alt_form) {
    25ac:	9b06      	ldr	r3, [sp, #24]
    25ae:	b193      	cbz	r3, 25d6 <z_prf+0x81a>
		*buf++ = '0';
    25b0:	f647 0330 	movw	r3, #30768	; 0x7830
    25b4:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
		*buf++ = 'x';
    25b8:	f10d 075e 	add.w	r7, sp, #94	; 0x5e
	len = _to_x(buf, value, 16);
    25bc:	2210      	movs	r2, #16
    25be:	4638      	mov	r0, r7
    25c0:	f002 fc8f 	bl	4ee2 <_to_x>
	if (prefix == 'X') {
    25c4:	2c58      	cmp	r4, #88	; 0x58
    25c6:	d008      	beq.n	25da <z_prf+0x81e>
	return len + (buf - buf0);
    25c8:	ae17      	add	r6, sp, #92	; 0x5c
						prefix = 2;
    25ca:	9b06      	ldr	r3, [sp, #24]
	return len + (buf - buf0);
    25cc:	1bbe      	subs	r6, r7, r6
    25ce:	4406      	add	r6, r0
						prefix = 2;
    25d0:	ea4f 0843 	mov.w	r8, r3, lsl #1
    25d4:	e4fc      	b.n	1fd0 <z_prf+0x214>
	if (alt_form) {
    25d6:	af17      	add	r7, sp, #92	; 0x5c
    25d8:	e7f0      	b.n	25bc <z_prf+0x800>
    25da:	aa17      	add	r2, sp, #92	; 0x5c
		if (*buf >= 'a' && *buf <= 'z') {
    25dc:	f812 3b01 	ldrb.w	r3, [r2], #1
    25e0:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
    25e4:	2919      	cmp	r1, #25
    25e6:	d803      	bhi.n	25f0 <z_prf+0x834>
			*buf += 'A' - 'a';
    25e8:	3b20      	subs	r3, #32
    25ea:	f802 3c01 	strb.w	r3, [r2, #-1]
    25ee:	e7f5      	b.n	25dc <z_prf+0x820>
	} while (*buf++);
    25f0:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    25f4:	2b00      	cmp	r3, #0
    25f6:	d1f1      	bne.n	25dc <z_prf+0x820>
    25f8:	e7e6      	b.n	25c8 <z_prf+0x80c>
				PUTC('%');
    25fa:	9904      	ldr	r1, [sp, #16]
    25fc:	4620      	mov	r0, r4
    25fe:	f7ff bbee 	b.w	1dde <z_prf+0x22>
				count++;
    2602:	9b00      	ldr	r3, [sp, #0]
    2604:	3301      	adds	r3, #1
				count += 2;
    2606:	9300      	str	r3, [sp, #0]
				continue;
    2608:	46b1      	mov	r9, r6
    260a:	e79e      	b.n	254a <z_prf+0x78e>
					prefix = 1;
    260c:	f04f 0801 	mov.w	r8, #1
    2610:	e4de      	b.n	1fd0 <z_prf+0x214>
    2612:	4615      	mov	r5, r2
    2614:	e4f6      	b.n	2004 <z_prf+0x248>
			cptr = buf;
    2616:	ab17      	add	r3, sp, #92	; 0x5c
				zero_head = 0;
    2618:	2200      	movs	r2, #0
    261a:	e507      	b.n	202c <z_prf+0x270>
    261c:	ab17      	add	r3, sp, #92	; 0x5c
    261e:	9a08      	ldr	r2, [sp, #32]
    2620:	e504      	b.n	202c <z_prf+0x270>
    2622:	e9cd 3207 	strd	r3, r2, [sp, #28]
					PUTC(' ');
    2626:	9904      	ldr	r1, [sp, #16]
    2628:	9b01      	ldr	r3, [sp, #4]
    262a:	2020      	movs	r0, #32
    262c:	4798      	blx	r3
    262e:	3001      	adds	r0, #1
    2630:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
    2634:	f43f abd8 	beq.w	1de8 <z_prf+0x2c>
				while (width-- > 0) {
    2638:	f11b 3bff 	adds.w	fp, fp, #4294967295	; 0xffffffff
    263c:	d2f1      	bcs.n	2622 <z_prf+0x866>
				count += width;
    263e:	9900      	ldr	r1, [sp, #0]
    2640:	4421      	add	r1, r4
    2642:	9100      	str	r1, [sp, #0]
				while (width-- > 0) {
    2644:	465c      	mov	r4, fp
    2646:	e4fb      	b.n	2040 <z_prf+0x284>
    2648:	46a3      	mov	fp, r4
    264a:	e7f5      	b.n	2638 <z_prf+0x87c>
				PUTC(*cptr++);
    264c:	f813 0b01 	ldrb.w	r0, [r3], #1
    2650:	9307      	str	r3, [sp, #28]
    2652:	9904      	ldr	r1, [sp, #16]
    2654:	9b01      	ldr	r3, [sp, #4]
    2656:	9208      	str	r2, [sp, #32]
    2658:	4798      	blx	r3
    265a:	3001      	adds	r0, #1
    265c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
    2660:	f47f acf0 	bne.w	2044 <z_prf+0x288>
    2664:	f7ff bbc0 	b.w	1de8 <z_prf+0x2c>
    2668:	33333332 	.word	0x33333332
				PUTC('0');
    266c:	9904      	ldr	r1, [sp, #16]
    266e:	9b01      	ldr	r3, [sp, #4]
    2670:	9207      	str	r2, [sp, #28]
    2672:	2030      	movs	r0, #48	; 0x30
    2674:	4798      	blx	r3
    2676:	3001      	adds	r0, #1
    2678:	9a07      	ldr	r2, [sp, #28]
    267a:	f47f ace6 	bne.w	204a <z_prf+0x28e>
    267e:	f7ff bbb3 	b.w	1de8 <z_prf+0x2c>
					PUTC(c);
    2682:	9904      	ldr	r1, [sp, #16]
    2684:	9b01      	ldr	r3, [sp, #4]
    2686:	4798      	blx	r3
    2688:	3001      	adds	r0, #1
    268a:	f43f abad 	beq.w	1de8 <z_prf+0x2c>
					c = *++cptr;
    268e:	f81b 0f01 	ldrb.w	r0, [fp, #1]!
    2692:	e4e7      	b.n	2064 <z_prf+0x2a8>
					PUTC('0');
    2694:	9904      	ldr	r1, [sp, #16]
    2696:	9b01      	ldr	r3, [sp, #4]
    2698:	2030      	movs	r0, #48	; 0x30
    269a:	4798      	blx	r3
    269c:	3001      	adds	r0, #1
    269e:	f47f ace9 	bne.w	2074 <z_prf+0x2b8>
    26a2:	f7ff bba1 	b.w	1de8 <z_prf+0x2c>
					PUTC('0');
    26a6:	9904      	ldr	r1, [sp, #16]
    26a8:	9b01      	ldr	r3, [sp, #4]
    26aa:	2030      	movs	r0, #48	; 0x30
    26ac:	4798      	blx	r3
    26ae:	3001      	adds	r0, #1
    26b0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    26b4:	f47f acf6 	bne.w	20a4 <z_prf+0x2e8>
    26b8:	f7ff bb96 	b.w	1de8 <z_prf+0x2c>
					PUTC(c);
    26bc:	9904      	ldr	r1, [sp, #16]
    26be:	9b01      	ldr	r3, [sp, #4]
    26c0:	4798      	blx	r3
    26c2:	3001      	adds	r0, #1
    26c4:	f43f ab90 	beq.w	1de8 <z_prf+0x2c>
					c = *++cptr;
    26c8:	f81b 0f01 	ldrb.w	r0, [fp, #1]!
    26cc:	e4f4      	b.n	20b8 <z_prf+0x2fc>
					PUTC('0');
    26ce:	9904      	ldr	r1, [sp, #16]
    26d0:	9b01      	ldr	r3, [sp, #4]
    26d2:	2030      	movs	r0, #48	; 0x30
    26d4:	4798      	blx	r3
    26d6:	3001      	adds	r0, #1
    26d8:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
    26dc:	f47f acf7 	bne.w	20ce <z_prf+0x312>
    26e0:	f7ff bb82 	b.w	1de8 <z_prf+0x2c>
				PUTC(*cptr++);
    26e4:	9904      	ldr	r1, [sp, #16]
    26e6:	f81b 0b01 	ldrb.w	r0, [fp], #1
    26ea:	9b01      	ldr	r3, [sp, #4]
    26ec:	4798      	blx	r3
    26ee:	3001      	adds	r0, #1
    26f0:	f43f ab7a 	beq.w	1de8 <z_prf+0x2c>
    26f4:	eba6 030b 	sub.w	r3, r6, fp
			while (clen-- > 0) {
    26f8:	2b00      	cmp	r3, #0
    26fa:	dcf3      	bgt.n	26e4 <z_prf+0x928>
			count += clen;
    26fc:	9b00      	ldr	r3, [sp, #0]
    26fe:	9a06      	ldr	r2, [sp, #24]
			if (width > 0) {
    2700:	2c00      	cmp	r4, #0
			count += clen;
    2702:	4413      	add	r3, r2
    2704:	9300      	str	r3, [sp, #0]
			if (width > 0) {
    2706:	f77f af20 	ble.w	254a <z_prf+0x78e>
    270a:	4625      	mov	r5, r4
    270c:	e006      	b.n	271c <z_prf+0x960>
					PUTC(' ');
    270e:	9904      	ldr	r1, [sp, #16]
    2710:	9b01      	ldr	r3, [sp, #4]
    2712:	2020      	movs	r0, #32
    2714:	4798      	blx	r3
    2716:	3001      	adds	r0, #1
    2718:	f43f ab66 	beq.w	1de8 <z_prf+0x2c>
				while (width-- > 0) {
    271c:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
    2720:	d2f5      	bcs.n	270e <z_prf+0x952>
				count += width;
    2722:	9b00      	ldr	r3, [sp, #0]
    2724:	4423      	add	r3, r4
    2726:	9300      	str	r3, [sp, #0]
    2728:	e70f      	b.n	254a <z_prf+0x78e>
    272a:	bf00      	nop

0000272c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    272c:	4b01      	ldr	r3, [pc, #4]	; (2734 <__stdout_hook_install+0x8>)
    272e:	6018      	str	r0, [r3, #0]
}
    2730:	4770      	bx	lr
    2732:	bf00      	nop
    2734:	200024e8 	.word	0x200024e8

00002738 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *_MLIBC_RESTRICT s, size_t len,
	     const char *_MLIBC_RESTRICT format, ...)
{
    2738:	b40c      	push	{r2, r3}
    273a:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
    273c:	b909      	cbnz	r1, 2742 <snprintf+0xa>
		s = &dummy; /* write final NUL to dummy, can't change *s */
    273e:	f10d 0003 	add.w	r0, sp, #3
	}

	p.ptr = s;
	p.len = (int) len;
    2742:	e9cd 0102 	strd	r0, r1, [sp, #8]

	va_start(vargs, format);
    2746:	ab07      	add	r3, sp, #28
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
    2748:	9a06      	ldr	r2, [sp, #24]
    274a:	4806      	ldr	r0, [pc, #24]	; (2764 <snprintf+0x2c>)
	va_start(vargs, format);
    274c:	9301      	str	r3, [sp, #4]
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
    274e:	a902      	add	r1, sp, #8
    2750:	f7ff fb34 	bl	1dbc <z_prf>
	va_end(vargs);

	*(p.ptr) = 0;
    2754:	9b02      	ldr	r3, [sp, #8]
    2756:	2200      	movs	r2, #0
    2758:	701a      	strb	r2, [r3, #0]
	return r;
}
    275a:	b005      	add	sp, #20
    275c:	f85d eb04 	ldr.w	lr, [sp], #4
    2760:	b002      	add	sp, #8
    2762:	4770      	bx	lr
    2764:	00004fd7 	.word	0x00004fd7

00002768 <nordicsemi_nrf52_init>:
    2768:	f04f 0320 	mov.w	r3, #32
    276c:	f3ef 8211 	mrs	r2, BASEPRI
    2770:	f383 8811 	msr	BASEPRI, r3
    2774:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    2778:	4906      	ldr	r1, [pc, #24]	; (2794 <nordicsemi_nrf52_init+0x2c>)
    277a:	2301      	movs	r3, #1
    277c:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    2780:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    2784:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    2788:	f382 8811 	msr	BASEPRI, r2
    278c:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    2790:	2000      	movs	r0, #0
    2792:	4770      	bx	lr
    2794:	4001e000 	.word	0x4001e000

00002798 <gpio_nrfx_init>:
#endif
	}
}

static int gpio_nrfx_init(struct device *port)
{
    2798:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    279a:	4b09      	ldr	r3, [pc, #36]	; (27c0 <gpio_nrfx_init+0x28>)
    279c:	781a      	ldrb	r2, [r3, #0]
    279e:	b96a      	cbnz	r2, 27bc <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    27a0:	2101      	movs	r1, #1
    27a2:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
    27a4:	2006      	movs	r0, #6
    27a6:	2105      	movs	r1, #5
    27a8:	f7fe fe50 	bl	144c <z_arm_irq_priority_set>
			    DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0_PRIORITY,
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0);
    27ac:	2006      	movs	r0, #6
    27ae:	f7fe fe3d 	bl	142c <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    27b2:	4b04      	ldr	r3, [pc, #16]	; (27c4 <gpio_nrfx_init+0x2c>)
    27b4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    27b8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    27bc:	2000      	movs	r0, #0
    27be:	bd08      	pop	{r3, pc}
    27c0:	200003d2 	.word	0x200003d2
    27c4:	40006000 	.word	0x40006000

000027c8 <gpiote_pin_int_cfg>:
{
    27c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return port->config->config_info;
    27ca:	6803      	ldr	r3, [r0, #0]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    27cc:	4d55      	ldr	r5, [pc, #340]	; (2924 <gpiote_pin_int_cfg+0x15c>)
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    27ce:	689b      	ldr	r3, [r3, #8]
	struct gpio_nrfx_data *data = get_port_data(port);
    27d0:	6882      	ldr	r2, [r0, #8]
    27d2:	f8d5 4304 	ldr.w	r4, [r5, #772]	; 0x304
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    27d6:	7918      	ldrb	r0, [r3, #4]
    27d8:	f001 031f 	and.w	r3, r1, #31
    27dc:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
    27e0:	b2e4      	uxtb	r4, r4
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    27e2:	2000      	movs	r0, #0
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    27e4:	f500 76a2 	add.w	r6, r0, #324	; 0x144
    27e8:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
    27ec:	f3c6 2604 	ubfx	r6, r6, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    27f0:	42b3      	cmp	r3, r6
    27f2:	d175      	bne.n	28e0 <gpiote_pin_int_cfg+0x118>
		    && (intenset & BIT(i))) {
    27f4:	fa24 f600 	lsr.w	r6, r4, r0
    27f8:	07f6      	lsls	r6, r6, #31
    27fa:	d571      	bpl.n	28e0 <gpiote_pin_int_cfg+0x118>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    27fc:	0084      	lsls	r4, r0, #2
    27fe:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    2802:	f504 44c0 	add.w	r4, r4, #24576	; 0x6000
    2806:	f8d4 6510 	ldr.w	r6, [r4, #1296]	; 0x510
    280a:	f026 0601 	bic.w	r6, r6, #1
    280e:	f8c4 6510 	str.w	r6, [r4, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    2812:	2401      	movs	r4, #1
    2814:	fa04 f000 	lsl.w	r0, r4, r0
    p_reg->INTENCLR = mask;
    2818:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
NRF_STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t             pin_number,
                                              nrf_gpio_pin_sense_t sense_config)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    /*lint -e{845} // A zero has been given as right argument to operator '|'" */
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    281c:	009c      	lsls	r4, r3, #2
    281e:	f104 44a0 	add.w	r4, r4, #1342177280	; 0x50000000
    2822:	f8d4 0700 	ldr.w	r0, [r4, #1792]	; 0x700
    2826:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000

    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    282a:	f8c4 0700 	str.w	r0, [r4, #1792]	; 0x700
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
    282e:	6890      	ldr	r0, [r2, #8]
    2830:	40c8      	lsrs	r0, r1
    2832:	f010 0001 	ands.w	r0, r0, #1
    2836:	d051      	beq.n	28dc <gpiote_pin_int_cfg+0x114>
    2838:	68d0      	ldr	r0, [r2, #12]
    283a:	40c8      	lsrs	r0, r1
    283c:	f010 0001 	ands.w	r0, r0, #1
    2840:	d04c      	beq.n	28dc <gpiote_pin_int_cfg+0x114>
		if (data->trig_edge & BIT(pin)) {
    2842:	6950      	ldr	r0, [r2, #20]
    2844:	40c8      	lsrs	r0, r1
    2846:	f010 0001 	ands.w	r0, r0, #1
    284a:	d056      	beq.n	28fa <gpiote_pin_int_cfg+0x132>
			if (data->double_edge & BIT(pin)) {
    284c:	6990      	ldr	r0, [r2, #24]
    284e:	40c8      	lsrs	r0, r1
    2850:	07c0      	lsls	r0, r0, #31
    2852:	d44a      	bmi.n	28ea <gpiote_pin_int_cfg+0x122>
			} else if (((data->active_level & BIT(pin)) != 0U)
    2854:	6910      	ldr	r0, [r2, #16]
				   ^ ((BIT(pin) & data->inverted) != 0)) {
    2856:	69d2      	ldr	r2, [r2, #28]
			} else if (((data->active_level & BIT(pin)) != 0U)
    2858:	40c8      	lsrs	r0, r1
				   ^ ((BIT(pin) & data->inverted) != 0)) {
    285a:	fa22 f101 	lsr.w	r1, r2, r1
			} else if (((data->active_level & BIT(pin)) != 0U)
    285e:	f000 0001 	and.w	r0, r0, #1
    2862:	f001 0101 	and.w	r1, r1, #1
				pol = NRF_GPIOTE_POLARITY_HITOLO;
    2866:	4288      	cmp	r0, r1
    2868:	bf14      	ite	ne
    286a:	2101      	movne	r1, #1
    286c:	2102      	moveq	r1, #2
    p_reg->CONFIG[idx] = 0;
}

NRF_STATIC_INLINE bool nrf_gpiote_te_is_enabled(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return (p_reg->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
    286e:	4d2d      	ldr	r5, [pc, #180]	; (2924 <gpiote_pin_int_cfg+0x15c>)
    2870:	2400      	movs	r4, #0
    2872:	f504 72a2 	add.w	r2, r4, #324	; 0x144
    2876:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
		if (!nrf_gpiote_te_is_enabled(NRF_GPIOTE, channel)) {
    287a:	f010 0003 	ands.w	r0, r0, #3
    287e:	d136      	bne.n	28ee <gpiote_pin_int_cfg+0x126>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    2880:	00a2      	lsls	r2, r4, #2
    2882:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2886:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    288a:	021b      	lsls	r3, r3, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    288c:	f8d2 6510 	ldr.w	r6, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2890:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
    2894:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    2898:	f426 3647 	bic.w	r6, r6, #203776	; 0x31c00
			nrf_gpiote_event_t evt =
    289c:	f104 0340 	add.w	r3, r4, #64	; 0x40
    28a0:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    28a4:	009b      	lsls	r3, r3, #2
    28a6:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
    28aa:	b29b      	uxth	r3, r3
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    28ac:	f8d2 6510 	ldr.w	r6, [r2, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
    28b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    28b4:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    28b8:	4331      	orrs	r1, r6
    28ba:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    28be:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
    28c0:	681b      	ldr	r3, [r3, #0]
    28c2:	9301      	str	r3, [sp, #4]
    (void)dummy;
    28c4:	9b01      	ldr	r3, [sp, #4]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    28c6:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    28ca:	f043 0301 	orr.w	r3, r3, #1
    28ce:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    28d2:	2301      	movs	r3, #1
    28d4:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->INTENSET = mask;
    28d8:	f8c5 4304 	str.w	r4, [r5, #772]	; 0x304
}
    28dc:	b002      	add	sp, #8
    28de:	bd70      	pop	{r4, r5, r6, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    28e0:	3001      	adds	r0, #1
    28e2:	2808      	cmp	r0, #8
    28e4:	f47f af7e 	bne.w	27e4 <gpiote_pin_int_cfg+0x1c>
    28e8:	e798      	b.n	281c <gpiote_pin_int_cfg+0x54>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    28ea:	2103      	movs	r1, #3
    28ec:	e7bf      	b.n	286e <gpiote_pin_int_cfg+0xa6>
    28ee:	3401      	adds	r4, #1
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
    28f0:	2c08      	cmp	r4, #8
    28f2:	d1be      	bne.n	2872 <gpiote_pin_int_cfg+0xaa>
	return -ENODEV;
    28f4:	f06f 0012 	mvn.w	r0, #18
    28f8:	e7f0      	b.n	28dc <gpiote_pin_int_cfg+0x114>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    28fa:	6913      	ldr	r3, [r2, #16]
    28fc:	69d2      	ldr	r2, [r2, #28]
    28fe:	4053      	eors	r3, r2
    2900:	fa23 f101 	lsr.w	r1, r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    2904:	f8d4 3700 	ldr.w	r3, [r4, #1792]	; 0x700
		return NRF_GPIO_PIN_SENSE_HIGH;
    2908:	f011 0f01 	tst.w	r1, #1
    290c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    2910:	bf14      	ite	ne
    2912:	f44f 3200 	movne.w	r2, #131072	; 0x20000
    2916:	f44f 3240 	moveq.w	r2, #196608	; 0x30000
    291a:	4313      	orrs	r3, r2
    291c:	f8c4 3700 	str.w	r3, [r4, #1792]	; 0x700
    2920:	e7dc      	b.n	28dc <gpiote_pin_int_cfg+0x114>
    2922:	bf00      	nop
    2924:	40006000 	.word	0x40006000

00002928 <gpiote_event_handler>:
{
    2928:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    292c:	4953      	ldr	r1, [pc, #332]	; (2a7c <gpiote_event_handler+0x154>)
    292e:	680d      	ldr	r5, [r1, #0]
	if (port_event) {
    2930:	2d00      	cmp	r5, #0
    2932:	d067      	beq.n	2a04 <gpiote_event_handler+0xdc>
	struct gpio_nrfx_data *data = get_port_data(port);
    2934:	4b52      	ldr	r3, [pc, #328]	; (2a80 <gpiote_event_handler+0x158>)
    2936:	689a      	ldr	r2, [r3, #8]
	return port->config->config_info;
    2938:	681b      	ldr	r3, [r3, #0]
    293a:	689e      	ldr	r6, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
    293c:	e9d2 0302 	ldrd	r0, r3, [r2, #8]
    2940:	4003      	ands	r3, r0
	out &= ~data->trig_edge & ~data->double_edge;
    2942:	e9d2 0405 	ldrd	r0, r4, [r2, #20]
    2946:	4320      	orrs	r0, r4
    2948:	ea23 0300 	bic.w	r3, r3, r0
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
    294c:	6830      	ldr	r0, [r6, #0]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
    294e:	69d4      	ldr	r4, [r2, #28]
    2950:	6912      	ldr	r2, [r2, #16]
}


NRF_STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
    2952:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    2956:	4054      	eors	r4, r2
    2958:	4044      	eors	r4, r0
	u32_t out = pin_states & level_pins;
    295a:	ea23 0404 	bic.w	r4, r3, r4
	u32_t bit = 1U << pin;
    295e:	2001      	movs	r0, #1
	u32_t pin = 0U;
    2960:	2700      	movs	r7, #0
	while (level_pins) {
    2962:	2b00      	cmp	r3, #0
    2964:	d138      	bne.n	29d8 <gpiote_event_handler+0xb0>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2966:	600b      	str	r3, [r1, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
    2968:	680b      	ldr	r3, [r1, #0]
    296a:	9300      	str	r3, [sp, #0]
    (void)dummy;
    296c:	9b00      	ldr	r3, [sp, #0]
    return p_reg->INTENSET & mask;
    296e:	4845      	ldr	r0, [pc, #276]	; (2a84 <gpiote_event_handler+0x15c>)
	u32_t fired_triggers[GPIO_COUNT] = {0};
    2970:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    2972:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2974:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
    2976:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
    297a:	fa06 f103 	lsl.w	r1, r6, r3
    297e:	4211      	tst	r1, r2
    2980:	d013      	beq.n	29aa <gpiote_event_handler+0x82>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2982:	009a      	lsls	r2, r3, #2
    2984:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2988:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
    298c:	6811      	ldr	r1, [r2, #0]
    298e:	b161      	cbz	r1, 29aa <gpiote_event_handler+0x82>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    2990:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    2994:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2998:	6017      	str	r7, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
    299a:	6812      	ldr	r2, [r2, #0]
    299c:	9201      	str	r2, [sp, #4]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    299e:	f3c1 2104 	ubfx	r1, r1, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    29a2:	fa06 f101 	lsl.w	r1, r6, r1
    (void)dummy;
    29a6:	9a01      	ldr	r2, [sp, #4]
    29a8:	430c      	orrs	r4, r1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    29aa:	3301      	adds	r3, #1
    29ac:	2b08      	cmp	r3, #8
    29ae:	d1e2      	bne.n	2976 <gpiote_event_handler+0x4e>
	if (fired_triggers[0]) {
    29b0:	bb54      	cbnz	r4, 2a08 <gpiote_event_handler+0xe0>
	if (port_event) {
    29b2:	b175      	cbz	r5, 29d2 <gpiote_event_handler+0xaa>
	const struct gpio_nrfx_data *data = get_port_data(port);
    29b4:	4b32      	ldr	r3, [pc, #200]	; (2a80 <gpiote_event_handler+0x158>)
    29b6:	6899      	ldr	r1, [r3, #8]
	return port->config->config_info;
    29b8:	681b      	ldr	r3, [r3, #0]
    29ba:	689e      	ldr	r6, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
    29bc:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    29c0:	4013      	ands	r3, r2
	out &= ~data->trig_edge & ~data->double_edge;
    29c2:	e9d1 2005 	ldrd	r2, r0, [r1, #20]
    29c6:	4302      	orrs	r2, r0
    29c8:	ea23 0302 	bic.w	r3, r3, r2
	u32_t bit = 1U << pin;
    29cc:	2401      	movs	r4, #1
	u32_t pin = 0U;
    29ce:	2500      	movs	r5, #0
	while (level_pins) {
    29d0:	bb8b      	cbnz	r3, 2a36 <gpiote_event_handler+0x10e>
}
    29d2:	b002      	add	sp, #8
    29d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
    29d8:	4203      	tst	r3, r0
    29da:	d010      	beq.n	29fe <gpiote_event_handler+0xd6>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    29dc:	f896 c004 	ldrb.w	ip, [r6, #4]
    29e0:	f007 021f 	and.w	r2, r7, #31
    29e4:	ea42 124c 	orr.w	r2, r2, ip, lsl #5
    29e8:	0092      	lsls	r2, r2, #2
    29ea:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
			level_pins &= ~bit;
    29ee:	ea23 0300 	bic.w	r3, r3, r0
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    29f2:	f8d2 c700 	ldr.w	ip, [r2, #1792]	; 0x700
    29f6:	f42c 3c40 	bic.w	ip, ip, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    29fa:	f8c2 c700 	str.w	ip, [r2, #1792]	; 0x700
		++pin;
    29fe:	3701      	adds	r7, #1
		bit <<= 1;
    2a00:	0040      	lsls	r0, r0, #1
    2a02:	e7ae      	b.n	2962 <gpiote_event_handler+0x3a>
	u32_t fired_triggers[GPIO_COUNT] = {0};
    2a04:	462c      	mov	r4, r5
    2a06:	e7b2      	b.n	296e <gpiote_event_handler+0x46>
	struct gpio_nrfx_data *data = get_port_data(port);
    2a08:	4f1d      	ldr	r7, [pc, #116]	; (2a80 <gpiote_event_handler+0x158>)
    2a0a:	f8d7 8008 	ldr.w	r8, [r7, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2a0e:	f8d8 1000 	ldr.w	r1, [r8]
    2a12:	2900      	cmp	r1, #0
    2a14:	d0cd      	beq.n	29b2 <gpiote_event_handler+0x8a>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    2a16:	680e      	ldr	r6, [r1, #0]
		if ((cb->pin_mask & pins) & data->int_en) {
    2a18:	f8d8 300c 	ldr.w	r3, [r8, #12]
    2a1c:	688a      	ldr	r2, [r1, #8]
    2a1e:	4023      	ands	r3, r4
    2a20:	4213      	tst	r3, r2
    2a22:	d003      	beq.n	2a2c <gpiote_event_handler+0x104>
			cb->handler(port, cb, pins);
    2a24:	684b      	ldr	r3, [r1, #4]
    2a26:	4622      	mov	r2, r4
    2a28:	4638      	mov	r0, r7
    2a2a:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2a2c:	2e00      	cmp	r6, #0
    2a2e:	d0c0      	beq.n	29b2 <gpiote_event_handler+0x8a>
    2a30:	4631      	mov	r1, r6
    2a32:	6836      	ldr	r6, [r6, #0]
    2a34:	e7f0      	b.n	2a18 <gpiote_event_handler+0xf0>
		if (level_pins & bit) {
    2a36:	421c      	tst	r4, r3
    2a38:	d01c      	beq.n	2a74 <gpiote_event_handler+0x14c>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2a3a:	7930      	ldrb	r0, [r6, #4]
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    2a3c:	69cf      	ldr	r7, [r1, #28]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2a3e:	f005 021f 	and.w	r2, r5, #31
    2a42:	ea42 1240 	orr.w	r2, r2, r0, lsl #5
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    2a46:	6908      	ldr	r0, [r1, #16]
    2a48:	0092      	lsls	r2, r2, #2
    2a4a:	4078      	eors	r0, r7
    2a4c:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    2a50:	40e8      	lsrs	r0, r5
		return NRF_GPIO_PIN_SENSE_HIGH;
    2a52:	f010 0f01 	tst.w	r0, #1
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    2a56:	f8d2 0700 	ldr.w	r0, [r2, #1792]	; 0x700
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    2a5a:	bf18      	it	ne
    2a5c:	f44f 3700 	movne.w	r7, #131072	; 0x20000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    2a60:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    2a64:	bf08      	it	eq
    2a66:	f44f 3740 	moveq.w	r7, #196608	; 0x30000
    2a6a:	4338      	orrs	r0, r7
    2a6c:	f8c2 0700 	str.w	r0, [r2, #1792]	; 0x700
			level_pins &= ~bit;
    2a70:	ea23 0304 	bic.w	r3, r3, r4
		++pin;
    2a74:	3501      	adds	r5, #1
		bit <<= 1;
    2a76:	0064      	lsls	r4, r4, #1
    2a78:	e7aa      	b.n	29d0 <gpiote_event_handler+0xa8>
    2a7a:	bf00      	nop
    2a7c:	4000617c 	.word	0x4000617c
    2a80:	20002588 	.word	0x20002588
    2a84:	40006000 	.word	0x40006000

00002a88 <pwm_nrfx_get_cycles_per_sec>:
{
	/* TODO: Since this function might be removed, we will always return
	 * 16MHz from this function and handle the conversion with prescaler,
	 * etc, in the pin set function. See issue #6958.
	 */
	*cycles = 16ul * 1000ul * 1000ul;
    2a88:	4802      	ldr	r0, [pc, #8]	; (2a94 <pwm_nrfx_get_cycles_per_sec+0xc>)
    2a8a:	2100      	movs	r1, #0
    2a8c:	e9c2 0100 	strd	r0, r1, [r2]

	return 0;
}
    2a90:	2000      	movs	r0, #0
    2a92:	4770      	bx	lr
    2a94:	00f42400 	.word	0x00f42400

00002a98 <pwm_nrfx_init>:
	.get_cycles_per_sec = pwm_nrfx_get_cycles_per_sec,
};

static int pwm_nrfx_init(struct device *dev)
{
	const struct pwm_nrfx_config *config = dev->config->config_info;
    2a98:	6803      	ldr	r3, [r0, #0]
{
    2a9a:	b510      	push	{r4, lr}
    2a9c:	4604      	mov	r4, r0
	const struct pwm_nrfx_config *config = dev->config->config_info;
    2a9e:	6898      	ldr	r0, [r3, #8]

	nrfx_err_t result = nrfx_pwm_init(&config->pwm,
    2aa0:	2300      	movs	r3, #0
    2aa2:	461a      	mov	r2, r3
    2aa4:	f100 0108 	add.w	r1, r0, #8
    2aa8:	f000 fb88 	bl	31bc <nrfx_pwm_init>
					  &config->initial_config,
					  NULL,
					  NULL);
	if (result != NRFX_SUCCESS) {
    2aac:	4b0b      	ldr	r3, [pc, #44]	; (2adc <pwm_nrfx_init+0x44>)
    2aae:	4298      	cmp	r0, r3
    2ab0:	d012      	beq.n	2ad8 <pwm_nrfx_init+0x40>
		LOG_ERR("Failed to initialize device: %s", dev->config->name);
    2ab2:	2301      	movs	r3, #1
    2ab4:	f04f 0200 	mov.w	r2, #0
    2ab8:	f363 0207 	bfi	r2, r3, #0, #8
    2abc:	4908      	ldr	r1, [pc, #32]	; (2ae0 <pwm_nrfx_init+0x48>)
    2abe:	4b09      	ldr	r3, [pc, #36]	; (2ae4 <pwm_nrfx_init+0x4c>)
    2ac0:	4809      	ldr	r0, [pc, #36]	; (2ae8 <pwm_nrfx_init+0x50>)
    2ac2:	1a5b      	subs	r3, r3, r1
    2ac4:	08db      	lsrs	r3, r3, #3
    2ac6:	f363 128f 	bfi	r2, r3, #6, #10
    2aca:	6823      	ldr	r3, [r4, #0]
    2acc:	6819      	ldr	r1, [r3, #0]
    2ace:	f001 fdc9 	bl	4664 <log_1>
		return -EBUSY;
    2ad2:	f06f 000f 	mvn.w	r0, #15
	}

	return 0;
}
    2ad6:	bd10      	pop	{r4, pc}
	return 0;
    2ad8:	2000      	movs	r0, #0
    2ada:	e7fc      	b.n	2ad6 <pwm_nrfx_init+0x3e>
    2adc:	0bad0000 	.word	0x0bad0000
    2ae0:	000057d0 	.word	0x000057d0
    2ae4:	000057f8 	.word	0x000057f8
    2ae8:	00005ff2 	.word	0x00005ff2

00002aec <pwm_nrfx_pin_set>:
{
    2aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2af0:	4699      	mov	r9, r3
	const struct pwm_nrfx_config *config = dev->config->config_info;
    2af2:	6803      	ldr	r3, [r0, #0]
	struct pwm_nrfx_data *data = dev->driver_data;
    2af4:	6884      	ldr	r4, [r0, #8]
	const struct pwm_nrfx_config *config = dev->config->config_info;
    2af6:	689f      	ldr	r7, [r3, #8]
{
    2af8:	4615      	mov	r5, r2
    2afa:	b087      	sub	sp, #28
    2afc:	4688      	mov	r8, r1
	for (i = 0U; i < NRF_PWM_CHANNEL_COUNT; i++) {
    2afe:	1dfa      	adds	r2, r7, #7
    2b00:	2600      	movs	r6, #0
		if (output_pins[i] != NRFX_PWM_PIN_NOT_USED
    2b02:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    2b06:	2bff      	cmp	r3, #255	; 0xff
    2b08:	d004      	beq.n	2b14 <pwm_nrfx_pin_set+0x28>
		    && (pwm == (output_pins[i] & PWM_NRFX_CH_PIN_MASK))) {
    2b0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    2b0e:	4598      	cmp	r8, r3
    2b10:	f000 809e 	beq.w	2c50 <pwm_nrfx_pin_set+0x164>
	for (i = 0U; i < NRF_PWM_CHANNEL_COUNT; i++) {
    2b14:	3601      	adds	r6, #1
    2b16:	b2f6      	uxtb	r6, r6
    2b18:	2e04      	cmp	r6, #4
    2b1a:	d1f2      	bne.n	2b02 <pwm_nrfx_pin_set+0x16>
		LOG_ERR("PWM pin %d not enabled through DTS configuration.",
    2b1c:	2301      	movs	r3, #1
    2b1e:	f04f 0200 	mov.w	r2, #0
    2b22:	f363 0207 	bfi	r2, r3, #0, #8
    2b26:	4966      	ldr	r1, [pc, #408]	; (2cc0 <pwm_nrfx_pin_set+0x1d4>)
    2b28:	4b66      	ldr	r3, [pc, #408]	; (2cc4 <pwm_nrfx_pin_set+0x1d8>)
    2b2a:	4867      	ldr	r0, [pc, #412]	; (2cc8 <pwm_nrfx_pin_set+0x1dc>)
    2b2c:	1a5b      	subs	r3, r3, r1
    2b2e:	08db      	lsrs	r3, r3, #3
    2b30:	f363 128f 	bfi	r2, r3, #6, #10
    2b34:	4641      	mov	r1, r8
    2b36:	e05c      	b.n	2bf2 <pwm_nrfx_pin_set+0x106>
    2b38:	3301      	adds	r3, #1
	for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i) {
    2b3a:	2b04      	cmp	r3, #4
    2b3c:	f040 8094 	bne.w	2c68 <pwm_nrfx_pin_set+0x17c>
    2b40:	462a      	mov	r2, r5
    2b42:	2300      	movs	r3, #0
		if (countertop <= PWM_COUNTERTOP_COUNTERTOP_Msk) {
    2b44:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    2b48:	b2d9      	uxtb	r1, r3
    2b4a:	d240      	bcs.n	2bce <pwm_nrfx_pin_set+0xe2>
			data->prescaler     = prescaler;
    2b4c:	73a1      	strb	r1, [r4, #14]
			nrf_pwm_configure(config->pwm.p_registers,
    2b4e:	6839      	ldr	r1, [r7, #0]
			data->period_cycles = period_cycles;
    2b50:	6025      	str	r5, [r4, #0]
			data->countertop    = (u16_t)countertop;
    2b52:	81a2      	strh	r2, [r4, #12]
                                         nrf_pwm_mode_t mode,
                                         uint16_t       top_value)
{
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);

    p_reg->PRESCALER  = base_clock;
    2b54:	f8c1 350c 	str.w	r3, [r1, #1292]	; 0x50c
    p_reg->MODE       = mode;
    2b58:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
    2b5c:	f8c1 2508 	str.w	r2, [r1, #1288]	; 0x508
	pulse_cycles = MIN(pulse_cycles, period_cycles);
    2b60:	eb04 0a46 	add.w	sl, r4, r6, lsl #1
		| (pulse_cycles >> data->prescaler));
    2b64:	7ba1      	ldrb	r1, [r4, #14]
		(data->current[channel] & PWM_NRFX_CH_POLARITY_MASK)
    2b66:	f8ba 3004 	ldrh.w	r3, [sl, #4]
    2b6a:	4855      	ldr	r0, [pc, #340]	; (2cc0 <pwm_nrfx_pin_set+0x1d4>)
	pulse_cycles = MIN(pulse_cycles, period_cycles);
    2b6c:	454d      	cmp	r5, r9
    2b6e:	46ab      	mov	fp, r5
    2b70:	bf28      	it	cs
    2b72:	46cb      	movcs	fp, r9
		| (pulse_cycles >> data->prescaler));
    2b74:	fa2b f201 	lsr.w	r2, fp, r1
		(data->current[channel] & PWM_NRFX_CH_POLARITY_MASK)
    2b78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
		| (pulse_cycles >> data->prescaler));
    2b7c:	4313      	orrs	r3, r2
	data->current[channel] = (
    2b7e:	f8aa 3004 	strh.w	r3, [sl, #4]
	LOG_DBG("pin %u, pulse %u, period %u, prescaler: %u.",
    2b82:	2204      	movs	r2, #4
    2b84:	f04f 0300 	mov.w	r3, #0
    2b88:	f362 0307 	bfi	r3, r2, #0, #8
    2b8c:	4a4d      	ldr	r2, [pc, #308]	; (2cc4 <pwm_nrfx_pin_set+0x1d8>)
    2b8e:	9105      	str	r1, [sp, #20]
    2b90:	1a12      	subs	r2, r2, r0
    2b92:	08d2      	lsrs	r2, r2, #3
    2b94:	f362 138f 	bfi	r3, r2, #6, #10
    2b98:	4a4c      	ldr	r2, [pc, #304]	; (2ccc <pwm_nrfx_pin_set+0x1e0>)
    2b9a:	484d      	ldr	r0, [pc, #308]	; (2cd0 <pwm_nrfx_pin_set+0x1e4>)
    2b9c:	e9cd 2801 	strd	r2, r8, [sp, #4]
    2ba0:	a901      	add	r1, sp, #4
    2ba2:	2205      	movs	r2, #5
    2ba4:	e9cd b503 	strd	fp, r5, [sp, #12]
    2ba8:	f001 fda3 	bl	46f2 <log_n>
	u16_t pulse_cycle =
    2bac:	f8ba 3004 	ldrh.w	r3, [sl, #4]
    2bb0:	f3c3 030e 	ubfx	r3, r3, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
    2bb4:	b303      	cbz	r3, 2bf8 <pwm_nrfx_pin_set+0x10c>
    2bb6:	89a2      	ldrh	r2, [r4, #12]
    2bb8:	429a      	cmp	r2, r3
    2bba:	d91d      	bls.n	2bf8 <pwm_nrfx_pin_set+0x10c>
		if (nrfx_pwm_is_stopped(&config->pwm)) {
    2bbc:	4638      	mov	r0, r7
    2bbe:	f000 fbbf 	bl	3340 <nrfx_pwm_is_stopped>
    2bc2:	2800      	cmp	r0, #0
    2bc4:	d13c      	bne.n	2c40 <pwm_nrfx_pin_set+0x154>
	return 0;
    2bc6:	2000      	movs	r0, #0
}
    2bc8:	b007      	add	sp, #28
    2bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		countertop >>= 1;
    2bce:	3301      	adds	r3, #1
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
    2bd0:	2b08      	cmp	r3, #8
		countertop >>= 1;
    2bd2:	ea4f 0252 	mov.w	r2, r2, lsr #1
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
    2bd6:	d1b5      	bne.n	2b44 <pwm_nrfx_pin_set+0x58>
	LOG_ERR("Prescaler for period_cycles %u not found.", period_cycles);
    2bd8:	2301      	movs	r3, #1
    2bda:	f04f 0200 	mov.w	r2, #0
    2bde:	f363 0207 	bfi	r2, r3, #0, #8
    2be2:	4937      	ldr	r1, [pc, #220]	; (2cc0 <pwm_nrfx_pin_set+0x1d4>)
    2be4:	4b37      	ldr	r3, [pc, #220]	; (2cc4 <pwm_nrfx_pin_set+0x1d8>)
    2be6:	483b      	ldr	r0, [pc, #236]	; (2cd4 <pwm_nrfx_pin_set+0x1e8>)
    2be8:	1a5b      	subs	r3, r3, r1
    2bea:	08db      	lsrs	r3, r3, #3
    2bec:	f363 128f 	bfi	r2, r3, #6, #10
    2bf0:	4629      	mov	r1, r5
		LOG_ERR("PWM pin %d not enabled through DTS configuration.",
    2bf2:	f001 fd37 	bl	4664 <log_1>
    2bf6:	e050      	b.n	2c9a <pwm_nrfx_pin_set+0x1ae>
			config->initial_config.output_pins[channel]
    2bf8:	19bb      	adds	r3, r7, r6
    2bfa:	f993 3008 	ldrsb.w	r3, [r3, #8]
			&& !channel_inverted_state;
    2bfe:	f1bb 0f00 	cmp.w	fp, #0
    2c02:	d157      	bne.n	2cb4 <pwm_nrfx_pin_set+0x1c8>
			&& channel_inverted_state;
    2c04:	454d      	cmp	r5, r9
    2c06:	d84b      	bhi.n	2ca0 <pwm_nrfx_pin_set+0x1b4>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    2c08:	2301      	movs	r3, #1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
    2c0a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    2c0e:	fa03 f308 	lsl.w	r3, r3, r8
    p_reg->OUTCLR = clr_mask;
    2c12:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
	for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i) {
    2c16:	2300      	movs	r3, #0
		data->current[channel] & PWM_NRFX_CH_PULSE_CYCLES_MASK;
    2c18:	1d21      	adds	r1, r4, #4
		if (i != channel && pwm_channel_is_active(i, data)) {
    2c1a:	b2da      	uxtb	r2, r3
    2c1c:	42b2      	cmp	r2, r6
    2c1e:	d007      	beq.n	2c30 <pwm_nrfx_pin_set+0x144>
	u16_t pulse_cycle =
    2c20:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
    2c24:	f3c2 020e 	ubfx	r2, r2, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
    2c28:	b112      	cbz	r2, 2c30 <pwm_nrfx_pin_set+0x144>
    2c2a:	89a0      	ldrh	r0, [r4, #12]
    2c2c:	4290      	cmp	r0, r2
    2c2e:	d8ca      	bhi.n	2bc6 <pwm_nrfx_pin_set+0xda>
    2c30:	3301      	adds	r3, #1
	for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i) {
    2c32:	2b04      	cmp	r3, #4
    2c34:	d1f1      	bne.n	2c1a <pwm_nrfx_pin_set+0x12e>
			nrfx_pwm_stop(&config->pwm, false);
    2c36:	2100      	movs	r1, #0
    2c38:	4638      	mov	r0, r7
    2c3a:	f002 fb45 	bl	52c8 <nrfx_pwm_stop>
    2c3e:	e7c2      	b.n	2bc6 <pwm_nrfx_pin_set+0xda>
			nrfx_pwm_simple_playback(&config->pwm,
    2c40:	2302      	movs	r3, #2
    2c42:	2201      	movs	r2, #1
    2c44:	f107 0114 	add.w	r1, r7, #20
    2c48:	4638      	mov	r0, r7
    2c4a:	f000 fb3d 	bl	32c8 <nrfx_pwm_simple_playback>
    2c4e:	e7ba      	b.n	2bc6 <pwm_nrfx_pin_set+0xda>
	if (config->initial_config.count_mode == NRF_PWM_MODE_UP_AND_DOWN) {
    2c50:	7bb8      	ldrb	r0, [r7, #14]
    2c52:	2801      	cmp	r0, #1
    2c54:	d102      	bne.n	2c5c <pwm_nrfx_pin_set+0x170>
		period_cycles /= 2;
    2c56:	086d      	lsrs	r5, r5, #1
		pulse_cycles /= 2;
    2c58:	ea4f 0959 	mov.w	r9, r9, lsr #1
	if (period_cycles != data->period_cycles) {
    2c5c:	6823      	ldr	r3, [r4, #0]
    2c5e:	42ab      	cmp	r3, r5
    2c60:	f43f af7e 	beq.w	2b60 <pwm_nrfx_pin_set+0x74>
    2c64:	2300      	movs	r3, #0
				data->current[i]
    2c66:	1d21      	adds	r1, r4, #4
		if (i != channel) {
    2c68:	b2da      	uxtb	r2, r3
    2c6a:	42b2      	cmp	r2, r6
    2c6c:	f43f af64 	beq.w	2b38 <pwm_nrfx_pin_set+0x4c>
			u16_t channel_pulse_cycle =
    2c70:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
			if (channel_pulse_cycle > 0) {
    2c74:	f3c2 020e 	ubfx	r2, r2, #0, #15
    2c78:	2a00      	cmp	r2, #0
    2c7a:	f43f af5d 	beq.w	2b38 <pwm_nrfx_pin_set+0x4c>
				LOG_ERR("Incompatible period.");
    2c7e:	2301      	movs	r3, #1
    2c80:	f04f 0100 	mov.w	r1, #0
    2c84:	f363 0107 	bfi	r1, r3, #0, #8
    2c88:	4a0d      	ldr	r2, [pc, #52]	; (2cc0 <pwm_nrfx_pin_set+0x1d4>)
    2c8a:	4b0e      	ldr	r3, [pc, #56]	; (2cc4 <pwm_nrfx_pin_set+0x1d8>)
    2c8c:	4812      	ldr	r0, [pc, #72]	; (2cd8 <pwm_nrfx_pin_set+0x1ec>)
    2c8e:	1a9b      	subs	r3, r3, r2
    2c90:	08db      	lsrs	r3, r3, #3
    2c92:	f363 118f 	bfi	r1, r3, #6, #10
    2c96:	f001 fcd8 	bl	464a <log_0>
		return -EINVAL;
    2c9a:	f06f 0015 	mvn.w	r0, #21
    2c9e:	e793      	b.n	2bc8 <pwm_nrfx_pin_set+0xdc>
		if (pulse_0_and_not_inverted || pulse_100_and_inverted) {
    2ca0:	2b00      	cmp	r3, #0
    2ca2:	dab1      	bge.n	2c08 <pwm_nrfx_pin_set+0x11c>
    p_reg->OUTSET = set_mask;
    2ca4:	2301      	movs	r3, #1
    2ca6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    2caa:	fa03 f308 	lsl.w	r3, r3, r8
    2cae:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    2cb2:	e7b0      	b.n	2c16 <pwm_nrfx_pin_set+0x12a>
			&& channel_inverted_state;
    2cb4:	454d      	cmp	r5, r9
    2cb6:	d8f5      	bhi.n	2ca4 <pwm_nrfx_pin_set+0x1b8>
    2cb8:	2b00      	cmp	r3, #0
    2cba:	dba5      	blt.n	2c08 <pwm_nrfx_pin_set+0x11c>
    2cbc:	e7f2      	b.n	2ca4 <pwm_nrfx_pin_set+0x1b8>
    2cbe:	bf00      	nop
    2cc0:	000057d0 	.word	0x000057d0
    2cc4:	000057f8 	.word	0x000057f8
    2cc8:	00006081 	.word	0x00006081
    2ccc:	00005fe1 	.word	0x00005fe1
    2cd0:	00006051 	.word	0x00006051
    2cd4:	00006027 	.word	0x00006027
    2cd8:	00006012 	.word	0x00006012

00002cdc <uart_nrfx_err_check>:
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_uart_errorsrc_get_and_clear(NRF_UART_Type * p_reg)
{
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    2cdc:	4b02      	ldr	r3, [pc, #8]	; (2ce8 <uart_nrfx_err_check+0xc>)
    2cde:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    2ce2:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
/** Console I/O function */
static int uart_nrfx_err_check(struct device *dev)
{
	/* register bitfields maps to the defines in uart.h */
	return nrf_uart_errorsrc_get_and_clear(uart0_addr);
}
    2ce6:	4770      	bx	lr
    2ce8:	40002000 	.word	0x40002000

00002cec <uart_nrfx_configure>:

static int uart_nrfx_configure(struct device *dev,
			       const struct uart_config *cfg)
{
    2cec:	b530      	push	{r4, r5, lr}
		break;
	default:
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
    2cee:	794b      	ldrb	r3, [r1, #5]
    2cf0:	2b01      	cmp	r3, #1
    2cf2:	d120      	bne.n	2d36 <uart_nrfx_configure+0x4a>
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    2cf4:	798b      	ldrb	r3, [r1, #6]
    2cf6:	2b03      	cmp	r3, #3
    2cf8:	d11d      	bne.n	2d36 <uart_nrfx_configure+0x4a>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    2cfa:	79ca      	ldrb	r2, [r1, #7]
    2cfc:	b12a      	cbz	r2, 2d0a <uart_nrfx_configure+0x1e>
    2cfe:	2a01      	cmp	r2, #1
    2d00:	d119      	bne.n	2d36 <uart_nrfx_configure+0x4a>
	return dev->config->config_info;
    2d02:	6803      	ldr	r3, [r0, #0]
	case UART_CFG_FLOW_CTRL_NONE:
		uart_cfg.hwfc = NRF_UART_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
    2d04:	689b      	ldr	r3, [r3, #8]
    2d06:	781b      	ldrb	r3, [r3, #0]
    2d08:	b1ab      	cbz	r3, 2d36 <uart_nrfx_configure+0x4a>
	}

#if defined(UART_CONFIG_PARITYTYPE_Msk)
	uart_cfg.paritytype = NRF_UART_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    2d0a:	790c      	ldrb	r4, [r1, #4]
    2d0c:	b114      	cbz	r4, 2d14 <uart_nrfx_configure+0x28>
    2d0e:	2c02      	cmp	r4, #2
    2d10:	d111      	bne.n	2d36 <uart_nrfx_configure+0x4a>
	case UART_CFG_PARITY_NONE:
		uart_cfg.parity = NRF_UART_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uart_cfg.parity = NRF_UART_PARITY_INCLUDED;
    2d12:	240e      	movs	r4, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    2d14:	680b      	ldr	r3, [r1, #0]
	switch (baudrate) {
    2d16:	f647 2512 	movw	r5, #31250	; 0x7a12
    2d1a:	42ab      	cmp	r3, r5
    2d1c:	d05f      	beq.n	2dde <uart_nrfx_configure+0xf2>
    2d1e:	d827      	bhi.n	2d70 <uart_nrfx_configure+0x84>
    2d20:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    2d24:	d05e      	beq.n	2de4 <uart_nrfx_configure+0xf8>
    2d26:	d812      	bhi.n	2d4e <uart_nrfx_configure+0x62>
    2d28:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    2d2c:	d05c      	beq.n	2de8 <uart_nrfx_configure+0xfc>
    2d2e:	d805      	bhi.n	2d3c <uart_nrfx_configure+0x50>
    2d30:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    2d34:	d05b      	beq.n	2dee <uart_nrfx_configure+0x102>
		return -ENOTSUP;
    2d36:	f06f 0022 	mvn.w	r0, #34	; 0x22
    2d3a:	e04f      	b.n	2ddc <uart_nrfx_configure+0xf0>
	switch (baudrate) {
    2d3c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    2d40:	d058      	beq.n	2df4 <uart_nrfx_configure+0x108>
    2d42:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    2d46:	d1f6      	bne.n	2d36 <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_2400;
    2d48:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    2d4c:	e03b      	b.n	2dc6 <uart_nrfx_configure+0xda>
	switch (baudrate) {
    2d4e:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    2d52:	d052      	beq.n	2dfa <uart_nrfx_configure+0x10e>
    2d54:	d804      	bhi.n	2d60 <uart_nrfx_configure+0x74>
    2d56:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    2d5a:	d1ec      	bne.n	2d36 <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_9600;
    2d5c:	4b30      	ldr	r3, [pc, #192]	; (2e20 <uart_nrfx_configure+0x134>)
    2d5e:	e032      	b.n	2dc6 <uart_nrfx_configure+0xda>
	switch (baudrate) {
    2d60:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    2d64:	d04c      	beq.n	2e00 <uart_nrfx_configure+0x114>
    2d66:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    2d6a:	d1e4      	bne.n	2d36 <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
    2d6c:	4b2d      	ldr	r3, [pc, #180]	; (2e24 <uart_nrfx_configure+0x138>)
    2d6e:	e02a      	b.n	2dc6 <uart_nrfx_configure+0xda>
	switch (baudrate) {
    2d70:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    2d74:	d046      	beq.n	2e04 <uart_nrfx_configure+0x118>
    2d76:	d811      	bhi.n	2d9c <uart_nrfx_configure+0xb0>
    2d78:	f64d 25c0 	movw	r5, #56000	; 0xdac0
    2d7c:	42ab      	cmp	r3, r5
    2d7e:	d043      	beq.n	2e08 <uart_nrfx_configure+0x11c>
    2d80:	d804      	bhi.n	2d8c <uart_nrfx_configure+0xa0>
    2d82:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
    2d86:	d1d6      	bne.n	2d36 <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_38400;
    2d88:	4b27      	ldr	r3, [pc, #156]	; (2e28 <uart_nrfx_configure+0x13c>)
    2d8a:	e01c      	b.n	2dc6 <uart_nrfx_configure+0xda>
	switch (baudrate) {
    2d8c:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    2d90:	d03d      	beq.n	2e0e <uart_nrfx_configure+0x122>
    2d92:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    2d96:	d1ce      	bne.n	2d36 <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_76800;
    2d98:	4b24      	ldr	r3, [pc, #144]	; (2e2c <uart_nrfx_configure+0x140>)
    2d9a:	e014      	b.n	2dc6 <uart_nrfx_configure+0xda>
	switch (baudrate) {
    2d9c:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    2da0:	d037      	beq.n	2e12 <uart_nrfx_configure+0x126>
    2da2:	d808      	bhi.n	2db6 <uart_nrfx_configure+0xca>
    2da4:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    2da8:	d035      	beq.n	2e16 <uart_nrfx_configure+0x12a>
    2daa:	4d21      	ldr	r5, [pc, #132]	; (2e30 <uart_nrfx_configure+0x144>)
    2dac:	42ab      	cmp	r3, r5
    2dae:	d1c2      	bne.n	2d36 <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_250000;
    2db0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    2db4:	e007      	b.n	2dc6 <uart_nrfx_configure+0xda>
	switch (baudrate) {
    2db6:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    2dba:	d02e      	beq.n	2e1a <uart_nrfx_configure+0x12e>
    2dbc:	4d1d      	ldr	r5, [pc, #116]	; (2e34 <uart_nrfx_configure+0x148>)
    2dbe:	42ab      	cmp	r3, r5
    2dc0:	d1b9      	bne.n	2d36 <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_1000000;
    2dc2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    2dc6:	4d1c      	ldr	r5, [pc, #112]	; (2e38 <uart_nrfx_configure+0x14c>)
                    | (uint32_t)p_cfg->hwfc;
    2dc8:	4322      	orrs	r2, r4
    p_reg->BAUDRATE = baudrate;
    2dca:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    2dce:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uart_configure(uart0_addr, &uart_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    2dd2:	6883      	ldr	r3, [r0, #8]
    2dd4:	c903      	ldmia	r1, {r0, r1}
    2dd6:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    2dda:	2000      	movs	r0, #0
}
    2ddc:	bd30      	pop	{r4, r5, pc}
		nrf_baudrate = NRF_UART_BAUDRATE_31250;
    2dde:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    2de2:	e7f0      	b.n	2dc6 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_4800;
    2de4:	4b15      	ldr	r3, [pc, #84]	; (2e3c <uart_nrfx_configure+0x150>)
    2de6:	e7ee      	b.n	2dc6 <uart_nrfx_configure+0xda>
		nrf_baudrate = 0x00027000;
    2de8:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    2dec:	e7eb      	b.n	2dc6 <uart_nrfx_configure+0xda>
		nrf_baudrate = 0x00014000;
    2dee:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    2df2:	e7e8      	b.n	2dc6 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_1200;
    2df4:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    2df8:	e7e5      	b.n	2dc6 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_14400;
    2dfa:	f44f 136c 	mov.w	r3, #3866624	; 0x3b0000
    2dfe:	e7e2      	b.n	2dc6 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_19200;
    2e00:	4b0f      	ldr	r3, [pc, #60]	; (2e40 <uart_nrfx_configure+0x154>)
    2e02:	e7e0      	b.n	2dc6 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_115200;
    2e04:	4b0f      	ldr	r3, [pc, #60]	; (2e44 <uart_nrfx_configure+0x158>)
    2e06:	e7de      	b.n	2dc6 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_56000;
    2e08:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    2e0c:	e7db      	b.n	2dc6 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_57600;
    2e0e:	4b0e      	ldr	r3, [pc, #56]	; (2e48 <uart_nrfx_configure+0x15c>)
    2e10:	e7d9      	b.n	2dc6 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_460800;
    2e12:	4b0e      	ldr	r3, [pc, #56]	; (2e4c <uart_nrfx_configure+0x160>)
    2e14:	e7d7      	b.n	2dc6 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_230400;
    2e16:	4b0e      	ldr	r3, [pc, #56]	; (2e50 <uart_nrfx_configure+0x164>)
    2e18:	e7d5      	b.n	2dc6 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_921600;
    2e1a:	4b0e      	ldr	r3, [pc, #56]	; (2e54 <uart_nrfx_configure+0x168>)
    2e1c:	e7d3      	b.n	2dc6 <uart_nrfx_configure+0xda>
    2e1e:	bf00      	nop
    2e20:	00275000 	.word	0x00275000
    2e24:	0075f000 	.word	0x0075f000
    2e28:	009d5000 	.word	0x009d5000
    2e2c:	013a9000 	.word	0x013a9000
    2e30:	0003d090 	.word	0x0003d090
    2e34:	000f4240 	.word	0x000f4240
    2e38:	40002000 	.word	0x40002000
    2e3c:	0013b000 	.word	0x0013b000
    2e40:	004ea000 	.word	0x004ea000
    2e44:	01d7e000 	.word	0x01d7e000
    2e48:	00ebf000 	.word	0x00ebf000
    2e4c:	075f7000 	.word	0x075f7000
    2e50:	03afb000 	.word	0x03afb000
    2e54:	0ebed000 	.word	0x0ebed000

00002e58 <uart_nrfx_poll_in>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2e58:	4b08      	ldr	r3, [pc, #32]	; (2e7c <uart_nrfx_poll_in+0x24>)
    2e5a:	681a      	ldr	r2, [r3, #0]
{
    2e5c:	b082      	sub	sp, #8
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
    2e5e:	b152      	cbz	r2, 2e76 <uart_nrfx_poll_in+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2e60:	2000      	movs	r0, #0
    2e62:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    2e64:	681b      	ldr	r3, [r3, #0]
    2e66:	9301      	str	r3, [sp, #4]
    (void)dummy;
    2e68:	9b01      	ldr	r3, [sp, #4]
    return p_reg->RXD;
    2e6a:	4b05      	ldr	r3, [pc, #20]	; (2e80 <uart_nrfx_poll_in+0x28>)
    2e6c:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    2e70:	700b      	strb	r3, [r1, #0]
}
    2e72:	b002      	add	sp, #8
    2e74:	4770      	bx	lr
		return -1;
    2e76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2e7a:	e7fa      	b.n	2e72 <uart_nrfx_poll_in+0x1a>
    2e7c:	40002108 	.word	0x40002108
    2e80:	40002000 	.word	0x40002000

00002e84 <uart_nrfx_poll_out>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2e84:	4b09      	ldr	r3, [pc, #36]	; (2eac <uart_nrfx_poll_out+0x28>)
    2e86:	2200      	movs	r2, #0
    2e88:	601a      	str	r2, [r3, #0]
{
    2e8a:	b082      	sub	sp, #8
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    2e8c:	681a      	ldr	r2, [r3, #0]
    2e8e:	9201      	str	r2, [sp, #4]
    (void)dummy;
    2e90:	9a01      	ldr	r2, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2e92:	4a07      	ldr	r2, [pc, #28]	; (2eb0 <uart_nrfx_poll_out+0x2c>)
    2e94:	2001      	movs	r0, #1
    2e96:	6010      	str	r0, [r2, #0]
    p_reg->TXD = txd;
    2e98:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2e9c:	681a      	ldr	r2, [r3, #0]
	while (!event_txdrdy_check()) {
    2e9e:	2a00      	cmp	r2, #0
    2ea0:	d0fc      	beq.n	2e9c <uart_nrfx_poll_out+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2ea2:	4b04      	ldr	r3, [pc, #16]	; (2eb4 <uart_nrfx_poll_out+0x30>)
    2ea4:	2201      	movs	r2, #1
    2ea6:	601a      	str	r2, [r3, #0]
}
    2ea8:	b002      	add	sp, #8
    2eaa:	4770      	bx	lr
    2eac:	4000211c 	.word	0x4000211c
    2eb0:	40002008 	.word	0x40002008
    2eb4:	4000200c 	.word	0x4000200c

00002eb8 <uart_nrfx_init>:
    2eb8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(struct device *dev)
{
    2ebc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    p_reg->PSELRXD = pselrxd;
    2ebe:	4c16      	ldr	r4, [pc, #88]	; (2f18 <uart_nrfx_init+0x60>)
    2ec0:	2240      	movs	r2, #64	; 0x40
    2ec2:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    2ec6:	2103      	movs	r1, #3
    2ec8:	2200      	movs	r2, #0
    2eca:	2508      	movs	r5, #8
    2ecc:	f8c3 1718 	str.w	r1, [r3, #1816]	; 0x718
    2ed0:	f8c3 2720 	str.w	r2, [r3, #1824]	; 0x720
    2ed4:	f8c4 5514 	str.w	r5, [r4, #1300]	; 0x514
    p_reg->PSELTXD = pseltxd;
    2ed8:	2506      	movs	r5, #6
    2eda:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
    p_reg->OUTSET = set_mask;
    2ede:	2520      	movs	r5, #32
    2ee0:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    2ee4:	f8c3 1714 	str.w	r1, [r3, #1812]	; 0x714
    2ee8:	f8c3 271c 	str.w	r2, [r3, #1820]	; 0x71c
    p_reg->PSELRTS = pselrts;
    2eec:	2305      	movs	r3, #5
    2eee:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSELCTS = pselcts;
    2ef2:	2307      	movs	r3, #7
    2ef4:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
			       DT_NORDIC_NRF_UART_UART_0_RTS_PIN,
			       DT_NORDIC_NRF_UART_UART_0_CTS_PIN);
#endif

	/* Set initial configuration */
	err = uart_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    2ef8:	6881      	ldr	r1, [r0, #8]
    2efa:	f7ff fef7 	bl	2cec <uart_nrfx_configure>
	if (err) {
    2efe:	b948      	cbnz	r0, 2f14 <uart_nrfx_init+0x5c>
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
    2f00:	2304      	movs	r3, #4
    2f02:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2f06:	4b05      	ldr	r3, [pc, #20]	; (2f1c <uart_nrfx_init+0x64>)
    2f08:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    2f0a:	681b      	ldr	r3, [r3, #0]
    2f0c:	9301      	str	r3, [sp, #4]
    (void)dummy;
    2f0e:	9b01      	ldr	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2f10:	2301      	movs	r3, #1
    2f12:	6023      	str	r3, [r4, #0]
	defined(DT_NORDIC_NRF_UART_UART_0_CTS_PIN)
	k_delayed_work_init(&uart0_cb.tx_timeout_work, tx_timeout);
#endif
#endif
	return 0;
}
    2f14:	b003      	add	sp, #12
    2f16:	bd30      	pop	{r4, r5, pc}
    2f18:	40002000 	.word	0x40002000
    2f1c:	40002108 	.word	0x40002108

00002f20 <errata_108>:
static bool errata_12(void)
{
    uint32_t var1;
    uint32_t var2;

    if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    2f20:	4b04      	ldr	r3, [pc, #16]	; (2f34 <errata_108+0x14>)
    2f22:	6818      	ldr	r0, [r3, #0]
    2f24:	1c42      	adds	r2, r0, #1
    {
        var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    2f26:	bf04      	itt	eq
    2f28:	4b03      	ldreq	r3, [pc, #12]	; (2f38 <errata_108+0x18>)
    2f2a:	7818      	ldrbeq	r0, [r3, #0]
        break;

    }

    return false;
}
    2f2c:	1f83      	subs	r3, r0, #6
    2f2e:	4258      	negs	r0, r3
    2f30:	4158      	adcs	r0, r3
    2f32:	4770      	bx	lr
    2f34:	10000130 	.word	0x10000130
    2f38:	f0000fe0 	.word	0xf0000fe0

00002f3c <errata_16>:
    return false;
}

static bool errata_16(void)
{
    uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    2f3c:	4b07      	ldr	r3, [pc, #28]	; (2f5c <errata_16+0x20>)
    2f3e:	781b      	ldrb	r3, [r3, #0]
    uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;

    switch(var1)
    2f40:	2b06      	cmp	r3, #6
    2f42:	d109      	bne.n	2f58 <errata_16+0x1c>
    uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    2f44:	4b06      	ldr	r3, [pc, #24]	; (2f60 <errata_16+0x24>)
    2f46:	681b      	ldr	r3, [r3, #0]
    2f48:	f3c3 1303 	ubfx	r3, r3, #4, #4
    2f4c:	3b03      	subs	r3, #3
    2f4e:	2b03      	cmp	r3, #3
    2f50:	d802      	bhi.n	2f58 <errata_16+0x1c>
    2f52:	4a04      	ldr	r2, [pc, #16]	; (2f64 <errata_16+0x28>)
    2f54:	5cd0      	ldrb	r0, [r2, r3]
    2f56:	4770      	bx	lr
            }
        break;

    }

    return false;
    2f58:	2000      	movs	r0, #0
}
    2f5a:	4770      	bx	lr
    2f5c:	f0000fe0 	.word	0xf0000fe0
    2f60:	f0000fe8 	.word	0xf0000fe8
    2f64:	000060bd 	.word	0x000060bd

00002f68 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    2f68:	b508      	push	{r3, lr}
        NRF_P0->PIN_CNF[20] = (GPIO_PIN_CNF_DRIVE_H0H1 << GPIO_PIN_CNF_DRIVE_Pos) | (GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos) | (GPIO_PIN_CNF_DIR_Output << GPIO_PIN_CNF_DIR_Pos);
    #endif
    
    /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (errata_12()){
    2f6a:	f7ff ffd9 	bl	2f20 <errata_108>
    2f6e:	b128      	cbz	r0, 2f7c <SystemInit+0x14>
        *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
    2f70:	4b7c      	ldr	r3, [pc, #496]	; (3164 <SystemInit+0x1fc>)
    2f72:	4a7d      	ldr	r2, [pc, #500]	; (3168 <SystemInit+0x200>)
    2f74:	681b      	ldr	r3, [r3, #0]
    2f76:	f3c3 2304 	ubfx	r3, r3, #8, #5
    2f7a:	6013      	str	r3, [r2, #0]
    }
    
    /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (errata_16()){
    2f7c:	f7ff ffde 	bl	2f3c <errata_16>
    2f80:	b110      	cbz	r0, 2f88 <SystemInit+0x20>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    2f82:	4b7a      	ldr	r3, [pc, #488]	; (316c <SystemInit+0x204>)
    2f84:	4a7a      	ldr	r2, [pc, #488]	; (3170 <SystemInit+0x208>)
    2f86:	601a      	str	r2, [r3, #0]
    }

    /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (errata_31()){
    2f88:	f7ff ffca 	bl	2f20 <errata_108>
    2f8c:	b128      	cbz	r0, 2f9a <SystemInit+0x32>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    2f8e:	4b79      	ldr	r3, [pc, #484]	; (3174 <SystemInit+0x20c>)
    2f90:	4a79      	ldr	r2, [pc, #484]	; (3178 <SystemInit+0x210>)
    2f92:	681b      	ldr	r3, [r3, #0]
    2f94:	f3c3 3342 	ubfx	r3, r3, #13, #3
    2f98:	6013      	str	r3, [r2, #0]
    }

    /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (errata_32()){
    2f9a:	f7ff ffcf 	bl	2f3c <errata_16>
    2f9e:	b120      	cbz	r0, 2faa <SystemInit+0x42>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    2fa0:	4a76      	ldr	r2, [pc, #472]	; (317c <SystemInit+0x214>)
    2fa2:	68d3      	ldr	r3, [r2, #12]
    2fa4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    2fa8:	60d3      	str	r3, [r2, #12]
    }

    /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_36()){
    2faa:	f7ff ffb9 	bl	2f20 <errata_108>
    2fae:	b140      	cbz	r0, 2fc2 <SystemInit+0x5a>
        NRF_CLOCK->EVENTS_DONE = 0;
    2fb0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2fb4:	2200      	movs	r2, #0
    2fb6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
    2fba:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
    2fbe:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    }

    /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_37()){
    2fc2:	f7ff ffbb 	bl	2f3c <errata_16>
    2fc6:	b110      	cbz	r0, 2fce <SystemInit+0x66>
        *(volatile uint32_t *)0x400005A0 = 0x3;
    2fc8:	4b6d      	ldr	r3, [pc, #436]	; (3180 <SystemInit+0x218>)
    2fca:	2203      	movs	r2, #3
    2fcc:	601a      	str	r2, [r3, #0]
    }

    /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_57()){
    2fce:	f7ff ffb5 	bl	2f3c <errata_16>
    2fd2:	b140      	cbz	r0, 2fe6 <SystemInit+0x7e>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
    2fd4:	4b6b      	ldr	r3, [pc, #428]	; (3184 <SystemInit+0x21c>)
    2fd6:	2205      	movs	r2, #5
    2fd8:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005688 = 0x00000001;
    2fda:	2201      	movs	r2, #1
    2fdc:	679a      	str	r2, [r3, #120]	; 0x78
        *(volatile uint32_t *)0x40005618 = 0x00000000;
    2fde:	2200      	movs	r2, #0
    2fe0:	609a      	str	r2, [r3, #8]
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
    2fe2:	223f      	movs	r2, #63	; 0x3f
    2fe4:	605a      	str	r2, [r3, #4]
static bool errata_66(void)
{
    uint32_t var1;
    uint32_t var2;

    if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    2fe6:	4b68      	ldr	r3, [pc, #416]	; (3188 <SystemInit+0x220>)
    2fe8:	681a      	ldr	r2, [r3, #0]
    2fea:	1c51      	adds	r1, r2, #1
    {
        var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    2fec:	bf0b      	itete	eq
    2fee:	4b67      	ldreq	r3, [pc, #412]	; (318c <SystemInit+0x224>)
        var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    }
    else
    {
        var1 = *(uint32_t *)0x10000130ul;
        var2 = *(uint32_t *)0x10000134ul;
    2ff0:	4b67      	ldrne	r3, [pc, #412]	; (3190 <SystemInit+0x228>)
        var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    2ff2:	781a      	ldrbeq	r2, [r3, #0]
        var2 = *(uint32_t *)0x10000134ul;
    2ff4:	681b      	ldrne	r3, [r3, #0]
        var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    2ff6:	bf02      	ittt	eq
    2ff8:	3308      	addeq	r3, #8
    2ffa:	681b      	ldreq	r3, [r3, #0]
    2ffc:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
    }

    switch(var1)
    3000:	2a06      	cmp	r2, #6
    3002:	d14d      	bne.n	30a0 <SystemInit+0x138>
    {
        case 0x06:
            switch(var2)
    3004:	3b03      	subs	r3, #3
    3006:	2b03      	cmp	r3, #3
    3008:	d803      	bhi.n	3012 <SystemInit+0xaa>
    }

    /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_66()){
    300a:	4a62      	ldr	r2, [pc, #392]	; (3194 <SystemInit+0x22c>)
    300c:	5cd3      	ldrb	r3, [r2, r3]
    300e:	2b00      	cmp	r3, #0
    3010:	d046      	beq.n	30a0 <SystemInit+0x138>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    3012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3016:	4b60      	ldr	r3, [pc, #384]	; (3198 <SystemInit+0x230>)
    3018:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    301c:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    3020:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    3024:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    3028:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    302c:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    3030:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    3034:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    3038:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    303c:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    3040:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    3044:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    3048:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    304c:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    3050:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    3054:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    3058:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    305c:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    3060:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    3064:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    3068:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    306c:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    3070:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    3074:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    3078:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    307c:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    3080:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    3084:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    3088:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    308c:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    3090:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    3094:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    3098:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    309c:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    }

    /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_108()){
    30a0:	f7ff ff3e 	bl	2f20 <errata_108>
    30a4:	b128      	cbz	r0, 30b2 <SystemInit+0x14a>
        *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
    30a6:	4b3d      	ldr	r3, [pc, #244]	; (319c <SystemInit+0x234>)
    30a8:	4a3d      	ldr	r2, [pc, #244]	; (31a0 <SystemInit+0x238>)
    30aa:	681b      	ldr	r3, [r3, #0]
    30ac:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    30b0:	6013      	str	r3, [r2, #0]
    }
    
    /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_136()){
    30b2:	f7ff ff35 	bl	2f20 <errata_108>
    30b6:	b148      	cbz	r0, 30cc <SystemInit+0x164>
        if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    30b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    30bc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    30c0:	07d2      	lsls	r2, r2, #31
            NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    30c2:	bf44      	itt	mi
    30c4:	f06f 0201 	mvnmi.w	r2, #1
    30c8:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    return false;
}

static bool errata_182(void)
{
    uint32_t var1 = *(uint32_t *)0x10000130ul;
    30cc:	4b2e      	ldr	r3, [pc, #184]	; (3188 <SystemInit+0x220>)
    uint32_t var2 = *(uint32_t *)0x10000134ul;

    switch(var1)
    30ce:	681b      	ldr	r3, [r3, #0]
    30d0:	2b06      	cmp	r3, #6
    30d2:	d109      	bne.n	30e8 <SystemInit+0x180>
    uint32_t var2 = *(uint32_t *)0x10000134ul;
    30d4:	4b2e      	ldr	r3, [pc, #184]	; (3190 <SystemInit+0x228>)
    {
        case 0x06:
            switch(var2)
    30d6:	681b      	ldr	r3, [r3, #0]
    30d8:	3b03      	subs	r3, #3
    30da:	2b02      	cmp	r3, #2
    }
    
    /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_182()){
        *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
    30dc:	bf81      	itttt	hi
    30de:	4a31      	ldrhi	r2, [pc, #196]	; (31a4 <SystemInit+0x23c>)
    30e0:	6813      	ldrhi	r3, [r2, #0]
    30e2:	f443 6380 	orrhi.w	r3, r3, #1024	; 0x400
    30e6:	6013      	strhi	r3, [r2, #0]

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    30e8:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    30ec:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    30f0:	2a00      	cmp	r2, #0
    30f2:	db03      	blt.n	30fc <SystemInit+0x194>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    30f4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    30f8:	2b00      	cmp	r3, #0
    30fa:	da2f      	bge.n	315c <SystemInit+0x1f4>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    30fc:	4b2a      	ldr	r3, [pc, #168]	; (31a8 <SystemInit+0x240>)
    30fe:	2201      	movs	r2, #1
    3100:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    3104:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    3108:	2a00      	cmp	r2, #0
    310a:	d0fb      	beq.n	3104 <SystemInit+0x19c>
            NRF_UICR->PSELRESET[0] = 21;
    310c:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    3110:	2115      	movs	r1, #21
    3112:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    3116:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    311a:	2a00      	cmp	r2, #0
    311c:	d0fb      	beq.n	3116 <SystemInit+0x1ae>
            NRF_UICR->PSELRESET[1] = 21;
    311e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    3122:	2215      	movs	r2, #21
    3124:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    3128:	4b1f      	ldr	r3, [pc, #124]	; (31a8 <SystemInit+0x240>)
    312a:	461a      	mov	r2, r3
    312c:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
    3130:	2900      	cmp	r1, #0
    3132:	d0fb      	beq.n	312c <SystemInit+0x1c4>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    3134:	2100      	movs	r1, #0
    3136:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    313a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    313e:	2b00      	cmp	r3, #0
    3140:	d0fb      	beq.n	313a <SystemInit+0x1d2>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    3142:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    3146:	4919      	ldr	r1, [pc, #100]	; (31ac <SystemInit+0x244>)
    3148:	4b19      	ldr	r3, [pc, #100]	; (31b0 <SystemInit+0x248>)
    314a:	68ca      	ldr	r2, [r1, #12]
    314c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    3150:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    3152:	60cb      	str	r3, [r1, #12]
    3154:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    3158:	bf00      	nop
    315a:	e7fd      	b.n	3158 <SystemInit+0x1f0>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    315c:	4b15      	ldr	r3, [pc, #84]	; (31b4 <SystemInit+0x24c>)
    315e:	4a16      	ldr	r2, [pc, #88]	; (31b8 <SystemInit+0x250>)
    3160:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    3162:	bd08      	pop	{r3, pc}
    3164:	10000324 	.word	0x10000324
    3168:	40013540 	.word	0x40013540
    316c:	4007c074 	.word	0x4007c074
    3170:	baadf00d 	.word	0xbaadf00d
    3174:	10000244 	.word	0x10000244
    3178:	4000053c 	.word	0x4000053c
    317c:	e000edf0 	.word	0xe000edf0
    3180:	400005a0 	.word	0x400005a0
    3184:	40005610 	.word	0x40005610
    3188:	10000130 	.word	0x10000130
    318c:	f0000fe0 	.word	0xf0000fe0
    3190:	10000134 	.word	0x10000134
    3194:	000060c1 	.word	0x000060c1
    3198:	4000c000 	.word	0x4000c000
    319c:	10000258 	.word	0x10000258
    31a0:	40000ee4 	.word	0x40000ee4
    31a4:	4000173c 	.word	0x4000173c
    31a8:	4001e000 	.word	0x4001e000
    31ac:	e000ed00 	.word	0xe000ed00
    31b0:	05fa0004 	.word	0x05fa0004
    31b4:	20002504 	.word	0x20002504
    31b8:	03d09000 	.word	0x03d09000

000031bc <nrfx_pwm_init>:

nrfx_err_t nrfx_pwm_init(nrfx_pwm_t const *        p_instance,
                         nrfx_pwm_config_t const * p_config,
                         nrfx_pwm_handler_t        handler,
                         void *                    p_context)
{
    31bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    NRFX_ASSERT(p_config);

    nrfx_err_t err_code;

    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    31c0:	7906      	ldrb	r6, [r0, #4]

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    31c2:	4c3e      	ldr	r4, [pc, #248]	; (32bc <nrfx_pwm_init+0x100>)
{
    31c4:	4605      	mov	r5, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    31c6:	200c      	movs	r0, #12
    31c8:	4370      	muls	r0, r6
    31ca:	1827      	adds	r7, r4, r0
{
    31cc:	b085      	sub	sp, #20
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    31ce:	f897 c008 	ldrb.w	ip, [r7, #8]
    31d2:	f1bc 0f00 	cmp.w	ip, #0
    31d6:	d16f      	bne.n	32b8 <nrfx_pwm_init+0xfc>
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    p_cb->handler = handler;
    31d8:	5022      	str	r2, [r4, r0]
    p_cb->p_context = p_context;
    31da:	607b      	str	r3, [r7, #4]
static void configure_pins(nrfx_pwm_t const *        p_instance,
    31dc:	1e48      	subs	r0, r1, #1
    31de:	466a      	mov	r2, sp
    31e0:	f101 0e03 	add.w	lr, r1, #3
            out_pins[i] = NRF_PWM_PIN_NOT_CONNECTED;
    31e4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    31e8:	f04f 0901 	mov.w	r9, #1
    31ec:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
    31f0:	f04f 0a03 	mov.w	sl, #3
        uint8_t output_pin = p_config->output_pins[i];
    31f4:	f810 cf01 	ldrb.w	ip, [r0, #1]!
        if (output_pin != NRFX_PWM_PIN_NOT_USED)
    31f8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    31fc:	d059      	beq.n	32b2 <nrfx_pwm_init+0xf6>
            out_pins[i]   = output_pin & ~NRFX_PWM_PIN_INVERTED;
    31fe:	f02c 0380 	bic.w	r3, ip, #128	; 0x80
    3202:	6013      	str	r3, [r2, #0]
            if (inverted)
    3204:	fa09 fb03 	lsl.w	fp, r9, r3
    3208:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    320c:	f01c 0f80 	tst.w	ip, #128	; 0x80
    p_reg->OUTSET = set_mask;
    3210:	bf14      	ite	ne
    3212:	f8c7 b508 	strne.w	fp, [r7, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    3216:	f8c7 b50c 	streq.w	fp, [r7, #1292]	; 0x50c
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    321a:	f847 a023 	str.w	sl, [r7, r3, lsl #2]
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
    321e:	4570      	cmp	r0, lr
    3220:	f102 0204 	add.w	r2, r2, #4
    3224:	d1e6      	bne.n	31f4 <nrfx_pwm_init+0x38>
    nrf_pwm_pins_set(p_instance->p_registers, out_pins);
    3226:	6828      	ldr	r0, [r5, #0]
        p_reg->PSEL.OUT[i] = out_pins[i];
    3228:	9b00      	ldr	r3, [sp, #0]
    322a:	f8c0 3560 	str.w	r3, [r0, #1376]	; 0x560
    322e:	9b01      	ldr	r3, [sp, #4]
    3230:	f8c0 3564 	str.w	r3, [r0, #1380]	; 0x564
    3234:	9b02      	ldr	r3, [sp, #8]
    3236:	f8c0 3568 	str.w	r3, [r0, #1384]	; 0x568
    323a:	9b03      	ldr	r3, [sp, #12]
    323c:	f8c0 356c 	str.w	r3, [r0, #1388]	; 0x56c
    p_reg->ENABLE = (PWM_ENABLE_ENABLE_Enabled << PWM_ENABLE_ENABLE_Pos);
    3240:	2301      	movs	r3, #1

    configure_pins(p_instance, p_config);

    nrf_pwm_enable(p_instance->p_registers);
    nrf_pwm_configure(p_instance->p_registers,
    3242:	798a      	ldrb	r2, [r1, #6]
    3244:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
    p_reg->PRESCALER  = base_clock;
    3248:	794f      	ldrb	r7, [r1, #5]
    324a:	890b      	ldrh	r3, [r1, #8]
    324c:	f8c0 750c 	str.w	r7, [r0, #1292]	; 0x50c
    p_reg->MODE       = mode;
    3250:	f8c0 2504 	str.w	r2, [r0, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
    3254:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508

NRF_STATIC_INLINE void nrf_pwm_decoder_set(NRF_PWM_Type *     p_reg,
                                           nrf_pwm_dec_load_t dec_load,
                                           nrf_pwm_dec_step_t dec_step)
{
    p_reg->DECODER = ((uint32_t)dec_load << PWM_DECODER_LOAD_Pos) |
    3258:	894b      	ldrh	r3, [r1, #10]
    325a:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
    p_reg->SHORTS = mask;
    325e:	2300      	movs	r3, #0
    3260:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_pwm_decoder_set(p_instance->p_registers,
        p_config->load_mode, p_config->step_mode);

    nrf_pwm_shorts_set(p_instance->p_registers, 0);
    nrf_pwm_int_set(p_instance->p_registers, 0);
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_LOOPSDONE);
    3264:	f44f 718e 	mov.w	r1, #284	; 0x11c
    p_reg->INTEN = mask;
    3268:	f8c0 3300 	str.w	r3, [r0, #768]	; 0x300
    326c:	f001 fffe 	bl	526c <nrf_pwm_event_clear>
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_SEQEND0);
    3270:	f44f 7188 	mov.w	r1, #272	; 0x110
    3274:	6828      	ldr	r0, [r5, #0]
    3276:	f001 fff9 	bl	526c <nrf_pwm_event_clear>
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_SEQEND1);
    327a:	f44f 718a 	mov.w	r1, #276	; 0x114
    327e:	6828      	ldr	r0, [r5, #0]
    3280:	f001 fff4 	bl	526c <nrf_pwm_event_clear>
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_STOPPED);
    3284:	f44f 7182 	mov.w	r1, #260	; 0x104
    3288:	6828      	ldr	r0, [r5, #0]
    328a:	f001 ffef 	bl	526c <nrf_pwm_event_clear>
    // handler is not used.
#if defined(USE_DMA_ISSUE_WORKAROUND)
    NRFX_IRQ_PRIORITY_SET(DMA_ISSUE_EGU_IRQn, p_config->irq_priority);
    NRFX_IRQ_ENABLE(DMA_ISSUE_EGU_IRQn);
#else
    if (p_cb->handler)
    328e:	230c      	movs	r3, #12
    3290:	4373      	muls	r3, r6
    3292:	58e3      	ldr	r3, [r4, r3]
    3294:	b123      	cbz	r3, 32a0 <nrfx_pwm_init+0xe4>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    3296:	6828      	ldr	r0, [r5, #0]
#endif
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_registers),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_registers));
    3298:	f340 3007 	sbfx	r0, r0, #12, #8
    329c:	f7fe f8c6 	bl	142c <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    32a0:	230c      	movs	r3, #12
    32a2:	fb03 4406 	mla	r4, r3, r6, r4

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    32a6:	4806      	ldr	r0, [pc, #24]	; (32c0 <nrfx_pwm_init+0x104>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    32a8:	2301      	movs	r3, #1
    32aa:	7223      	strb	r3, [r4, #8]
}
    32ac:	b005      	add	sp, #20
    32ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            out_pins[i] = NRF_PWM_PIN_NOT_CONNECTED;
    32b2:	f8c2 8000 	str.w	r8, [r2]
    32b6:	e7b2      	b.n	321e <nrfx_pwm_init+0x62>
        return err_code;
    32b8:	4802      	ldr	r0, [pc, #8]	; (32c4 <nrfx_pwm_init+0x108>)
    32ba:	e7f7      	b.n	32ac <nrfx_pwm_init+0xf0>
    32bc:	200002a8 	.word	0x200002a8
    32c0:	0bad0000 	.word	0x0bad0000
    32c4:	0bad0005 	.word	0x0bad0005

000032c8 <nrfx_pwm_simple_playback>:

uint32_t nrfx_pwm_simple_playback(nrfx_pwm_t const *         p_instance,
                                  nrf_pwm_sequence_t const * p_sequence,
                                  uint16_t                   playback_count,
                                  uint32_t                   flags)
{
    32c8:	b4f0      	push	{r4, r5, r6, r7}
    32ca:	460d      	mov	r5, r1
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    32cc:	7901      	ldrb	r1, [r0, #4]
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
    32ce:	f8d5 c000 	ldr.w	ip, [r5]
    p_reg->SEQ[seq_id].CNT = length;
    32d2:	88af      	ldrh	r7, [r5, #4]
    nrf_pwm_seq_refresh_set(  p_reg, seq_id, p_seq->repeats);
    32d4:	68ae      	ldr	r6, [r5, #8]
    nrf_pwm_seq_end_delay_set(p_reg, seq_id, p_seq->end_delay);
    32d6:	68ed      	ldr	r5, [r5, #12]
{
    32d8:	461c      	mov	r4, r3
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    32da:	4b18      	ldr	r3, [pc, #96]	; (333c <nrfx_pwm_simple_playback+0x74>)
    32dc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    32e0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    NRFX_ASSERT(playback_count > 0);
    NRFX_ASSERT(nrfx_is_in_ram(p_sequence->values.p_raw));

    // To take advantage of the looping mechanism, we need to use both sequences
    // (single sequence can be played back only once).
    nrf_pwm_sequence_set(p_instance->p_registers, 0, p_sequence);
    32e4:	6803      	ldr	r3, [r0, #0]
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
    32e6:	f8c3 c520 	str.w	ip, [r3, #1312]	; 0x520
    p_reg->SEQ[seq_id].CNT = length;
    32ea:	f8c3 7524 	str.w	r7, [r3, #1316]	; 0x524
    p_reg->SEQ[seq_id].REFRESH  = refresh;
    32ee:	f8c3 6528 	str.w	r6, [r3, #1320]	; 0x528
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
    32f2:	f8c3 552c 	str.w	r5, [r3, #1324]	; 0x52c
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
    32f6:	f8c3 c540 	str.w	ip, [r3, #1344]	; 0x540
    p_reg->SEQ[seq_id].CNT = length;
    32fa:	f8c3 7544 	str.w	r7, [r3, #1348]	; 0x544
    p_reg->SEQ[seq_id].REFRESH  = refresh;
    32fe:	f8c3 6548 	str.w	r6, [r3, #1352]	; 0x548
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
    3302:	f8c3 554c 	str.w	r5, [r3, #1356]	; 0x54c
    nrf_pwm_sequence_set(p_instance->p_registers, 1, p_sequence);
    bool odd = (playback_count & 1);
    3306:	f002 0501 	and.w	r5, r2, #1
}

NRF_STATIC_INLINE void nrf_pwm_loop_set(NRF_PWM_Type * p_reg,
                                        uint16_t       loop_count)
{
    p_reg->LOOP = loop_count;
    330a:	eb05 0252 	add.w	r2, r5, r2, lsr #1
    330e:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    nrf_pwm_loop_set(p_instance->p_registers,
        (playback_count / 2) + (odd ? 1 : 0));

    uint32_t shorts_mask;
    if (flags & NRFX_PWM_FLAG_STOP)
    3312:	07e2      	lsls	r2, r4, #31
    3314:	d410      	bmi.n	3338 <nrfx_pwm_simple_playback+0x70>
    {
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
    }
    else if (flags & NRFX_PWM_FLAG_LOOP)
    3316:	f014 0202 	ands.w	r2, r4, #2
    331a:	d003      	beq.n	3324 <nrfx_pwm_simple_playback+0x5c>
    {
        shorts_mask = odd ? NRF_PWM_SHORT_LOOPSDONE_SEQSTART1_MASK
                          : NRF_PWM_SHORT_LOOPSDONE_SEQSTART0_MASK;
    331c:	2d00      	cmp	r5, #0
    331e:	bf14      	ite	ne
    3320:	2208      	movne	r2, #8
    3322:	2204      	moveq	r2, #4
                  __func__,
                  p_sequence->length);
    NRFX_LOG_DEBUG("Sequence data:");
    NRFX_LOG_HEXDUMP_DEBUG((uint8_t *)p_sequence->values.p_raw,
                           p_sequence->length * sizeof(uint16_t));
    return start_playback(p_instance, p_cb, flags,
    3324:	2d00      	cmp	r5, #0
    p_reg->SHORTS = mask;
    3326:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    332a:	b2e2      	uxtb	r2, r4
    332c:	bf14      	ite	ne
    332e:	230c      	movne	r3, #12
    3330:	2308      	moveq	r3, #8
        odd ? NRF_PWM_TASK_SEQSTART1 : NRF_PWM_TASK_SEQSTART0);
}
    3332:	bcf0      	pop	{r4, r5, r6, r7}
    return start_playback(p_instance, p_cb, flags,
    3334:	f001 bfa2 	b.w	527c <start_playback.isra.2>
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
    3338:	2210      	movs	r2, #16
    333a:	e7f3      	b.n	3324 <nrfx_pwm_simple_playback+0x5c>
    333c:	200002a8 	.word	0x200002a8

00003340 <nrfx_pwm_is_stopped>:

    bool ret_val = false;

    // If the event handler is used (interrupts are enabled), the state will
    // be changed in interrupt handler when the STOPPED event occurs.
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    3340:	4b08      	ldr	r3, [pc, #32]	; (3364 <nrfx_pwm_is_stopped+0x24>)
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    3342:	7902      	ldrb	r2, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    3344:	210c      	movs	r1, #12
    3346:	fb01 3202 	mla	r2, r1, r2, r3
    {
        ret_val = true;
    }
    // If interrupts are disabled, we must check the STOPPED event here.
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
    334a:	6801      	ldr	r1, [r0, #0]
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    334c:	7a13      	ldrb	r3, [r2, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    334e:	f8d1 1104 	ldr.w	r1, [r1, #260]	; 0x104
    3352:	b2db      	uxtb	r3, r3
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
    3354:	b919      	cbnz	r1, 335e <nrfx_pwm_is_stopped+0x1e>
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    3356:	1e98      	subs	r0, r3, #2
    3358:	bf18      	it	ne
    335a:	2001      	movne	r0, #1
    335c:	4770      	bx	lr
    {
        p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    335e:	2001      	movs	r0, #1
    3360:	7210      	strb	r0, [r2, #8]
        ret_val = true;
    }

    NRFX_LOG_INFO("%s returned %d.", __func__, ret_val);
    return ret_val;
}
    3362:	4770      	bx	lr
    3364:	200002a8 	.word	0x200002a8

00003368 <z_sys_device_do_config_level>:
		__device_APPLICATION_start,
		/* End marker */
		__device_init_end,
	};

	z_sys_device_level = level;
    3368:	4b0a      	ldr	r3, [pc, #40]	; (3394 <z_sys_device_do_config_level+0x2c>)
{
    336a:	b570      	push	{r4, r5, r6, lr}
	z_sys_device_level = level;
    336c:	7018      	strb	r0, [r3, #0]
	for (info = config_levels[level]; info < config_levels[level+1];
    336e:	4b0a      	ldr	r3, [pc, #40]	; (3398 <z_sys_device_do_config_level+0x30>)
    3370:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    3374:	3001      	adds	r0, #1
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
    3376:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
    3378:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    337c:	42a5      	cmp	r5, r4
    337e:	d800      	bhi.n	3382 <z_sys_device_do_config_level+0x1a>
		} else {
			z_object_init(info);
		}
	}
}
    3380:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
    3382:	6823      	ldr	r3, [r4, #0]
    3384:	4620      	mov	r0, r4
    3386:	685b      	ldr	r3, [r3, #4]
    3388:	4798      	blx	r3
		if (retval != 0) {
    338a:	b100      	cbz	r0, 338e <z_sys_device_do_config_level+0x26>
			info->driver_api = NULL;
    338c:	6066      	str	r6, [r4, #4]
								info++) {
    338e:	340c      	adds	r4, #12
    3390:	e7f4      	b.n	337c <z_sys_device_do_config_level+0x14>
    3392:	bf00      	nop
    3394:	200003d3 	.word	0x200003d3
    3398:	00005918 	.word	0x00005918

0000339c <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
    339c:	4b10      	ldr	r3, [pc, #64]	; (33e0 <z_impl_device_get_binding+0x44>)
{
    339e:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
    33a0:	4c10      	ldr	r4, [pc, #64]	; (33e4 <z_impl_device_get_binding+0x48>)
{
    33a2:	4605      	mov	r5, r0
    33a4:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
    33a6:	429c      	cmp	r4, r3
    33a8:	d104      	bne.n	33b4 <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
    33aa:	4c0e      	ldr	r4, [pc, #56]	; (33e4 <z_impl_device_get_binding+0x48>)
    33ac:	42b4      	cmp	r4, r6
    33ae:	d109      	bne.n	33c4 <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
    33b0:	2400      	movs	r4, #0
    33b2:	e012      	b.n	33da <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
    33b4:	6862      	ldr	r2, [r4, #4]
    33b6:	b11a      	cbz	r2, 33c0 <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
    33b8:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
    33ba:	6812      	ldr	r2, [r2, #0]
    33bc:	42aa      	cmp	r2, r5
    33be:	d00c      	beq.n	33da <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
    33c0:	340c      	adds	r4, #12
    33c2:	e7f0      	b.n	33a6 <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
    33c4:	6863      	ldr	r3, [r4, #4]
    33c6:	b90b      	cbnz	r3, 33cc <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
    33c8:	340c      	adds	r4, #12
    33ca:	e7ef      	b.n	33ac <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
    33cc:	6823      	ldr	r3, [r4, #0]
    33ce:	4628      	mov	r0, r5
    33d0:	6819      	ldr	r1, [r3, #0]
    33d2:	f001 fd2e 	bl	4e32 <strcmp>
    33d6:	2800      	cmp	r0, #0
    33d8:	d1f6      	bne.n	33c8 <z_impl_device_get_binding+0x2c>
}
    33da:	4620      	mov	r0, r4
    33dc:	bd70      	pop	{r4, r5, r6, pc}
    33de:	bf00      	nop
    33e0:	200025a0 	.word	0x200025a0
    33e4:	20002510 	.word	0x20002510

000033e8 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
    33e8:	b510      	push	{r4, lr}
    33ea:	4604      	mov	r4, r0
	z_impl_log_panic();
    33ec:	f7fd fbbe 	bl	b6c <z_impl_log_panic>
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
    33f0:	2301      	movs	r3, #1
    33f2:	f04f 0100 	mov.w	r1, #0
    33f6:	f363 0107 	bfi	r1, r3, #0, #8
    33fa:	4a06      	ldr	r2, [pc, #24]	; (3414 <k_sys_fatal_error_handler+0x2c>)
    33fc:	4b06      	ldr	r3, [pc, #24]	; (3418 <k_sys_fatal_error_handler+0x30>)
    33fe:	4807      	ldr	r0, [pc, #28]	; (341c <k_sys_fatal_error_handler+0x34>)
    3400:	1a9b      	subs	r3, r3, r2
    3402:	08db      	lsrs	r3, r3, #3
    3404:	f363 118f 	bfi	r1, r3, #6, #10
    3408:	f001 f91f 	bl	464a <log_0>
	arch_system_halt(reason);
    340c:	4620      	mov	r0, r4
    340e:	f001 ff6e 	bl	52ee <arch_system_halt>
    3412:	bf00      	nop
    3414:	000057d0 	.word	0x000057d0
    3418:	000057e8 	.word	0x000057e8
    341c:	000060c5 	.word	0x000060c5

00003420 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    3420:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    3424:	4605      	mov	r5, r0
    3426:	4688      	mov	r8, r1
	return z_impl_k_current_get();
    3428:	f000 fc38 	bl	3c9c <z_impl_k_current_get>
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    342c:	2201      	movs	r2, #1
    342e:	f04f 0300 	mov.w	r3, #0
    3432:	f362 0307 	bfi	r3, r2, #0, #8
    3436:	4c24      	ldr	r4, [pc, #144]	; (34c8 <z_fatal_error+0xa8>)
    3438:	4a24      	ldr	r2, [pc, #144]	; (34cc <z_fatal_error+0xac>)
    343a:	2d04      	cmp	r5, #4
    343c:	eba4 0402 	sub.w	r4, r4, r2
    3440:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    3444:	bf96      	itet	ls
    3446:	4a22      	ldrls	r2, [pc, #136]	; (34d0 <z_fatal_error+0xb0>)
    3448:	4a22      	ldrhi	r2, [pc, #136]	; (34d4 <z_fatal_error+0xb4>)
    344a:	f852 2025 	ldrls.w	r2, [r2, r5, lsl #2]
    344e:	f364 138f 	bfi	r3, r4, #6, #10
    3452:	f8ad 3000 	strh.w	r3, [sp]
    3456:	4606      	mov	r6, r0
    3458:	2300      	movs	r3, #0
    345a:	4629      	mov	r1, r5
    345c:	481e      	ldr	r0, [pc, #120]	; (34d8 <z_fatal_error+0xb8>)
    345e:	f001 f92d 	bl	46bc <log_3>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    3462:	f8d8 301c 	ldr.w	r3, [r8, #28]
    3466:	f3c3 0308 	ubfx	r3, r3, #0, #9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if (arch_is_in_nested_exception(esf)) {
    346a:	b14b      	cbz	r3, 3480 <z_fatal_error+0x60>
		LOG_ERR("Fault during interrupt handling\n");
    346c:	f04f 0100 	mov.w	r1, #0
    3470:	2301      	movs	r3, #1
    3472:	f363 0107 	bfi	r1, r3, #0, #8
    3476:	f364 118f 	bfi	r1, r4, #6, #10
    347a:	4818      	ldr	r0, [pc, #96]	; (34dc <z_fatal_error+0xbc>)
    347c:	f001 f8e5 	bl	464a <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    3480:	f04f 0700 	mov.w	r7, #0
    3484:	2301      	movs	r3, #1
    3486:	f363 0707 	bfi	r7, r3, #0, #8
	const char *thread_name = k_thread_name_get(thread);
    348a:	4630      	mov	r0, r6
	LOG_ERR("Current thread: %p (%s)", thread,
    348c:	f364 178f 	bfi	r7, r4, #6, #10
	const char *thread_name = k_thread_name_get(thread);
    3490:	f002 f80d 	bl	54ae <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
    3494:	b1b0      	cbz	r0, 34c4 <z_fatal_error+0xa4>
    3496:	7802      	ldrb	r2, [r0, #0]
		thread_name = "unknown";
    3498:	4b11      	ldr	r3, [pc, #68]	; (34e0 <z_fatal_error+0xc0>)
    349a:	2a00      	cmp	r2, #0
    349c:	bf08      	it	eq
    349e:	4618      	moveq	r0, r3
	LOG_ERR("Current thread: %p (%s)", thread,
    34a0:	f7fd f9de 	bl	860 <log_strdup>
    34a4:	463b      	mov	r3, r7
    34a6:	4602      	mov	r2, r0
    34a8:	4631      	mov	r1, r6
    34aa:	480e      	ldr	r0, [pc, #56]	; (34e4 <z_fatal_error+0xc4>)
    34ac:	f001 f8ee 	bl	468c <log_2>
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
    34b0:	4641      	mov	r1, r8
    34b2:	4628      	mov	r0, r5
    34b4:	f7ff ff98 	bl	33e8 <k_sys_fatal_error_handler>
	z_impl_k_thread_abort(thread);
    34b8:	4630      	mov	r0, r6
			}
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	k_thread_abort(thread);
}
    34ba:	b002      	add	sp, #8
    34bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    34c0:	f7fe bb72 	b.w	1ba8 <z_impl_k_thread_abort>
		thread_name = "unknown";
    34c4:	4806      	ldr	r0, [pc, #24]	; (34e0 <z_fatal_error+0xc0>)
    34c6:	e7eb      	b.n	34a0 <z_fatal_error+0x80>
    34c8:	000057e8 	.word	0x000057e8
    34cc:	000057d0 	.word	0x000057d0
    34d0:	00005930 	.word	0x00005930
    34d4:	0000611e 	.word	0x0000611e
    34d8:	00006134 	.word	0x00006134
    34dc:	0000615c 	.word	0x0000615c
    34e0:	0000612c 	.word	0x0000612c
    34e4:	0000617d 	.word	0x0000617d

000034e8 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    34e8:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    34ea:	4d0b      	ldr	r5, [pc, #44]	; (3518 <idle+0x30>)
	__asm__ volatile(
    34ec:	f04f 0220 	mov.w	r2, #32
    34f0:	f3ef 8311 	mrs	r3, BASEPRI
    34f4:	f382 8811 	msr	BASEPRI, r2
    34f8:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
    34fc:	f002 f81d 	bl	553a <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    3500:	2101      	movs	r1, #1
    3502:	2802      	cmp	r0, #2
	s32_t ticks = z_get_next_timeout_expiry();
    3504:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    3506:	bfd8      	it	le
    3508:	4608      	movle	r0, r1
    350a:	f002 f826 	bl	555a <z_set_timeout_expiry>
	_kernel.idle = ticks;
    350e:	622c      	str	r4, [r5, #32]
 * @return N/A
 * @req K-CPU-IDLE-001
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    3510:	f7fd fffa 	bl	1508 <arch_cpu_idle>
    3514:	e7ea      	b.n	34ec <idle+0x4>
    3516:	bf00      	nop
    3518:	2000038c 	.word	0x2000038c

0000351c <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    351c:	4802      	ldr	r0, [pc, #8]	; (3528 <z_bss_zero+0xc>)
    351e:	4a03      	ldr	r2, [pc, #12]	; (352c <z_bss_zero+0x10>)
    3520:	2100      	movs	r1, #0
    3522:	1a12      	subs	r2, r2, r0
    3524:	f001 bcbb 	b.w	4e9e <memset>
    3528:	20000000 	.word	0x20000000
    352c:	200003d4 	.word	0x200003d4

00003530 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    3530:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    3532:	4806      	ldr	r0, [pc, #24]	; (354c <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    3534:	4a06      	ldr	r2, [pc, #24]	; (3550 <z_data_copy+0x20>)
    3536:	4907      	ldr	r1, [pc, #28]	; (3554 <z_data_copy+0x24>)
    3538:	1a12      	subs	r2, r2, r0
    353a:	f001 fc86 	bl	4e4a <memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    353e:	4a06      	ldr	r2, [pc, #24]	; (3558 <z_data_copy+0x28>)
    3540:	4906      	ldr	r1, [pc, #24]	; (355c <z_data_copy+0x2c>)
    3542:	4807      	ldr	r0, [pc, #28]	; (3560 <z_data_copy+0x30>)
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    3544:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    3548:	f001 bc7f 	b.w	4e4a <memcpy>
    354c:	200024e0 	.word	0x200024e0
    3550:	2000268c 	.word	0x2000268c
    3554:	000061ec 	.word	0x000061ec
    3558:	00000000 	.word	0x00000000
    355c:	000061ec 	.word	0x000061ec
    3560:	20000000 	.word	0x20000000

00003564 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    3564:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
    3566:	2002      	movs	r0, #2
    3568:	f7ff fefe 	bl	3368 <z_sys_device_do_config_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    356c:	4a08      	ldr	r2, [pc, #32]	; (3590 <bg_thread_main+0x2c>)
    356e:	4909      	ldr	r1, [pc, #36]	; (3594 <bg_thread_main+0x30>)
    3570:	4809      	ldr	r0, [pc, #36]	; (3598 <bg_thread_main+0x34>)
    3572:	f001 f839 	bl	45e8 <printk>
			KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
    3576:	2003      	movs	r0, #3
    3578:	f7ff fef6 	bl	3368 <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
    357c:	f000 fc8e 	bl	3e9c <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    3580:	f7fc ffe8 	bl	554 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    3584:	4a05      	ldr	r2, [pc, #20]	; (359c <bg_thread_main+0x38>)
    3586:	7b13      	ldrb	r3, [r2, #12]
    3588:	f023 0301 	bic.w	r3, r3, #1
    358c:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    358e:	bd08      	pop	{r3, pc}
    3590:	00005b06 	.word	0x00005b06
    3594:	00006195 	.word	0x00006195
    3598:	000061b5 	.word	0x000061b5
    359c:	20000320 	.word	0x20000320

000035a0 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    35a0:	b580      	push	{r7, lr}
    35a2:	b0a2      	sub	sp, #136	; 0x88
#endif	/* CONFIG_STACK_CANARIES */

	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
    35a4:	f7fd f8b4 	bl	710 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
    35a8:	4b35      	ldr	r3, [pc, #212]	; (3680 <z_cstart+0xe0>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    35aa:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    35ae:	4c35      	ldr	r4, [pc, #212]	; (3684 <z_cstart+0xe4>)
	_kernel.ready_q.cache = &z_main_thread;
    35b0:	4e35      	ldr	r6, [pc, #212]	; (3688 <z_cstart+0xe8>)
    35b2:	6963      	ldr	r3, [r4, #20]
    35b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    35b8:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    35ba:	2500      	movs	r5, #0
    35bc:	23e0      	movs	r3, #224	; 0xe0
    35be:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    35c2:	77e5      	strb	r5, [r4, #31]
    35c4:	7625      	strb	r5, [r4, #24]
    35c6:	7665      	strb	r5, [r4, #25]
    35c8:	76a5      	strb	r5, [r4, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    35ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
    35cc:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    35d0:	6263      	str	r3, [r4, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    35d2:	f7fe fad5 	bl	1b80 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    35d6:	f7fd ff91 	bl	14fc <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    35da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    35de:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    35e0:	62e3      	str	r3, [r4, #44]	; 0x2c

	/* perform any architecture-specific initialization */
	arch_kernel_init();

#ifdef CONFIG_MULTITHREADING
	struct k_thread dummy_thread = {
    35e2:	ab07      	add	r3, sp, #28
    35e4:	226c      	movs	r2, #108	; 0x6c
    35e6:	4629      	mov	r1, r5
    35e8:	4618      	mov	r0, r3
    35ea:	f001 fc58 	bl	4e9e <memset>
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
    35ee:	4c27      	ldr	r4, [pc, #156]	; (368c <z_cstart+0xec>)
	struct k_thread dummy_thread = {
    35f0:	2701      	movs	r7, #1
	_current = &dummy_thread;
    35f2:	60a0      	str	r0, [r4, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    35f4:	4628      	mov	r0, r5
	struct k_thread dummy_thread = {
    35f6:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    35fa:	f7ff feb5 	bl	3368 <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    35fe:	4638      	mov	r0, r7
    3600:	f7ff feb2 	bl	3368 <z_sys_device_do_config_level>
	z_sched_init();
    3604:	f000 faca 	bl	3b9c <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
    3608:	4b21      	ldr	r3, [pc, #132]	; (3690 <z_cstart+0xf0>)
	_kernel.ready_q.cache = &z_main_thread;
    360a:	6266      	str	r6, [r4, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
    360c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3610:	e9cd 7304 	strd	r7, r3, [sp, #16]
    3614:	e9cd 5502 	strd	r5, r5, [sp, #8]
    3618:	4b1e      	ldr	r3, [pc, #120]	; (3694 <z_cstart+0xf4>)
    361a:	491f      	ldr	r1, [pc, #124]	; (3698 <z_cstart+0xf8>)
    361c:	e9cd 5500 	strd	r5, r5, [sp]
    3620:	4630      	mov	r0, r6
    3622:	f000 fbaf 	bl	3d84 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3626:	7b73      	ldrb	r3, [r6, #13]
    3628:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    362c:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3630:	7372      	strb	r2, [r6, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    3632:	d104      	bne.n	363e <z_cstart+0x9e>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
    3634:	69b3      	ldr	r3, [r6, #24]
    3636:	b913      	cbnz	r3, 363e <z_cstart+0x9e>
		z_add_thread_to_ready_q(thread);
    3638:	4630      	mov	r0, r6
    363a:	f000 f955 	bl	38e8 <z_add_thread_to_ready_q>
	z_setup_new_thread(thr, stack,
    363e:	4b17      	ldr	r3, [pc, #92]	; (369c <z_cstart+0xfc>)
    3640:	4d17      	ldr	r5, [pc, #92]	; (36a0 <z_cstart+0x100>)
    3642:	9305      	str	r3, [sp, #20]
    3644:	2201      	movs	r2, #1
    3646:	230f      	movs	r3, #15
    3648:	e9cd 3203 	strd	r3, r2, [sp, #12]
    364c:	2300      	movs	r3, #0
    364e:	e9cd 3301 	strd	r3, r3, [sp, #4]
    3652:	9300      	str	r3, [sp, #0]
    3654:	f44f 72a0 	mov.w	r2, #320	; 0x140
    3658:	4b12      	ldr	r3, [pc, #72]	; (36a4 <z_cstart+0x104>)
    365a:	4913      	ldr	r1, [pc, #76]	; (36a8 <z_cstart+0x108>)
    365c:	4628      	mov	r0, r5
    365e:	f000 fb91 	bl	3d84 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3662:	7b6b      	ldrb	r3, [r5, #13]
	_kernel.cpus[0].idle_thread = &z_idle_thread;
    3664:	60e5      	str	r5, [r4, #12]
    3666:	f023 0304 	bic.w	r3, r3, #4
    366a:	736b      	strb	r3, [r5, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    366c:	4b0f      	ldr	r3, [pc, #60]	; (36ac <z_cstart+0x10c>)
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
    366e:	490a      	ldr	r1, [pc, #40]	; (3698 <z_cstart+0xf8>)
    3670:	4805      	ldr	r0, [pc, #20]	; (3688 <z_cstart+0xe8>)
	list->tail = (sys_dnode_t *)list;
    3672:	e9c4 3306 	strd	r3, r3, [r4, #24]
    3676:	f44f 6280 	mov.w	r2, #1024	; 0x400
    367a:	4b06      	ldr	r3, [pc, #24]	; (3694 <z_cstart+0xf4>)
    367c:	f7fd ff20 	bl	14c0 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    3680:	20002018 	.word	0x20002018
    3684:	e000ed00 	.word	0xe000ed00
    3688:	20000320 	.word	0x20000320
    368c:	2000038c 	.word	0x2000038c
    3690:	000061df 	.word	0x000061df
    3694:	00003565 	.word	0x00003565
    3698:	200012d8 	.word	0x200012d8
    369c:	000061e4 	.word	0x000061e4
    36a0:	200002b4 	.word	0x200002b4
    36a4:	000034e9 	.word	0x000034e9
    36a8:	200016d8 	.word	0x200016d8
    36ac:	200003a4 	.word	0x200003a4

000036b0 <init_mem_slab_module>:
 */
static int init_mem_slab_module(struct device *dev)
{
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    36b0:	4b0b      	ldr	r3, [pc, #44]	; (36e0 <init_mem_slab_module+0x30>)
    36b2:	480c      	ldr	r0, [pc, #48]	; (36e4 <init_mem_slab_module+0x34>)
{
    36b4:	b570      	push	{r4, r5, r6, lr}
	slab->free_list = NULL;
    36b6:	2400      	movs	r4, #0
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    36b8:	4283      	cmp	r3, r0
    36ba:	d301      	bcc.n	36c0 <init_mem_slab_module+0x10>
		create_free_list(slab);
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}
	return 0;
}
    36bc:	2000      	movs	r0, #0
    36be:	bd70      	pop	{r4, r5, r6, pc}
	p = slab->buffer;
    36c0:	691a      	ldr	r2, [r3, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
    36c2:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    36c4:	615c      	str	r4, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    36c6:	2100      	movs	r1, #0
    36c8:	42a9      	cmp	r1, r5
    36ca:	d101      	bne.n	36d0 <init_mem_slab_module+0x20>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    36cc:	331c      	adds	r3, #28
    36ce:	e7f3      	b.n	36b8 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
    36d0:	695e      	ldr	r6, [r3, #20]
    36d2:	6016      	str	r6, [r2, #0]
		p += slab->block_size;
    36d4:	68de      	ldr	r6, [r3, #12]
		slab->free_list = p;
    36d6:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    36d8:	3101      	adds	r1, #1
		p += slab->block_size;
    36da:	4432      	add	r2, r6
    36dc:	e7f4      	b.n	36c8 <init_mem_slab_module+0x18>
    36de:	bf00      	nop
    36e0:	20002630 	.word	0x20002630
    36e4:	20002630 	.word	0x20002630

000036e8 <k_mem_slab_alloc>:

	z_object_init(slab);
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
    36e8:	b510      	push	{r4, lr}
    36ea:	4613      	mov	r3, r2
    36ec:	460c      	mov	r4, r1
    36ee:	f04f 0220 	mov.w	r2, #32
    36f2:	f3ef 8111 	mrs	r1, BASEPRI
    36f6:	f382 8811 	msr	BASEPRI, r2
    36fa:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
    36fe:	6942      	ldr	r2, [r0, #20]
    3700:	b15a      	cbz	r2, 371a <k_mem_slab_alloc+0x32>
		/* take a free block */
		*mem = slab->free_list;
    3702:	6022      	str	r2, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    3704:	6813      	ldr	r3, [r2, #0]
    3706:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    3708:	6983      	ldr	r3, [r0, #24]
    370a:	3301      	adds	r3, #1
    370c:	6183      	str	r3, [r0, #24]
		result = 0;
    370e:	2000      	movs	r0, #0
	__asm__ volatile(
    3710:	f381 8811 	msr	BASEPRI, r1
    3714:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
    3718:	e00d      	b.n	3736 <k_mem_slab_alloc+0x4e>
	} else if (timeout == K_NO_WAIT) {
    371a:	b91b      	cbnz	r3, 3724 <k_mem_slab_alloc+0x3c>
		*mem = NULL;
    371c:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    371e:	f06f 000b 	mvn.w	r0, #11
    3722:	e7f5      	b.n	3710 <k_mem_slab_alloc+0x28>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
    3724:	4602      	mov	r2, r0
    3726:	4804      	ldr	r0, [pc, #16]	; (3738 <k_mem_slab_alloc+0x50>)
    3728:	f000 f9f6 	bl	3b18 <z_pend_curr>
		if (result == 0) {
    372c:	b918      	cbnz	r0, 3736 <k_mem_slab_alloc+0x4e>
			*mem = _current->base.swap_data;
    372e:	4b03      	ldr	r3, [pc, #12]	; (373c <k_mem_slab_alloc+0x54>)
    3730:	689b      	ldr	r3, [r3, #8]
    3732:	695b      	ldr	r3, [r3, #20]
    3734:	6023      	str	r3, [r4, #0]
}
    3736:	bd10      	pop	{r4, pc}
    3738:	200003d4 	.word	0x200003d4
    373c:	2000038c 	.word	0x2000038c

00003740 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    3740:	b570      	push	{r4, r5, r6, lr}
    3742:	4604      	mov	r4, r0
    3744:	460d      	mov	r5, r1
	__asm__ volatile(
    3746:	f04f 0320 	mov.w	r3, #32
    374a:	f3ef 8611 	mrs	r6, BASEPRI
    374e:	f383 8811 	msr	BASEPRI, r3
    3752:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    3756:	f001 fe71 	bl	543c <z_unpend_first_thread>

	if (pending_thread != NULL) {
    375a:	b180      	cbz	r0, 377e <k_mem_slab_free+0x3e>
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    375c:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    375e:	6142      	str	r2, [r0, #20]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    3760:	7b42      	ldrb	r2, [r0, #13]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    3762:	2100      	movs	r1, #0
    3764:	06d2      	lsls	r2, r2, #27
    3766:	6681      	str	r1, [r0, #104]	; 0x68
    3768:	d103      	bne.n	3772 <k_mem_slab_free+0x32>
	if (z_is_thread_ready(thread)) {
    376a:	6983      	ldr	r3, [r0, #24]
    376c:	b90b      	cbnz	r3, 3772 <k_mem_slab_free+0x32>
		z_add_thread_to_ready_q(thread);
    376e:	f000 f8bb 	bl	38e8 <z_add_thread_to_ready_q>
		z_ready_thread(pending_thread);
		z_reschedule(&lock, key);
    3772:	4631      	mov	r1, r6
    3774:	4808      	ldr	r0, [pc, #32]	; (3798 <k_mem_slab_free+0x58>)
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
    3776:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
    377a:	f001 be07 	b.w	538c <z_reschedule>
		**(char ***)mem = slab->free_list;
    377e:	682b      	ldr	r3, [r5, #0]
    3780:	6962      	ldr	r2, [r4, #20]
    3782:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
    3784:	682b      	ldr	r3, [r5, #0]
    3786:	6163      	str	r3, [r4, #20]
		slab->num_used--;
    3788:	69a3      	ldr	r3, [r4, #24]
    378a:	3b01      	subs	r3, #1
    378c:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    378e:	f386 8811 	msr	BASEPRI, r6
    3792:	f3bf 8f6f 	isb	sy
}
    3796:	bd70      	pop	{r4, r5, r6, pc}
    3798:	200003d4 	.word	0x200003d4

0000379c <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    379c:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    379e:	4c08      	ldr	r4, [pc, #32]	; (37c0 <z_reset_time_slice+0x24>)
    37a0:	6823      	ldr	r3, [r4, #0]
    37a2:	b15b      	cbz	r3, 37bc <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    37a4:	f7fd fdac 	bl	1300 <z_clock_elapsed>
    37a8:	6823      	ldr	r3, [r4, #0]
    37aa:	4a06      	ldr	r2, [pc, #24]	; (37c4 <z_reset_time_slice+0x28>)
    37ac:	4418      	add	r0, r3
    37ae:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    37b0:	2100      	movs	r1, #0
    37b2:	4618      	mov	r0, r3
	}
}
    37b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
    37b8:	f001 becf 	b.w	555a <z_set_timeout_expiry>
}
    37bc:	bd10      	pop	{r4, pc}
    37be:	bf00      	nop
    37c0:	200003c4 	.word	0x200003c4
    37c4:	2000038c 	.word	0x2000038c

000037c8 <k_sched_time_slice_set>:

void k_sched_time_slice_set(s32_t slice, int prio)
{
    37c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    37ca:	460d      	mov	r5, r1
	__asm__ volatile(
    37cc:	f04f 0320 	mov.w	r3, #32
    37d0:	f3ef 8411 	mrs	r4, BASEPRI
    37d4:	f383 8811 	msr	BASEPRI, r3
    37d8:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    37dc:	4b0d      	ldr	r3, [pc, #52]	; (3814 <k_sched_time_slice_set+0x4c>)
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (u32_t)((t * to_hz + off) / from_hz);
    37de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    37e2:	f240 36e7 	movw	r6, #999	; 0x3e7
    37e6:	2700      	movs	r7, #0
    37e8:	fbe1 6700 	umlal	r6, r7, r1, r0
    37ec:	2200      	movs	r2, #0
    37ee:	611a      	str	r2, [r3, #16]
    37f0:	4630      	mov	r0, r6
    37f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    37f6:	2300      	movs	r3, #0
    37f8:	4639      	mov	r1, r7
    37fa:	f7fc fc6f 	bl	dc <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    37fe:	4b06      	ldr	r3, [pc, #24]	; (3818 <k_sched_time_slice_set+0x50>)
    3800:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    3802:	4b06      	ldr	r3, [pc, #24]	; (381c <k_sched_time_slice_set+0x54>)
    3804:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    3806:	f7ff ffc9 	bl	379c <z_reset_time_slice>
	__asm__ volatile(
    380a:	f384 8811 	msr	BASEPRI, r4
    380e:	f3bf 8f6f 	isb	sy
	}
}
    3812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3814:	2000038c 	.word	0x2000038c
    3818:	200003c4 	.word	0x200003c4
    381c:	200003c0 	.word	0x200003c0

00003820 <k_sched_lock>:
	__asm__ volatile(
    3820:	f04f 0320 	mov.w	r3, #32
    3824:	f3ef 8111 	mrs	r1, BASEPRI
    3828:	f383 8811 	msr	BASEPRI, r3
    382c:	f3bf 8f6f 	isb	sy
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
    3830:	4b04      	ldr	r3, [pc, #16]	; (3844 <k_sched_lock+0x24>)
    3832:	689a      	ldr	r2, [r3, #8]
    3834:	7bd3      	ldrb	r3, [r2, #15]
    3836:	3b01      	subs	r3, #1
    3838:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    383a:	f381 8811 	msr	BASEPRI, r1
    383e:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
    3842:	4770      	bx	lr
    3844:	2000038c 	.word	0x2000038c

00003848 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    3848:	4b09      	ldr	r3, [pc, #36]	; (3870 <z_priq_dumb_remove+0x28>)
    384a:	f103 0228 	add.w	r2, r3, #40	; 0x28
    384e:	4282      	cmp	r2, r0
    3850:	d105      	bne.n	385e <z_priq_dumb_remove+0x16>
    3852:	689b      	ldr	r3, [r3, #8]
    3854:	428b      	cmp	r3, r1
    3856:	d102      	bne.n	385e <z_priq_dumb_remove+0x16>
    3858:	7b4b      	ldrb	r3, [r1, #13]
    385a:	06db      	lsls	r3, r3, #27
    385c:	d106      	bne.n	386c <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    385e:	e9d1 3200 	ldrd	r3, r2, [r1]
    3862:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    3864:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    3866:	2300      	movs	r3, #0
	node->prev = NULL;
    3868:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    386c:	4770      	bx	lr
    386e:	bf00      	nop
    3870:	2000038c 	.word	0x2000038c

00003874 <update_cache>:
{
    3874:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
    3876:	4c0d      	ldr	r4, [pc, #52]	; (38ac <update_cache+0x38>)
{
    3878:	4602      	mov	r2, r0
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
    387a:	f104 0028 	add.w	r0, r4, #40	; 0x28
    387e:	f001 fda6 	bl	53ce <z_priq_dumb_best>
	return th ? th : _current_cpu->idle_thread;
    3882:	4605      	mov	r5, r0
    3884:	b900      	cbnz	r0, 3888 <update_cache+0x14>
    3886:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
    3888:	68a3      	ldr	r3, [r4, #8]
    388a:	b94a      	cbnz	r2, 38a0 <update_cache+0x2c>
	if (z_is_thread_prevented_from_running(_current)) {
    388c:	7b5a      	ldrb	r2, [r3, #13]
    388e:	06d2      	lsls	r2, r2, #27
    3890:	d106      	bne.n	38a0 <update_cache+0x2c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    3892:	69aa      	ldr	r2, [r5, #24]
    3894:	b922      	cbnz	r2, 38a0 <update_cache+0x2c>
	if (is_preempt(_current) || is_metairq(th)) {
    3896:	89da      	ldrh	r2, [r3, #14]
    3898:	2a7f      	cmp	r2, #127	; 0x7f
    389a:	d901      	bls.n	38a0 <update_cache+0x2c>
		_kernel.ready_q.cache = _current;
    389c:	6263      	str	r3, [r4, #36]	; 0x24
}
    389e:	bd38      	pop	{r3, r4, r5, pc}
		if (th != _current) {
    38a0:	429d      	cmp	r5, r3
    38a2:	d001      	beq.n	38a8 <update_cache+0x34>
			z_reset_time_slice();
    38a4:	f7ff ff7a 	bl	379c <z_reset_time_slice>
		_kernel.ready_q.cache = th;
    38a8:	6265      	str	r5, [r4, #36]	; 0x24
}
    38aa:	e7f8      	b.n	389e <update_cache+0x2a>
    38ac:	2000038c 	.word	0x2000038c

000038b0 <k_sched_unlock>:
{
    38b0:	b510      	push	{r4, lr}
	__asm__ volatile(
    38b2:	f04f 0320 	mov.w	r3, #32
    38b6:	f3ef 8411 	mrs	r4, BASEPRI
    38ba:	f383 8811 	msr	BASEPRI, r3
    38be:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    38c2:	4b08      	ldr	r3, [pc, #32]	; (38e4 <k_sched_unlock+0x34>)
    38c4:	689a      	ldr	r2, [r3, #8]
    38c6:	7bd3      	ldrb	r3, [r2, #15]
    38c8:	3301      	adds	r3, #1
    38ca:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    38cc:	2000      	movs	r0, #0
    38ce:	f7ff ffd1 	bl	3874 <update_cache>
	__asm__ volatile(
    38d2:	f384 8811 	msr	BASEPRI, r4
    38d6:	f3bf 8f6f 	isb	sy
}
    38da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    38de:	f001 bd6c 	b.w	53ba <z_reschedule_unlocked>
    38e2:	bf00      	nop
    38e4:	2000038c 	.word	0x2000038c

000038e8 <z_add_thread_to_ready_q>:
{
    38e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    38ea:	f04f 0320 	mov.w	r3, #32
    38ee:	f3ef 8411 	mrs	r4, BASEPRI
    38f2:	f383 8811 	msr	BASEPRI, r3
    38f6:	f3bf 8f6f 	isb	sy
	return list->head == list;
    38fa:	4a15      	ldr	r2, [pc, #84]	; (3950 <z_add_thread_to_ready_q+0x68>)
    38fc:	4611      	mov	r1, r2
    38fe:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3902:	428b      	cmp	r3, r1
    3904:	d01d      	beq.n	3942 <z_add_thread_to_ready_q+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3906:	b1e3      	cbz	r3, 3942 <z_add_thread_to_ready_q+0x5a>
    3908:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
    390a:	f990 500e 	ldrsb.w	r5, [r0, #14]
    390e:	f993 700e 	ldrsb.w	r7, [r3, #14]
    3912:	42af      	cmp	r7, r5
    3914:	dd10      	ble.n	3938 <z_add_thread_to_ready_q+0x50>
	node->prev = successor->prev;
    3916:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    3918:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
    391c:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    391e:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
    3920:	7b43      	ldrb	r3, [r0, #13]
    3922:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3926:	7343      	strb	r3, [r0, #13]
		update_cache(0);
    3928:	2000      	movs	r0, #0
    392a:	f7ff ffa3 	bl	3874 <update_cache>
	__asm__ volatile(
    392e:	f384 8811 	msr	BASEPRI, r4
    3932:	f3bf 8f6f 	isb	sy
}
    3936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    3938:	42b3      	cmp	r3, r6
    393a:	d002      	beq.n	3942 <z_add_thread_to_ready_q+0x5a>
    393c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    393e:	2b00      	cmp	r3, #0
    3940:	d1e5      	bne.n	390e <z_add_thread_to_ready_q+0x26>
	node->prev = list->tail;
    3942:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    3944:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
    3946:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
    3948:	6001      	str	r1, [r0, #0]
	list->tail->next = node;
    394a:	6018      	str	r0, [r3, #0]
	list->tail = node;
    394c:	62d0      	str	r0, [r2, #44]	; 0x2c
    394e:	e7e7      	b.n	3920 <z_add_thread_to_ready_q+0x38>
    3950:	2000038c 	.word	0x2000038c

00003954 <z_move_thread_to_end_of_prio_q>:
{
    3954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3956:	4604      	mov	r4, r0
	__asm__ volatile(
    3958:	f04f 0320 	mov.w	r3, #32
    395c:	f3ef 8511 	mrs	r5, BASEPRI
    3960:	f383 8811 	msr	BASEPRI, r3
    3964:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    3968:	7b43      	ldrb	r3, [r0, #13]
    396a:	065a      	lsls	r2, r3, #25
    396c:	d503      	bpl.n	3976 <z_move_thread_to_end_of_prio_q+0x22>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    396e:	4601      	mov	r1, r0
    3970:	4817      	ldr	r0, [pc, #92]	; (39d0 <z_move_thread_to_end_of_prio_q+0x7c>)
    3972:	f7ff ff69 	bl	3848 <z_priq_dumb_remove>
	return list->head == list;
    3976:	4a17      	ldr	r2, [pc, #92]	; (39d4 <z_move_thread_to_end_of_prio_q+0x80>)
    3978:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
    397c:	f102 0128 	add.w	r1, r2, #40	; 0x28
    3980:	428b      	cmp	r3, r1
    3982:	d01f      	beq.n	39c4 <z_move_thread_to_end_of_prio_q+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3984:	b1f3      	cbz	r3, 39c4 <z_move_thread_to_end_of_prio_q+0x70>
	if (t1->base.prio < t2->base.prio) {
    3986:	f994 600e 	ldrsb.w	r6, [r4, #14]
    398a:	f993 700e 	ldrsb.w	r7, [r3, #14]
    398e:	42b7      	cmp	r7, r6
    3990:	dd13      	ble.n	39ba <z_move_thread_to_end_of_prio_q+0x66>
	node->prev = successor->prev;
    3992:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    3994:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
    3998:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    399a:	605c      	str	r4, [r3, #4]
    399c:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
    399e:	6890      	ldr	r0, [r2, #8]
    39a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    39a4:	7363      	strb	r3, [r4, #13]
    39a6:	1b03      	subs	r3, r0, r4
    39a8:	4258      	negs	r0, r3
    39aa:	4158      	adcs	r0, r3
    39ac:	f7ff ff62 	bl	3874 <update_cache>
	__asm__ volatile(
    39b0:	f385 8811 	msr	BASEPRI, r5
    39b4:	f3bf 8f6f 	isb	sy
}
    39b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    39ba:	4283      	cmp	r3, r0
    39bc:	d002      	beq.n	39c4 <z_move_thread_to_end_of_prio_q+0x70>
    39be:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    39c0:	2b00      	cmp	r3, #0
    39c2:	d1e2      	bne.n	398a <z_move_thread_to_end_of_prio_q+0x36>
	node->prev = list->tail;
    39c4:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
    39c8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    39ca:	601c      	str	r4, [r3, #0]
	list->tail = node;
    39cc:	62d4      	str	r4, [r2, #44]	; 0x2c
    39ce:	e7e5      	b.n	399c <z_move_thread_to_end_of_prio_q+0x48>
    39d0:	200003b4 	.word	0x200003b4
    39d4:	2000038c 	.word	0x2000038c

000039d8 <z_time_slice>:
	if (pending_current == _current) {
    39d8:	4a15      	ldr	r2, [pc, #84]	; (3a30 <z_time_slice+0x58>)
    39da:	4916      	ldr	r1, [pc, #88]	; (3a34 <z_time_slice+0x5c>)
{
    39dc:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
    39de:	680c      	ldr	r4, [r1, #0]
    39e0:	6893      	ldr	r3, [r2, #8]
    39e2:	42a3      	cmp	r3, r4
    39e4:	4614      	mov	r4, r2
    39e6:	d103      	bne.n	39f0 <z_time_slice+0x18>
}
    39e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
    39ec:	f7ff bed6 	b.w	379c <z_reset_time_slice>
	pending_current = NULL;
    39f0:	2500      	movs	r5, #0
    39f2:	600d      	str	r5, [r1, #0]
	if (slice_time && sliceable(_current)) {
    39f4:	4910      	ldr	r1, [pc, #64]	; (3a38 <z_time_slice+0x60>)
    39f6:	6809      	ldr	r1, [r1, #0]
    39f8:	b1b9      	cbz	r1, 3a2a <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(t);
    39fa:	89d9      	ldrh	r1, [r3, #14]
    39fc:	297f      	cmp	r1, #127	; 0x7f
    39fe:	d814      	bhi.n	3a2a <z_time_slice+0x52>
		&& !z_is_prio_higher(t->base.prio, slice_max_prio)
    3a00:	490e      	ldr	r1, [pc, #56]	; (3a3c <z_time_slice+0x64>)
    3a02:	f993 500e 	ldrsb.w	r5, [r3, #14]
    3a06:	6809      	ldr	r1, [r1, #0]
    3a08:	428d      	cmp	r5, r1
    3a0a:	db0e      	blt.n	3a2a <z_time_slice+0x52>
		&& !z_is_idle_thread_object(t)
    3a0c:	490c      	ldr	r1, [pc, #48]	; (3a40 <z_time_slice+0x68>)
    3a0e:	428b      	cmp	r3, r1
    3a10:	d00b      	beq.n	3a2a <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(t);
    3a12:	6999      	ldr	r1, [r3, #24]
    3a14:	b949      	cbnz	r1, 3a2a <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
    3a16:	6911      	ldr	r1, [r2, #16]
    3a18:	4281      	cmp	r1, r0
    3a1a:	dc03      	bgt.n	3a24 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
    3a1c:	4618      	mov	r0, r3
    3a1e:	f7ff ff99 	bl	3954 <z_move_thread_to_end_of_prio_q>
    3a22:	e7e1      	b.n	39e8 <z_time_slice+0x10>
			_current_cpu->slice_ticks -= ticks;
    3a24:	1a09      	subs	r1, r1, r0
    3a26:	6111      	str	r1, [r2, #16]
}
    3a28:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
    3a2a:	2300      	movs	r3, #0
    3a2c:	6123      	str	r3, [r4, #16]
    3a2e:	e7fb      	b.n	3a28 <z_time_slice+0x50>
    3a30:	2000038c 	.word	0x2000038c
    3a34:	200003bc 	.word	0x200003bc
    3a38:	200003c4 	.word	0x200003c4
    3a3c:	200003c0 	.word	0x200003c0
    3a40:	200002b4 	.word	0x200002b4

00003a44 <z_remove_thread_from_ready_q>:
{
    3a44:	b538      	push	{r3, r4, r5, lr}
    3a46:	4604      	mov	r4, r0
	__asm__ volatile(
    3a48:	f04f 0320 	mov.w	r3, #32
    3a4c:	f3ef 8511 	mrs	r5, BASEPRI
    3a50:	f383 8811 	msr	BASEPRI, r3
    3a54:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    3a58:	7b43      	ldrb	r3, [r0, #13]
    3a5a:	065a      	lsls	r2, r3, #25
    3a5c:	d507      	bpl.n	3a6e <z_remove_thread_from_ready_q+0x2a>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    3a5e:	4601      	mov	r1, r0
    3a60:	4809      	ldr	r0, [pc, #36]	; (3a88 <z_remove_thread_from_ready_q+0x44>)
    3a62:	f7ff fef1 	bl	3848 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    3a66:	7b63      	ldrb	r3, [r4, #13]
    3a68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    3a6c:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    3a6e:	4b07      	ldr	r3, [pc, #28]	; (3a8c <z_remove_thread_from_ready_q+0x48>)
    3a70:	6898      	ldr	r0, [r3, #8]
    3a72:	1b03      	subs	r3, r0, r4
    3a74:	4258      	negs	r0, r3
    3a76:	4158      	adcs	r0, r3
    3a78:	f7ff fefc 	bl	3874 <update_cache>
	__asm__ volatile(
    3a7c:	f385 8811 	msr	BASEPRI, r5
    3a80:	f3bf 8f6f 	isb	sy
}
    3a84:	bd38      	pop	{r3, r4, r5, pc}
    3a86:	bf00      	nop
    3a88:	200003b4 	.word	0x200003b4
    3a8c:	2000038c 	.word	0x2000038c

00003a90 <pend>:
{
    3a90:	b570      	push	{r4, r5, r6, lr}
    3a92:	4604      	mov	r4, r0
    3a94:	460d      	mov	r5, r1
    3a96:	4616      	mov	r6, r2
	z_remove_thread_from_ready_q(thread);
    3a98:	f7ff ffd4 	bl	3a44 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
    3a9c:	7b63      	ldrb	r3, [r4, #13]
    3a9e:	f043 0302 	orr.w	r3, r3, #2
    3aa2:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    3aa4:	b17d      	cbz	r5, 3ac6 <pend+0x36>
	return list->head == list;
    3aa6:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    3aa8:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3aaa:	429d      	cmp	r5, r3
    3aac:	d029      	beq.n	3b02 <pend+0x72>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3aae:	b343      	cbz	r3, 3b02 <pend+0x72>
	if (t1->base.prio < t2->base.prio) {
    3ab0:	f994 200e 	ldrsb.w	r2, [r4, #14]
    3ab4:	f993 100e 	ldrsb.w	r1, [r3, #14]
    3ab8:	4291      	cmp	r1, r2
    3aba:	dd1c      	ble.n	3af6 <pend+0x66>
	node->prev = successor->prev;
    3abc:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    3abe:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    3ac2:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    3ac4:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
    3ac6:	1c73      	adds	r3, r6, #1
    3ac8:	d022      	beq.n	3b10 <pend+0x80>
    3aca:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
    3ace:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    3ad2:	f240 30e7 	movw	r0, #999	; 0x3e7
    3ad6:	2100      	movs	r1, #0
    3ad8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3adc:	fbc5 0106 	smlal	r0, r1, r5, r6
    3ae0:	2300      	movs	r3, #0
    3ae2:	f7fc fafb 	bl	dc <__aeabi_uldivmod>

extern void z_thread_timeout(struct _timeout *to);

static inline void z_add_thread_timeout(struct k_thread *th, s32_t ticks)
{
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    3ae6:	490b      	ldr	r1, [pc, #44]	; (3b14 <pend+0x84>)
    3ae8:	1c42      	adds	r2, r0, #1
    3aea:	f104 0018 	add.w	r0, r4, #24
}
    3aee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3af2:	f000 ba67 	b.w	3fc4 <z_add_timeout>
	return (node == list->tail) ? NULL : node->next;
    3af6:	6869      	ldr	r1, [r5, #4]
    3af8:	428b      	cmp	r3, r1
    3afa:	d002      	beq.n	3b02 <pend+0x72>
    3afc:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3afe:	2b00      	cmp	r3, #0
    3b00:	d1d8      	bne.n	3ab4 <pend+0x24>
	node->prev = list->tail;
    3b02:	686b      	ldr	r3, [r5, #4]
    3b04:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    3b06:	686b      	ldr	r3, [r5, #4]
	node->next = list;
    3b08:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
    3b0a:	601c      	str	r4, [r3, #0]
	list->tail = node;
    3b0c:	606c      	str	r4, [r5, #4]
    3b0e:	e7da      	b.n	3ac6 <pend+0x36>
}
    3b10:	bd70      	pop	{r4, r5, r6, pc}
    3b12:	bf00      	nop
    3b14:	000053db 	.word	0x000053db

00003b18 <z_pend_curr>:
{
    3b18:	b510      	push	{r4, lr}
    3b1a:	460c      	mov	r4, r1
    3b1c:	4611      	mov	r1, r2
	pending_current = _current;
    3b1e:	4a06      	ldr	r2, [pc, #24]	; (3b38 <z_pend_curr+0x20>)
    3b20:	6890      	ldr	r0, [r2, #8]
    3b22:	4a06      	ldr	r2, [pc, #24]	; (3b3c <z_pend_curr+0x24>)
    3b24:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
    3b26:	461a      	mov	r2, r3
    3b28:	f7ff ffb2 	bl	3a90 <pend>
    3b2c:	4620      	mov	r0, r4
}
    3b2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3b32:	f7fd bc27 	b.w	1384 <arch_swap>
    3b36:	bf00      	nop
    3b38:	2000038c 	.word	0x2000038c
    3b3c:	200003bc 	.word	0x200003bc

00003b40 <z_tick_sleep.part.19>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
    3b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (ticks == 0) {
		k_yield();
		return 0;
	}

	ticks += _TICK_ALIGN;
    3b42:	1c46      	adds	r6, r0, #1
	expected_wakeup_time = ticks + z_tick_get_32();
    3b44:	f001 fd23 	bl	558e <z_tick_get_32>
    3b48:	1834      	adds	r4, r6, r0
	__asm__ volatile(
    3b4a:	f04f 0320 	mov.w	r3, #32
    3b4e:	f3ef 8711 	mrs	r7, BASEPRI
    3b52:	f383 8811 	msr	BASEPRI, r3
    3b56:	f3bf 8f6f 	isb	sy
	 */
	struct k_spinlock local_lock = {};
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    3b5a:	4d0d      	ldr	r5, [pc, #52]	; (3b90 <z_tick_sleep.part.19+0x50>)
    3b5c:	4b0d      	ldr	r3, [pc, #52]	; (3b94 <z_tick_sleep.part.19+0x54>)
    3b5e:	68a8      	ldr	r0, [r5, #8]
    3b60:	6018      	str	r0, [r3, #0]
#endif
	z_remove_thread_from_ready_q(_current);
    3b62:	f7ff ff6f 	bl	3a44 <z_remove_thread_from_ready_q>
    3b66:	68a8      	ldr	r0, [r5, #8]
    3b68:	490b      	ldr	r1, [pc, #44]	; (3b98 <z_tick_sleep.part.19+0x58>)
    3b6a:	4632      	mov	r2, r6
    3b6c:	3018      	adds	r0, #24
    3b6e:	f000 fa29 	bl	3fc4 <z_add_timeout>
	z_add_thread_timeout(_current, ticks);
	z_mark_thread_as_suspended(_current);
    3b72:	68aa      	ldr	r2, [r5, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    3b74:	7b53      	ldrb	r3, [r2, #13]
    3b76:	f043 0310 	orr.w	r3, r3, #16
    3b7a:	7353      	strb	r3, [r2, #13]
    3b7c:	4638      	mov	r0, r7
    3b7e:	f7fd fc01 	bl	1384 <arch_swap>

	(void)z_swap(&local_lock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
    3b82:	f001 fd04 	bl	558e <z_tick_get_32>
    3b86:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
    3b88:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    3b8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3b8e:	bf00      	nop
    3b90:	2000038c 	.word	0x2000038c
    3b94:	200003bc 	.word	0x200003bc
    3b98:	000053db 	.word	0x000053db

00003b9c <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    3b9c:	4b04      	ldr	r3, [pc, #16]	; (3bb0 <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    3b9e:	2100      	movs	r1, #0
    3ba0:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    3ba4:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
    3ba8:	4608      	mov	r0, r1
    3baa:	f7ff be0d 	b.w	37c8 <k_sched_time_slice_set>
    3bae:	bf00      	nop
    3bb0:	2000038c 	.word	0x2000038c

00003bb4 <z_impl_k_yield>:
{
    3bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
    3bb6:	4c23      	ldr	r4, [pc, #140]	; (3c44 <z_impl_k_yield+0x90>)
    3bb8:	4b23      	ldr	r3, [pc, #140]	; (3c48 <z_impl_k_yield+0x94>)
    3bba:	68a2      	ldr	r2, [r4, #8]
    3bbc:	429a      	cmp	r2, r3
    3bbe:	d029      	beq.n	3c14 <z_impl_k_yield+0x60>
    3bc0:	f04f 0320 	mov.w	r3, #32
    3bc4:	f3ef 8611 	mrs	r6, BASEPRI
    3bc8:	f383 8811 	msr	BASEPRI, r3
    3bcc:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
    3bd0:	f104 0528 	add.w	r5, r4, #40	; 0x28
    3bd4:	68a1      	ldr	r1, [r4, #8]
    3bd6:	4628      	mov	r0, r5
    3bd8:	f7ff fe36 	bl	3848 <z_priq_dumb_remove>
	return list->head == list;
    3bdc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
			_priq_run_add(&_kernel.ready_q.runq, _current);
    3bde:	68a3      	ldr	r3, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3be0:	42aa      	cmp	r2, r5
    3be2:	d028      	beq.n	3c36 <z_impl_k_yield+0x82>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3be4:	b33a      	cbz	r2, 3c36 <z_impl_k_yield+0x82>
    3be6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
    3be8:	f993 100e 	ldrsb.w	r1, [r3, #14]
    3bec:	f992 700e 	ldrsb.w	r7, [r2, #14]
    3bf0:	428f      	cmp	r7, r1
    3bf2:	dd1b      	ble.n	3c2c <z_impl_k_yield+0x78>
	node->prev = successor->prev;
    3bf4:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    3bf6:	e9c3 2100 	strd	r2, r1, [r3]
	successor->prev->next = node;
    3bfa:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    3bfc:	6053      	str	r3, [r2, #4]
	thread->base.thread_state |= states;
    3bfe:	7b5a      	ldrb	r2, [r3, #13]
    3c00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    3c04:	735a      	strb	r2, [r3, #13]
			update_cache(1);
    3c06:	2001      	movs	r0, #1
    3c08:	f7ff fe34 	bl	3874 <update_cache>
	__asm__ volatile(
    3c0c:	f386 8811 	msr	BASEPRI, r6
    3c10:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    3c14:	f04f 0320 	mov.w	r3, #32
    3c18:	f3ef 8011 	mrs	r0, BASEPRI
    3c1c:	f383 8811 	msr	BASEPRI, r3
    3c20:	f3bf 8f6f 	isb	sy
}
    3c24:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    3c28:	f7fd bbac 	b.w	1384 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    3c2c:	4282      	cmp	r2, r0
    3c2e:	d002      	beq.n	3c36 <z_impl_k_yield+0x82>
    3c30:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3c32:	2a00      	cmp	r2, #0
    3c34:	d1da      	bne.n	3bec <z_impl_k_yield+0x38>
	node->prev = list->tail;
    3c36:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3c38:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
    3c3a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	node->next = list;
    3c3c:	601d      	str	r5, [r3, #0]
	list->tail->next = node;
    3c3e:	6013      	str	r3, [r2, #0]
	list->tail = node;
    3c40:	62e3      	str	r3, [r4, #44]	; 0x2c
    3c42:	e7dc      	b.n	3bfe <z_impl_k_yield+0x4a>
    3c44:	2000038c 	.word	0x2000038c
    3c48:	200002b4 	.word	0x200002b4

00003c4c <z_impl_k_sleep>:

s32_t z_impl_k_sleep(int ms)
{
    3c4c:	b538      	push	{r3, r4, r5, lr}
	s32_t ticks;

	__ASSERT(!arch_is_in_isr(), "");

	if (ms == K_FOREVER) {
    3c4e:	1c43      	adds	r3, r0, #1
{
    3c50:	4604      	mov	r4, r0
	if (ms == K_FOREVER) {
    3c52:	d105      	bne.n	3c60 <z_impl_k_sleep+0x14>
		k_thread_suspend(_current);
    3c54:	4b10      	ldr	r3, [pc, #64]	; (3c98 <z_impl_k_sleep+0x4c>)
    3c56:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    3c58:	f000 f900 	bl	3e5c <z_impl_k_thread_suspend>
	}

	ticks = k_ms_to_ticks_ceil32(ms);
	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
    3c5c:	4620      	mov	r0, r4
    3c5e:	bd38      	pop	{r3, r4, r5, pc}
    3c60:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    3c64:	f240 30e7 	movw	r0, #999	; 0x3e7
    3c68:	2100      	movs	r1, #0
    3c6a:	fbe5 0104 	umlal	r0, r1, r5, r4
    3c6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3c72:	2300      	movs	r3, #0
    3c74:	f7fc fa32 	bl	dc <__aeabi_uldivmod>
	if (ticks == 0) {
    3c78:	4604      	mov	r4, r0
    3c7a:	b948      	cbnz	r0, 3c90 <z_impl_k_sleep+0x44>
	z_impl_k_yield();
    3c7c:	f7ff ff9a 	bl	3bb4 <z_impl_k_yield>
		} else {
			return (t * to_hz + off) / from_hz;
    3c80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    3c84:	fb84 0100 	smull	r0, r1, r4, r0
    3c88:	0bc4      	lsrs	r4, r0, #15
    3c8a:	ea44 4441 	orr.w	r4, r4, r1, lsl #17
	return k_ticks_to_ms_floor64(ticks);
    3c8e:	e7e5      	b.n	3c5c <z_impl_k_sleep+0x10>
    3c90:	f7ff ff56 	bl	3b40 <z_tick_sleep.part.19>
    3c94:	4604      	mov	r4, r0
    3c96:	e7f3      	b.n	3c80 <z_impl_k_sleep+0x34>
    3c98:	2000038c 	.word	0x2000038c

00003c9c <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
    3c9c:	4b01      	ldr	r3, [pc, #4]	; (3ca4 <z_impl_k_current_get+0x8>)
    3c9e:	6898      	ldr	r0, [r3, #8]
    3ca0:	4770      	bx	lr
    3ca2:	bf00      	nop
    3ca4:	2000038c 	.word	0x2000038c

00003ca8 <z_impl_k_sem_give>:
		handle_poll_events(sem);
	}
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    3ca8:	b570      	push	{r4, r5, r6, lr}
    3caa:	4604      	mov	r4, r0
    3cac:	f04f 0320 	mov.w	r3, #32
    3cb0:	f3ef 8611 	mrs	r6, BASEPRI
    3cb4:	f383 8811 	msr	BASEPRI, r3
    3cb8:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
    3cbc:	f001 fbbe 	bl	543c <z_unpend_first_thread>
	if (thread != NULL) {
    3cc0:	4605      	mov	r5, r0
    3cc2:	b170      	cbz	r0, 3ce2 <z_impl_k_sem_give+0x3a>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    3cc4:	7b43      	ldrb	r3, [r0, #13]
    3cc6:	06db      	lsls	r3, r3, #27
    3cc8:	d103      	bne.n	3cd2 <z_impl_k_sem_give+0x2a>
	if (z_is_thread_ready(thread)) {
    3cca:	6983      	ldr	r3, [r0, #24]
    3ccc:	b90b      	cbnz	r3, 3cd2 <z_impl_k_sem_give+0x2a>
		z_add_thread_to_ready_q(thread);
    3cce:	f7ff fe0b 	bl	38e8 <z_add_thread_to_ready_q>
    3cd2:	2300      	movs	r3, #0
    3cd4:	66ab      	str	r3, [r5, #104]	; 0x68
	k_spinlock_key_t key = k_spin_lock(&lock);

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);
	do_sem_give(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
    3cd6:	4631      	mov	r1, r6
    3cd8:	4805      	ldr	r0, [pc, #20]	; (3cf0 <z_impl_k_sem_give+0x48>)
}
    3cda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
    3cde:	f001 bb55 	b.w	538c <z_reschedule>
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
    3ce2:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    3ce6:	429a      	cmp	r2, r3
    3ce8:	bf18      	it	ne
    3cea:	3301      	addne	r3, #1
    3cec:	60a3      	str	r3, [r4, #8]
    3cee:	e7f2      	b.n	3cd6 <z_impl_k_sem_give+0x2e>
    3cf0:	200003d4 	.word	0x200003d4

00003cf4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
    3cf4:	b410      	push	{r4}
    3cf6:	4602      	mov	r2, r0
    3cf8:	460b      	mov	r3, r1
    3cfa:	f04f 0020 	mov.w	r0, #32
    3cfe:	f3ef 8111 	mrs	r1, BASEPRI
    3d02:	f380 8811 	msr	BASEPRI, r0
    3d06:	f3bf 8f6f 	isb	sy
	__ASSERT(((arch_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
    3d0a:	6894      	ldr	r4, [r2, #8]
    3d0c:	b144      	cbz	r4, 3d20 <z_impl_k_sem_take+0x2c>
		sem->count--;
    3d0e:	3c01      	subs	r4, #1
    3d10:	6094      	str	r4, [r2, #8]
	__asm__ volatile(
    3d12:	f381 8811 	msr	BASEPRI, r1
    3d16:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
		return 0;
    3d1a:	2000      	movs	r0, #0

	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);

	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
	return ret;
}
    3d1c:	bc10      	pop	{r4}
    3d1e:	4770      	bx	lr
	if (timeout == K_NO_WAIT) {
    3d20:	b933      	cbnz	r3, 3d30 <z_impl_k_sem_take+0x3c>
    3d22:	f381 8811 	msr	BASEPRI, r1
    3d26:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    3d2a:	f06f 000f 	mvn.w	r0, #15
    3d2e:	e7f5      	b.n	3d1c <z_impl_k_sem_take+0x28>
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    3d30:	4801      	ldr	r0, [pc, #4]	; (3d38 <z_impl_k_sem_take+0x44>)
}
    3d32:	bc10      	pop	{r4}
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    3d34:	f7ff bef0 	b.w	3b18 <z_pend_curr>
    3d38:	200003d4 	.word	0x200003d4

00003d3c <z_impl_k_thread_start>:
}
#endif

#ifdef CONFIG_MULTITHREADING
void z_impl_k_thread_start(struct k_thread *thread)
{
    3d3c:	b510      	push	{r4, lr}
    3d3e:	4602      	mov	r2, r0
	__asm__ volatile(
    3d40:	f04f 0320 	mov.w	r3, #32
    3d44:	f3ef 8411 	mrs	r4, BASEPRI
    3d48:	f383 8811 	msr	BASEPRI, r3
    3d4c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock); /* protect kernel queues */

	if (z_has_thread_started(thread)) {
    3d50:	7b43      	ldrb	r3, [r0, #13]
    3d52:	0759      	lsls	r1, r3, #29
    3d54:	d404      	bmi.n	3d60 <z_impl_k_thread_start+0x24>
	__asm__ volatile(
    3d56:	f384 8811 	msr	BASEPRI, r4
    3d5a:	f3bf 8f6f 	isb	sy
	}

	z_mark_thread_as_started(thread);
	z_ready_thread(thread);
	z_reschedule(&lock, key);
}
    3d5e:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3d60:	f023 0304 	bic.w	r3, r3, #4
    3d64:	7343      	strb	r3, [r0, #13]
	if (z_is_thread_ready(thread)) {
    3d66:	f001 fb96 	bl	5496 <z_is_thread_ready>
    3d6a:	b110      	cbz	r0, 3d72 <z_impl_k_thread_start+0x36>
		z_add_thread_to_ready_q(thread);
    3d6c:	4610      	mov	r0, r2
    3d6e:	f7ff fdbb 	bl	38e8 <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
    3d72:	4621      	mov	r1, r4
    3d74:	4802      	ldr	r0, [pc, #8]	; (3d80 <z_impl_k_thread_start+0x44>)
}
    3d76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&lock, key);
    3d7a:	f001 bb07 	b.w	538c <z_reschedule>
    3d7e:	bf00      	nop
    3d80:	200003d4 	.word	0x200003d4

00003d84 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
    3d84:	b530      	push	{r4, r5, lr}
    3d86:	b087      	sub	sp, #28
    3d88:	4604      	mov	r4, r0
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    3d8a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    3d8c:	9504      	str	r5, [sp, #16]
    3d8e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    3d90:	9503      	str	r5, [sp, #12]
    3d92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    3d94:	9502      	str	r5, [sp, #8]
    3d96:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    3d98:	9501      	str	r5, [sp, #4]
    3d9a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    3d9c:	9500      	str	r5, [sp, #0]
    3d9e:	f7fd fb6d 	bl	147c <arch_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    3da2:	4b03      	ldr	r3, [pc, #12]	; (3db0 <z_setup_new_thread+0x2c>)
    3da4:	689b      	ldr	r3, [r3, #8]
    3da6:	b103      	cbz	r3, 3daa <z_setup_new_thread+0x26>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    3da8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    3daa:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
    3dac:	b007      	add	sp, #28
    3dae:	bd30      	pop	{r4, r5, pc}
    3db0:	2000038c 	.word	0x2000038c

00003db4 <z_impl_k_thread_create>:
k_tid_t z_impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
    3db4:	b570      	push	{r4, r5, r6, lr}
    3db6:	b086      	sub	sp, #24
	__ASSERT((options & K_USER) == 0,
		 "Platform is capable of user mode, and test thread created with K_USER option,"
		 " but neither CONFIG_TEST_USERSPACE nor CONFIG_USERSPACE is set\n");
#endif

	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    3db8:	2600      	movs	r6, #0
    3dba:	9605      	str	r6, [sp, #20]
    3dbc:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    3dbe:	9604      	str	r6, [sp, #16]
    3dc0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    3dc2:	9603      	str	r6, [sp, #12]
    3dc4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    3dc6:	9602      	str	r6, [sp, #8]
    3dc8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
{
    3dca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    3dcc:	9601      	str	r6, [sp, #4]
    3dce:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    3dd0:	9600      	str	r6, [sp, #0]
{
    3dd2:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    3dd4:	f7ff ffd6 	bl	3d84 <z_setup_new_thread>
			  prio, options, NULL);

	if (delay != K_FOREVER) {
    3dd8:	1c6b      	adds	r3, r5, #1
    3dda:	d003      	beq.n	3de4 <z_impl_k_thread_create+0x30>
	if (delay == 0) {
    3ddc:	b92d      	cbnz	r5, 3dea <z_impl_k_thread_create+0x36>
	z_impl_k_thread_start(thread);
    3dde:	4620      	mov	r0, r4
    3de0:	f7ff ffac 	bl	3d3c <z_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}

	return new_thread;
}
    3de4:	4620      	mov	r0, r4
    3de6:	b006      	add	sp, #24
    3de8:	bd70      	pop	{r4, r5, r6, pc}
			return (u32_t)((t * to_hz + off) / from_hz);
    3dea:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    3dee:	f240 30e7 	movw	r0, #999	; 0x3e7
    3df2:	2100      	movs	r1, #0
    3df4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3df8:	2300      	movs	r3, #0
    3dfa:	fbe6 0105 	umlal	r0, r1, r6, r5
    3dfe:	f7fc f96d 	bl	dc <__aeabi_uldivmod>
    3e02:	4903      	ldr	r1, [pc, #12]	; (3e10 <z_impl_k_thread_create+0x5c>)
    3e04:	1c42      	adds	r2, r0, #1
    3e06:	f104 0018 	add.w	r0, r4, #24
    3e0a:	f000 f8db 	bl	3fc4 <z_add_timeout>
    3e0e:	e7e9      	b.n	3de4 <z_impl_k_thread_create+0x30>
    3e10:	000053db 	.word	0x000053db

00003e14 <z_thread_single_suspend>:
#include <syscalls/k_thread_create_mrsh.c>
#endif /* CONFIG_USERSPACE */
#endif /* CONFIG_MULTITHREADING */

void z_thread_single_suspend(struct k_thread *thread)
{
    3e14:	b510      	push	{r4, lr}
    3e16:	4604      	mov	r4, r0
	if (z_is_thread_ready(thread)) {
    3e18:	f001 fb3d 	bl	5496 <z_is_thread_ready>
    3e1c:	b110      	cbz	r0, 3e24 <z_thread_single_suspend+0x10>
		z_remove_thread_from_ready_q(thread);
    3e1e:	4620      	mov	r0, r4
    3e20:	f7ff fe10 	bl	3a44 <z_remove_thread_from_ready_q>
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    3e24:	f104 0018 	add.w	r0, r4, #24
    3e28:	f001 fb71 	bl	550e <z_abort_timeout>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    3e2c:	7b63      	ldrb	r3, [r4, #13]
    3e2e:	f043 0310 	orr.w	r3, r3, #16
    3e32:	7363      	strb	r3, [r4, #13]

	(void)z_abort_thread_timeout(thread);

	z_mark_thread_as_suspended(thread);

	if (thread == _current) {
    3e34:	4b08      	ldr	r3, [pc, #32]	; (3e58 <z_thread_single_suspend+0x44>)
    3e36:	689b      	ldr	r3, [r3, #8]
    3e38:	42a3      	cmp	r3, r4
    3e3a:	d10b      	bne.n	3e54 <z_thread_single_suspend+0x40>
	__asm__ volatile(
    3e3c:	f04f 0320 	mov.w	r3, #32
    3e40:	f3ef 8011 	mrs	r0, BASEPRI
    3e44:	f383 8811 	msr	BASEPRI, r3
    3e48:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
    3e4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
    3e50:	f001 baa7 	b.w	53a2 <z_reschedule_irqlock>
    3e54:	bd10      	pop	{r4, pc}
    3e56:	bf00      	nop
    3e58:	2000038c 	.word	0x2000038c

00003e5c <z_impl_k_thread_suspend>:

void z_impl_k_thread_suspend(struct k_thread *thread)
{
    3e5c:	b538      	push	{r3, r4, r5, lr}
    3e5e:	4605      	mov	r5, r0
    3e60:	f04f 0320 	mov.w	r3, #32
    3e64:	f3ef 8411 	mrs	r4, BASEPRI
    3e68:	f383 8811 	msr	BASEPRI, r3
    3e6c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	z_thread_single_suspend(thread);
    3e70:	f7ff ffd0 	bl	3e14 <z_thread_single_suspend>

	sys_trace_thread_suspend(thread);

	if (thread == _current) {
    3e74:	4b07      	ldr	r3, [pc, #28]	; (3e94 <z_impl_k_thread_suspend+0x38>)
    3e76:	689b      	ldr	r3, [r3, #8]
    3e78:	42ab      	cmp	r3, r5
    3e7a:	d105      	bne.n	3e88 <z_impl_k_thread_suspend+0x2c>
		z_reschedule(&lock, key);
    3e7c:	4621      	mov	r1, r4
    3e7e:	4806      	ldr	r0, [pc, #24]	; (3e98 <z_impl_k_thread_suspend+0x3c>)
	} else {
		k_spin_unlock(&lock, key);
	}
}
    3e80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&lock, key);
    3e84:	f001 ba82 	b.w	538c <z_reschedule>
	__asm__ volatile(
    3e88:	f384 8811 	msr	BASEPRI, r4
    3e8c:	f3bf 8f6f 	isb	sy
}
    3e90:	bd38      	pop	{r3, r4, r5, pc}
    3e92:	bf00      	nop
    3e94:	2000038c 	.word	0x2000038c
    3e98:	200003d4 	.word	0x200003d4

00003e9c <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    3e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    3ea0:	4e28      	ldr	r6, [pc, #160]	; (3f44 <z_init_static_threads+0xa8>)
    3ea2:	4d29      	ldr	r5, [pc, #164]	; (3f48 <z_init_static_threads+0xac>)
{
    3ea4:	b087      	sub	sp, #28
    3ea6:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
    3ea8:	42b5      	cmp	r5, r6
    3eaa:	f105 0430 	add.w	r4, r5, #48	; 0x30
    3eae:	d310      	bcc.n	3ed2 <z_init_static_threads+0x36>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    3eb0:	f7ff fcb6 	bl	3820 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    3eb4:	4c24      	ldr	r4, [pc, #144]	; (3f48 <z_init_static_threads+0xac>)
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    3eb6:	f8df a094 	ldr.w	sl, [pc, #148]	; 3f4c <z_init_static_threads+0xb0>
    3eba:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    3ebe:	f240 36e7 	movw	r6, #999	; 0x3e7
    3ec2:	2700      	movs	r7, #0
    3ec4:	4544      	cmp	r4, r8
    3ec6:	d321      	bcc.n	3f0c <z_init_static_threads+0x70>
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	k_sched_unlock();
}
    3ec8:	b007      	add	sp, #28
    3eca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
    3ece:	f7ff bcef 	b.w	38b0 <k_sched_unlock>
		z_setup_new_thread(
    3ed2:	f854 3c04 	ldr.w	r3, [r4, #-4]
    3ed6:	9305      	str	r3, [sp, #20]
    3ed8:	f854 3c10 	ldr.w	r3, [r4, #-16]
    3edc:	9304      	str	r3, [sp, #16]
    3ede:	f854 3c14 	ldr.w	r3, [r4, #-20]
    3ee2:	9303      	str	r3, [sp, #12]
    3ee4:	f854 3c18 	ldr.w	r3, [r4, #-24]
    3ee8:	9302      	str	r3, [sp, #8]
    3eea:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    3eee:	9301      	str	r3, [sp, #4]
    3ef0:	f854 3c20 	ldr.w	r3, [r4, #-32]
    3ef4:	9300      	str	r3, [sp, #0]
    3ef6:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    3efa:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    3efe:	f7ff ff41 	bl	3d84 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    3f02:	f854 3c30 	ldr.w	r3, [r4, #-48]
    3f06:	64dd      	str	r5, [r3, #76]	; 0x4c
    3f08:	4625      	mov	r5, r4
    3f0a:	e7cd      	b.n	3ea8 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_FOREVER) {
    3f0c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    3f0e:	1c4b      	adds	r3, r1, #1
    3f10:	d004      	beq.n	3f1c <z_init_static_threads+0x80>
			schedule_new_thread(thread_data->init_thread,
    3f12:	6825      	ldr	r5, [r4, #0]
	if (delay == 0) {
    3f14:	b921      	cbnz	r1, 3f20 <z_init_static_threads+0x84>
    3f16:	4628      	mov	r0, r5
    3f18:	f7ff ff10 	bl	3d3c <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    3f1c:	3430      	adds	r4, #48	; 0x30
    3f1e:	e7d1      	b.n	3ec4 <z_init_static_threads+0x28>
    3f20:	46b3      	mov	fp, r6
    3f22:	46bc      	mov	ip, r7
    3f24:	fbe9 bc01 	umlal	fp, ip, r9, r1
    3f28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3f2c:	2300      	movs	r3, #0
    3f2e:	4658      	mov	r0, fp
    3f30:	4661      	mov	r1, ip
    3f32:	f7fc f8d3 	bl	dc <__aeabi_uldivmod>
    3f36:	4651      	mov	r1, sl
    3f38:	1c42      	adds	r2, r0, #1
    3f3a:	f105 0018 	add.w	r0, r5, #24
    3f3e:	f000 f841 	bl	3fc4 <z_add_timeout>
    3f42:	e7eb      	b.n	3f1c <z_init_static_threads+0x80>
    3f44:	20002630 	.word	0x20002630
    3f48:	200025a0 	.word	0x200025a0
    3f4c:	000053db 	.word	0x000053db

00003f50 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
    3f50:	4b03      	ldr	r3, [pc, #12]	; (3f60 <elapsed+0x10>)
    3f52:	681b      	ldr	r3, [r3, #0]
    3f54:	b90b      	cbnz	r3, 3f5a <elapsed+0xa>
    3f56:	f7fd b9d3 	b.w	1300 <z_clock_elapsed>
}
    3f5a:	2000      	movs	r0, #0
    3f5c:	4770      	bx	lr
    3f5e:	bf00      	nop
    3f60:	200003c8 	.word	0x200003c8

00003f64 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    3f64:	6803      	ldr	r3, [r0, #0]
    3f66:	b140      	cbz	r0, 3f7a <remove_timeout+0x16>
    3f68:	4a07      	ldr	r2, [pc, #28]	; (3f88 <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
    3f6a:	6852      	ldr	r2, [r2, #4]
    3f6c:	4290      	cmp	r0, r2
    3f6e:	d004      	beq.n	3f7a <remove_timeout+0x16>
	if (next(t) != NULL) {
    3f70:	b11b      	cbz	r3, 3f7a <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
    3f72:	689a      	ldr	r2, [r3, #8]
    3f74:	6881      	ldr	r1, [r0, #8]
    3f76:	440a      	add	r2, r1
    3f78:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
    3f7a:	6842      	ldr	r2, [r0, #4]
    3f7c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    3f7e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    3f80:	2300      	movs	r3, #0
	node->prev = NULL;
    3f82:	e9c0 3300 	strd	r3, r3, [r0]
}
    3f86:	4770      	bx	lr
    3f88:	20002508 	.word	0x20002508

00003f8c <next_timeout>:
	return list->head == list;
    3f8c:	4b0b      	ldr	r3, [pc, #44]	; (3fbc <next_timeout+0x30>)

static s32_t next_timeout(void)
{
    3f8e:	b510      	push	{r4, lr}
    3f90:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3f92:	429c      	cmp	r4, r3
    3f94:	bf08      	it	eq
    3f96:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
    3f98:	f7ff ffda 	bl	3f50 <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    3f9c:	b154      	cbz	r4, 3fb4 <next_timeout+0x28>
    3f9e:	68a3      	ldr	r3, [r4, #8]
    3fa0:	1a18      	subs	r0, r3, r0
    3fa2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    3fa6:	4b06      	ldr	r3, [pc, #24]	; (3fc0 <next_timeout+0x34>)
    3fa8:	691b      	ldr	r3, [r3, #16]
    3faa:	b113      	cbz	r3, 3fb2 <next_timeout+0x26>
    3fac:	4298      	cmp	r0, r3
    3fae:	bfa8      	it	ge
    3fb0:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    3fb2:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    3fb4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    3fb8:	e7f5      	b.n	3fa6 <next_timeout+0x1a>
    3fba:	bf00      	nop
    3fbc:	20002508 	.word	0x20002508
    3fc0:	2000038c 	.word	0x2000038c

00003fc4 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
    3fc4:	b570      	push	{r4, r5, r6, lr}
    3fc6:	4604      	mov	r4, r0
    3fc8:	4616      	mov	r6, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    3fca:	60c1      	str	r1, [r0, #12]
	__asm__ volatile(
    3fcc:	f04f 0320 	mov.w	r3, #32
    3fd0:	f3ef 8511 	mrs	r5, BASEPRI
    3fd4:	f383 8811 	msr	BASEPRI, r3
    3fd8:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
    3fdc:	f7ff ffb8 	bl	3f50 <elapsed>
	return list->head == list;
    3fe0:	4b18      	ldr	r3, [pc, #96]	; (4044 <z_add_timeout+0x80>)
    3fe2:	681a      	ldr	r2, [r3, #0]
    3fe4:	2e01      	cmp	r6, #1
    3fe6:	bfac      	ite	ge
    3fe8:	1980      	addge	r0, r0, r6
    3fea:	3001      	addlt	r0, #1
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3fec:	429a      	cmp	r2, r3
    3fee:	60a0      	str	r0, [r4, #8]
    3ff0:	d001      	beq.n	3ff6 <z_add_timeout+0x32>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    3ff2:	685e      	ldr	r6, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
    3ff4:	b932      	cbnz	r2, 4004 <z_add_timeout+0x40>
	node->prev = list->tail;
    3ff6:	685a      	ldr	r2, [r3, #4]
    3ff8:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
    3ffa:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    3ffc:	6023      	str	r3, [r4, #0]
	list->tail->next = node;
    3ffe:	6014      	str	r4, [r2, #0]
	list->tail = node;
    4000:	605c      	str	r4, [r3, #4]
    4002:	e00a      	b.n	401a <z_add_timeout+0x56>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
    4004:	6890      	ldr	r0, [r2, #8]
    4006:	68a1      	ldr	r1, [r4, #8]
    4008:	4288      	cmp	r0, r1
    400a:	dd15      	ble.n	4038 <z_add_timeout+0x74>
				t->dticks -= to->dticks;
    400c:	1a41      	subs	r1, r0, r1
    400e:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
    4010:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    4012:	e9c4 2100 	strd	r2, r1, [r4]
	successor->prev->next = node;
    4016:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    4018:	6054      	str	r4, [r2, #4]
	return list->head == list;
    401a:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    401c:	429a      	cmp	r2, r3
    401e:	d006      	beq.n	402e <z_add_timeout+0x6a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    4020:	4294      	cmp	r4, r2
    4022:	d104      	bne.n	402e <z_add_timeout+0x6a>
			z_clock_set_timeout(next_timeout(), false);
    4024:	f7ff ffb2 	bl	3f8c <next_timeout>
    4028:	2100      	movs	r1, #0
    402a:	f7fd f913 	bl	1254 <z_clock_set_timeout>
	__asm__ volatile(
    402e:	f385 8811 	msr	BASEPRI, r5
    4032:	f3bf 8f6f 	isb	sy
		}
	}
}
    4036:	bd70      	pop	{r4, r5, r6, pc}
			to->dticks -= t->dticks;
    4038:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    403a:	42b2      	cmp	r2, r6
    403c:	60a1      	str	r1, [r4, #8]
    403e:	d0da      	beq.n	3ff6 <z_add_timeout+0x32>
    4040:	6812      	ldr	r2, [r2, #0]
    4042:	e7d7      	b.n	3ff4 <z_add_timeout+0x30>
    4044:	20002508 	.word	0x20002508

00004048 <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
    4048:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    404c:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    404e:	f7ff fcc3 	bl	39d8 <z_time_slice>
	__asm__ volatile(
    4052:	f04f 0320 	mov.w	r3, #32
    4056:	f3ef 8511 	mrs	r5, BASEPRI
    405a:	f383 8811 	msr	BASEPRI, r3
    405e:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    4062:	4e21      	ldr	r6, [pc, #132]	; (40e8 <z_clock_announce+0xa0>)
    4064:	4f21      	ldr	r7, [pc, #132]	; (40ec <z_clock_announce+0xa4>)
	return list->head == list;
    4066:	f8df 9088 	ldr.w	r9, [pc, #136]	; 40f0 <z_clock_announce+0xa8>
    406a:	6034      	str	r4, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    406c:	46b8      	mov	r8, r7
    406e:	f8d9 4000 	ldr.w	r4, [r9]
    4072:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4074:	454c      	cmp	r4, r9
    4076:	e9d7 bc00 	ldrd	fp, ip, [r7]
    407a:	d005      	beq.n	4088 <z_clock_announce+0x40>
    407c:	b124      	cbz	r4, 4088 <z_clock_announce+0x40>
    407e:	68a3      	ldr	r3, [r4, #8]
    4080:	4293      	cmp	r3, r2
    4082:	dd14      	ble.n	40ae <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    4084:	1a9b      	subs	r3, r3, r2
    4086:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
    4088:	eb1b 0002 	adds.w	r0, fp, r2
    408c:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
	announce_remaining = 0;
    4090:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    4092:	e9c8 0100 	strd	r0, r1, [r8]
	announce_remaining = 0;
    4096:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
    4098:	f7ff ff78 	bl	3f8c <next_timeout>
    409c:	4621      	mov	r1, r4
    409e:	f7fd f8d9 	bl	1254 <z_clock_set_timeout>
	__asm__ volatile(
    40a2:	f385 8811 	msr	BASEPRI, r5
    40a6:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    40aa:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
    40ae:	eb1b 0003 	adds.w	r0, fp, r3
    40b2:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
    40b6:	1ad3      	subs	r3, r2, r3
    40b8:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    40ba:	2300      	movs	r3, #0
		curr_tick += dt;
    40bc:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
    40c0:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
    40c2:	4620      	mov	r0, r4
    40c4:	f7ff ff4e 	bl	3f64 <remove_timeout>
    40c8:	f385 8811 	msr	BASEPRI, r5
    40cc:	f3bf 8f6f 	isb	sy
		t->fn(t);
    40d0:	68e3      	ldr	r3, [r4, #12]
    40d2:	4798      	blx	r3
	__asm__ volatile(
    40d4:	f04f 0320 	mov.w	r3, #32
    40d8:	f3ef 8511 	mrs	r5, BASEPRI
    40dc:	f383 8811 	msr	BASEPRI, r3
    40e0:	f3bf 8f6f 	isb	sy
#endif

#ifdef SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    40e4:	e7c3      	b.n	406e <z_clock_announce+0x26>
    40e6:	bf00      	nop
    40e8:	200003c8 	.word	0x200003c8
    40ec:	20000000 	.word	0x20000000
    40f0:	20002508 	.word	0x20002508

000040f4 <z_tick_get>:

s64_t z_tick_get(void)
{
    40f4:	e92d 4818 	stmdb	sp!, {r3, r4, fp, lr}
    40f8:	f04f 0320 	mov.w	r3, #32
    40fc:	f3ef 8411 	mrs	r4, BASEPRI
    4100:	f383 8811 	msr	BASEPRI, r3
    4104:	f3bf 8f6f 	isb	sy
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
    4108:	f7fd f8fa 	bl	1300 <z_clock_elapsed>
    410c:	4b07      	ldr	r3, [pc, #28]	; (412c <z_tick_get+0x38>)
    410e:	e9d3 2300 	ldrd	r2, r3, [r3]
    4112:	eb12 0b00 	adds.w	fp, r2, r0
    4116:	f143 0c00 	adc.w	ip, r3, #0
    411a:	4658      	mov	r0, fp
    411c:	4661      	mov	r1, ip
	__asm__ volatile(
    411e:	f384 8811 	msr	BASEPRI, r4
    4122:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    4126:	e8bd 8818 	ldmia.w	sp!, {r3, r4, fp, pc}
    412a:	bf00      	nop
    412c:	20000000 	.word	0x20000000

00004130 <z_timer_expiration_handler>:

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
    4130:	6a02      	ldr	r2, [r0, #32]
    4132:	2a00      	cmp	r2, #0
{
    4134:	b538      	push	{r3, r4, r5, lr}
    4136:	4604      	mov	r4, r0
	if (timer->period > 0) {
    4138:	dd02      	ble.n	4140 <z_timer_expiration_handler+0x10>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    413a:	490e      	ldr	r1, [pc, #56]	; (4174 <z_timer_expiration_handler+0x44>)
    413c:	f7ff ff42 	bl	3fc4 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    4140:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4142:	3301      	adds	r3, #1
    4144:	6263      	str	r3, [r4, #36]	; 0x24

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    4146:	69a3      	ldr	r3, [r4, #24]
    4148:	b10b      	cbz	r3, 414e <z_timer_expiration_handler+0x1e>
		timer->expiry_fn(timer);
    414a:	4620      	mov	r0, r4
    414c:	4798      	blx	r3
	return list->head == list;
    414e:	f854 5f10 	ldr.w	r5, [r4, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4152:	42a5      	cmp	r5, r4
    4154:	d00d      	beq.n	4172 <z_timer_expiration_handler+0x42>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    4156:	b165      	cbz	r5, 4172 <z_timer_expiration_handler+0x42>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
    4158:	4628      	mov	r0, r5
    415a:	f001 f8fe 	bl	535a <z_unpend_thread_no_timeout>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    415e:	7b6b      	ldrb	r3, [r5, #13]
    4160:	06db      	lsls	r3, r3, #27
    4162:	d104      	bne.n	416e <z_timer_expiration_handler+0x3e>
	if (z_is_thread_ready(thread)) {
    4164:	69ab      	ldr	r3, [r5, #24]
    4166:	b913      	cbnz	r3, 416e <z_timer_expiration_handler+0x3e>
		z_add_thread_to_ready_q(thread);
    4168:	4628      	mov	r0, r5
    416a:	f7ff fbbd 	bl	38e8 <z_add_thread_to_ready_q>
    416e:	2300      	movs	r3, #0
    4170:	66ab      	str	r3, [r5, #104]	; 0x68

	z_ready_thread(thread);

	arch_thread_return_value_set(thread, 0);
}
    4172:	bd38      	pop	{r3, r4, r5, pc}
    4174:	00004131 	.word	0x00004131

00004178 <z_impl_k_timer_start>:
	z_object_init(timer);
}


void z_impl_k_timer_start(struct k_timer *timer, s32_t duration, s32_t period)
{
    4178:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    417c:	f240 36e7 	movw	r6, #999	; 0x3e7
    4180:	2700      	movs	r7, #0
    4182:	4604      	mov	r4, r0
    4184:	4688      	mov	r8, r1
    4186:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    418a:	4630      	mov	r0, r6
    418c:	4639      	mov	r1, r7
    418e:	fbe5 0102 	umlal	r0, r1, r5, r2
    4192:	2300      	movs	r3, #0
    4194:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4198:	f7fb ffa0 	bl	dc <__aeabi_uldivmod>
    419c:	4639      	mov	r1, r7
	__ASSERT(duration >= 0 && period >= 0 &&
		 (duration != 0 || period != 0), "invalid parameters\n");

	volatile s32_t period_in_ticks, duration_in_ticks;

	period_in_ticks = k_ms_to_ticks_ceil32(period);
    419e:	9000      	str	r0, [sp, #0]
    41a0:	4630      	mov	r0, r6
    41a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    41a6:	2300      	movs	r3, #0
    41a8:	fbe5 0108 	umlal	r0, r1, r5, r8
    41ac:	f7fb ff96 	bl	dc <__aeabi_uldivmod>
	duration_in_ticks = k_ms_to_ticks_ceil32(duration);
    41b0:	9001      	str	r0, [sp, #4]

	(void)z_abort_timeout(&timer->timeout);
    41b2:	4620      	mov	r0, r4
    41b4:	f001 f9ab 	bl	550e <z_abort_timeout>
	timer->period = period_in_ticks;
    41b8:	9b00      	ldr	r3, [sp, #0]
	timer->status = 0U;
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    41ba:	4905      	ldr	r1, [pc, #20]	; (41d0 <z_impl_k_timer_start+0x58>)
    41bc:	9a01      	ldr	r2, [sp, #4]
	timer->period = period_in_ticks;
    41be:	6223      	str	r3, [r4, #32]
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    41c0:	4620      	mov	r0, r4
	timer->status = 0U;
    41c2:	2300      	movs	r3, #0
    41c4:	6263      	str	r3, [r4, #36]	; 0x24
		     duration_in_ticks);
}
    41c6:	b002      	add	sp, #8
    41c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    41cc:	f7ff befa 	b.w	3fc4 <z_add_timeout>
    41d0:	00004131 	.word	0x00004131

000041d4 <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
    41d4:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
    41d6:	4c07      	ldr	r4, [pc, #28]	; (41f4 <init_static_pools+0x20>)
    41d8:	4d07      	ldr	r5, [pc, #28]	; (41f8 <init_static_pools+0x24>)
    41da:	42ac      	cmp	r4, r5
    41dc:	d301      	bcc.n	41e2 <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
    41de:	2000      	movs	r0, #0
    41e0:	bd38      	pop	{r3, r4, r5, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    41e2:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
    41e6:	4620      	mov	r0, r4
	list->tail = (sys_dnode_t *)list;
    41e8:	e9c4 3305 	strd	r3, r3, [r4, #20]
    41ec:	f000 f82c 	bl	4248 <z_sys_mem_pool_base_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
    41f0:	341c      	adds	r4, #28
    41f2:	e7f2      	b.n	41da <init_static_pools+0x6>
    41f4:	20002630 	.word	0x20002630
    41f8:	20002630 	.word	0x20002630

000041fc <k_sleep>:
	return z_impl_k_sleep(ms);
    41fc:	f7ff bd26 	b.w	3c4c <z_impl_k_sleep>

00004200 <button_create>:
#include "es_button.h"

int button_create(es_button_t* button, const char* dev_name, u32_t pin,
                     gpio_callback_handler_t callback)
{
    4200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4202:	4604      	mov	r4, r0
    4204:	4615      	mov	r5, r2
    4206:	461e      	mov	r6, r3
    4208:	4608      	mov	r0, r1
    420a:	f7ff f8c7 	bl	339c <z_impl_device_get_binding>
    button->dev = device_get_binding(dev_name);
    button->pin = pin;
    420e:	6125      	str	r5, [r4, #16]
    button->dev = device_get_binding(dev_name);
    4210:	6020      	str	r0, [r4, #0]
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->config(port, access_op, pin, flags);
    4212:	6843      	ldr	r3, [r0, #4]
    4214:	462a      	mov	r2, r5
    4216:	681f      	ldr	r7, [r3, #0]
    4218:	2100      	movs	r1, #0
    421a:	f44f 739b 	mov.w	r3, #310	; 0x136
    421e:	47b8      	blx	r7
    gpio_pin_configure(button->dev, pin,
                       GPIO_DIR_IN | GPIO_PUD_PULL_UP | GPIO_INT | GPIO_INT_DEBOUNCE
                           | GPIO_INT_EDGE | GPIO_INT_ACTIVE_HIGH);
    gpio_init_callback(&button->gpio_cb, callback, BIT(pin));
    4220:	2201      	movs	r2, #1
    gpio_add_callback(button->dev, &button->gpio_cb);
    4222:	6820      	ldr	r0, [r4, #0]
				      u32_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    4224:	60a6      	str	r6, [r4, #8]
    gpio_init_callback(&button->gpio_cb, callback, BIT(pin));
    4226:	fa02 f305 	lsl.w	r3, r2, r5
	callback->pin_mask = pin_mask;
    422a:	60e3      	str	r3, [r4, #12]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	if (api->manage_callback == NULL) {
    422c:	6843      	ldr	r3, [r0, #4]
    422e:	68db      	ldr	r3, [r3, #12]
    4230:	1d21      	adds	r1, r4, #4
    4232:	b103      	cbz	r3, 4236 <button_create+0x36>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    4234:	4798      	blx	r3
    gpio_pin_enable_callback(button->dev, pin);
    4236:	6820      	ldr	r0, [r4, #0]
	if (api->enable_callback == NULL) {
    4238:	6843      	ldr	r3, [r0, #4]
    423a:	691b      	ldr	r3, [r3, #16]
    423c:	b113      	cbz	r3, 4244 <button_create+0x44>
	return api->enable_callback(port, access_op, pin);
    423e:	462a      	mov	r2, r5
    4240:	2100      	movs	r1, #0
    4242:	4798      	blx	r3
    return 0;
}
    4244:	2000      	movs	r0, #0
    4246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00004248 <z_sys_mem_pool_base_init>:

	return (*word >> (4*(bit / 4))) & 0xf;
}

void z_sys_mem_pool_base_init(struct sys_mem_pool_base *p)
{
    4248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int i;
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    424c:	6846      	ldr	r6, [r0, #4]
    424e:	8907      	ldrh	r7, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
    4250:	6801      	ldr	r1, [r0, #0]

	p->max_inline_level = -1;

	for (i = 0; i < p->n_levels; i++) {
    4252:	f890 800a 	ldrb.w	r8, [r0, #10]
	p->max_inline_level = -1;
    4256:	23ff      	movs	r3, #255	; 0xff
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    4258:	fb06 fc07 	mul.w	ip, r6, r7
	p->max_inline_level = -1;
    425c:	72c3      	strb	r3, [r0, #11]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
    425e:	4461      	add	r1, ip
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    4260:	4632      	mov	r2, r6
	for (i = 0; i < p->n_levels; i++) {
    4262:	2300      	movs	r3, #0
		int nblocks = buflen / sz;

		sys_dlist_init(&p->levels[i].free_list);
    4264:	f04f 090c 	mov.w	r9, #12
	for (i = 0; i < p->n_levels; i++) {
    4268:	4598      	cmp	r8, r3
    426a:	dc05      	bgt.n	4278 <z_sys_mem_pool_base_init+0x30>
    426c:	2300      	movs	r3, #0
		}

		sz = WB_DN(sz / 4);
	}

	for (i = 0; i < p->n_max; i++) {
    426e:	4619      	mov	r1, r3
    4270:	428f      	cmp	r7, r1
    4272:	dc20      	bgt.n	42b6 <z_sys_mem_pool_base_init+0x6e>
		void *block = block_ptr(p, p->max_sz, i);

		sys_dlist_append(&p->levels[0].free_list, block);
	}
}
    4274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		sys_dlist_init(&p->levels[i].free_list);
    4278:	f8d0 a00c 	ldr.w	sl, [r0, #12]
		int nblocks = buflen / sz;
    427c:	fbbc f5f2 	udiv	r5, ip, r2
		sys_dlist_init(&p->levels[i].free_list);
    4280:	fb09 fe03 	mul.w	lr, r9, r3
    4284:	eb0a 040e 	add.w	r4, sl, lr
    4288:	f104 0b04 	add.w	fp, r4, #4
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
    428c:	2d20      	cmp	r5, #32
    428e:	e9c4 bb01 	strd	fp, fp, [r4, #4]
    4292:	d805      	bhi.n	42a0 <z_sys_mem_pool_base_init+0x58>
			p->max_inline_level = i;
    4294:	72c3      	strb	r3, [r0, #11]
		sz = WB_DN(sz / 4);
    4296:	0892      	lsrs	r2, r2, #2
    4298:	f022 0203 	bic.w	r2, r2, #3
	for (i = 0; i < p->n_levels; i++) {
    429c:	3301      	adds	r3, #1
    429e:	e7e3      	b.n	4268 <z_sys_mem_pool_base_init+0x20>
			bits += (nblocks + 31)/32;
    42a0:	f115 041f 	adds.w	r4, r5, #31
    42a4:	bf48      	it	mi
    42a6:	f105 043e 	addmi.w	r4, r5, #62	; 0x3e
    42aa:	1164      	asrs	r4, r4, #5
			p->levels[i].bits_p = bits;
    42ac:	f84a 100e 	str.w	r1, [sl, lr]
			bits += (nblocks + 31)/32;
    42b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    42b4:	e7ef      	b.n	4296 <z_sys_mem_pool_base_init+0x4e>
		sys_dlist_append(&p->levels[0].free_list, block);
    42b6:	68c2      	ldr	r2, [r0, #12]
	return (u8_t *)p->buf + lsz * block;
    42b8:	6805      	ldr	r5, [r0, #0]
		sys_dlist_append(&p->levels[0].free_list, block);
    42ba:	f102 0c04 	add.w	ip, r2, #4
	return (u8_t *)p->buf + lsz * block;
    42be:	18ec      	adds	r4, r5, r3
	node->next = list;
    42c0:	f845 c003 	str.w	ip, [r5, r3]
	node->prev = list->tail;
    42c4:	6895      	ldr	r5, [r2, #8]
    42c6:	6065      	str	r5, [r4, #4]
	list->tail->next = node;
    42c8:	6895      	ldr	r5, [r2, #8]
	for (i = 0; i < p->n_max; i++) {
    42ca:	3101      	adds	r1, #1
    42cc:	602c      	str	r4, [r5, #0]
	list->tail = node;
    42ce:	4433      	add	r3, r6
    42d0:	6094      	str	r4, [r2, #8]
    42d2:	e7cd      	b.n	4270 <z_sys_mem_pool_base_init+0x28>

000042d4 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    42d4:	4604      	mov	r4, r0
    42d6:	b508      	push	{r3, lr}
    42d8:	4608      	mov	r0, r1
    42da:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    42dc:	461a      	mov	r2, r3
    42de:	47a0      	blx	r4
	return z_impl_k_current_get();
    42e0:	f7ff fcdc 	bl	3c9c <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
    42e4:	f7fd fc60 	bl	1ba8 <z_impl_k_thread_abort>

000042e8 <arch_printk_char_out>:
}
    42e8:	2000      	movs	r0, #0
    42ea:	4770      	bx	lr

000042ec <print_err>:
{
    42ec:	b570      	push	{r4, r5, r6, lr}
    42ee:	4604      	mov	r4, r0
    42f0:	460d      	mov	r5, r1
	out('E', ctx);
    42f2:	2045      	movs	r0, #69	; 0x45
    42f4:	47a0      	blx	r4
	out('R', ctx);
    42f6:	4629      	mov	r1, r5
    42f8:	2052      	movs	r0, #82	; 0x52
    42fa:	47a0      	blx	r4
	out('R', ctx);
    42fc:	4629      	mov	r1, r5
    42fe:	4623      	mov	r3, r4
    4300:	2052      	movs	r0, #82	; 0x52
}
    4302:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
    4306:	4718      	bx	r3

00004308 <z_vprintk>:
{
    4308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    430c:	b08b      	sub	sp, #44	; 0x2c
    430e:	461c      	mov	r4, r3
	char length_mod = 0;
    4310:	f04f 0800 	mov.w	r8, #0
    4314:	1e53      	subs	r3, r2, #1
{
    4316:	4606      	mov	r6, r0
    4318:	460f      	mov	r7, r1
    431a:	9302      	str	r3, [sp, #8]
	int min_width = -1;
    431c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
    4320:	46c1      	mov	r9, r8
			might_format = 0;
    4322:	2500      	movs	r5, #0
					break;
    4324:	e005      	b.n	4332 <z_vprintk+0x2a>
		if (!might_format) {
    4326:	b96d      	cbnz	r5, 4344 <z_vprintk+0x3c>
			if (*fmt != '%') {
    4328:	2825      	cmp	r0, #37	; 0x25
    432a:	f000 814f 	beq.w	45cc <z_vprintk+0x2c4>
				out((int)*fmt, ctx);
    432e:	4639      	mov	r1, r7
    4330:	47b0      	blx	r6
	while (*fmt) {
    4332:	9b02      	ldr	r3, [sp, #8]
    4334:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    4338:	9302      	str	r3, [sp, #8]
    433a:	2800      	cmp	r0, #0
    433c:	d1f3      	bne.n	4326 <z_vprintk+0x1e>
}
    433e:	b00b      	add	sp, #44	; 0x2c
    4340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
    4344:	2864      	cmp	r0, #100	; 0x64
    4346:	d06e      	beq.n	4426 <z_vprintk+0x11e>
    4348:	d81a      	bhi.n	4380 <z_vprintk+0x78>
    434a:	2839      	cmp	r0, #57	; 0x39
    434c:	d80a      	bhi.n	4364 <z_vprintk+0x5c>
    434e:	2831      	cmp	r0, #49	; 0x31
    4350:	d260      	bcs.n	4414 <z_vprintk+0x10c>
    4352:	282d      	cmp	r0, #45	; 0x2d
    4354:	f000 8140 	beq.w	45d8 <z_vprintk+0x2d0>
    4358:	2830      	cmp	r0, #48	; 0x30
    435a:	d04c      	beq.n	43f6 <z_vprintk+0xee>
    435c:	2825      	cmp	r0, #37	; 0x25
    435e:	d107      	bne.n	4370 <z_vprintk+0x68>
				out((int)'%', ctx);
    4360:	4639      	mov	r1, r7
    4362:	e00b      	b.n	437c <z_vprintk+0x74>
			switch (*fmt) {
    4364:	2858      	cmp	r0, #88	; 0x58
    4366:	f000 80bb 	beq.w	44e0 <z_vprintk+0x1d8>
    436a:	2863      	cmp	r0, #99	; 0x63
    436c:	f000 812a 	beq.w	45c4 <z_vprintk+0x2bc>
					out((int)'%', ctx);
    4370:	4639      	mov	r1, r7
    4372:	2025      	movs	r0, #37	; 0x25
    4374:	47b0      	blx	r6
					out((int)*fmt, ctx);
    4376:	9b02      	ldr	r3, [sp, #8]
    4378:	7818      	ldrb	r0, [r3, #0]
    437a:	4639      	mov	r1, r7
    437c:	47b0      	blx	r6
    437e:	e7d0      	b.n	4322 <z_vprintk+0x1a>
			switch (*fmt) {
    4380:	2870      	cmp	r0, #112	; 0x70
    4382:	f000 80a3 	beq.w	44cc <z_vprintk+0x1c4>
    4386:	d811      	bhi.n	43ac <z_vprintk+0xa4>
    4388:	2869      	cmp	r0, #105	; 0x69
    438a:	d04c      	beq.n	4426 <z_vprintk+0x11e>
    438c:	286c      	cmp	r0, #108	; 0x6c
    438e:	d105      	bne.n	439c <z_vprintk+0x94>
				} else if (*fmt == 'l' && length_mod == 'l') {
    4390:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    4394:	d12a      	bne.n	43ec <z_vprintk+0xe4>
					length_mod = 'L';
    4396:	f04f 084c 	mov.w	r8, #76	; 0x4c
    439a:	e7ca      	b.n	4332 <z_vprintk+0x2a>
			switch (*fmt) {
    439c:	2868      	cmp	r0, #104	; 0x68
    439e:	d1e7      	bne.n	4370 <z_vprintk+0x68>
				if (*fmt == 'h' && length_mod == 'h') {
    43a0:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
    43a4:	d122      	bne.n	43ec <z_vprintk+0xe4>
					length_mod = 'H';
    43a6:	f04f 0848 	mov.w	r8, #72	; 0x48
    43aa:	e7c2      	b.n	4332 <z_vprintk+0x2a>
			switch (*fmt) {
    43ac:	2875      	cmp	r0, #117	; 0x75
    43ae:	d071      	beq.n	4494 <z_vprintk+0x18c>
    43b0:	d818      	bhi.n	43e4 <z_vprintk+0xdc>
    43b2:	2873      	cmp	r0, #115	; 0x73
    43b4:	d1dc      	bne.n	4370 <z_vprintk+0x68>
				char *s = va_arg(ap, char *);
    43b6:	f854 5b04 	ldr.w	r5, [r4], #4
				while (*s) {
    43ba:	46ab      	mov	fp, r5
    43bc:	465b      	mov	r3, fp
    43be:	f81b 0b01 	ldrb.w	r0, [fp], #1
    43c2:	2800      	cmp	r0, #0
    43c4:	f040 80fb 	bne.w	45be <z_vprintk+0x2b6>
				if (padding == PAD_SPACE_AFTER) {
    43c8:	f1b9 0f03 	cmp.w	r9, #3
    43cc:	f040 810a 	bne.w	45e4 <z_vprintk+0x2dc>
					int remaining = min_width - (s - start);
    43d0:	1b5d      	subs	r5, r3, r5
    43d2:	ebaa 0505 	sub.w	r5, sl, r5
					while (remaining-- > 0) {
    43d6:	2d00      	cmp	r5, #0
    43d8:	dda3      	ble.n	4322 <z_vprintk+0x1a>
						out(' ', ctx);
    43da:	4639      	mov	r1, r7
    43dc:	2020      	movs	r0, #32
    43de:	47b0      	blx	r6
    43e0:	3d01      	subs	r5, #1
    43e2:	e7f8      	b.n	43d6 <z_vprintk+0xce>
			switch (*fmt) {
    43e4:	2878      	cmp	r0, #120	; 0x78
    43e6:	d07b      	beq.n	44e0 <z_vprintk+0x1d8>
    43e8:	287a      	cmp	r0, #122	; 0x7a
    43ea:	d1c1      	bne.n	4370 <z_vprintk+0x68>
				} else if (length_mod == 0) {
    43ec:	f1b8 0f00 	cmp.w	r8, #0
    43f0:	d1be      	bne.n	4370 <z_vprintk+0x68>
    43f2:	4680      	mov	r8, r0
    43f4:	e79d      	b.n	4332 <z_vprintk+0x2a>
				if (min_width < 0 && padding == PAD_NONE) {
    43f6:	f1ba 0f00 	cmp.w	sl, #0
    43fa:	da0e      	bge.n	441a <z_vprintk+0x112>
    43fc:	f1b9 0f00 	cmp.w	r9, #0
    4400:	f000 80ed 	beq.w	45de <z_vprintk+0x2d6>
					min_width = *fmt - '0';
    4404:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
    4408:	f1b9 0f00 	cmp.w	r9, #0
    440c:	bf08      	it	eq
    440e:	f04f 0902 	moveq.w	r9, #2
    4412:	e78e      	b.n	4332 <z_vprintk+0x2a>
				if (min_width < 0) {
    4414:	f1ba 0f00 	cmp.w	sl, #0
    4418:	dbf4      	blt.n	4404 <z_vprintk+0xfc>
					min_width = 10 * min_width + *fmt - '0';
    441a:	230a      	movs	r3, #10
    441c:	fb03 0a0a 	mla	sl, r3, sl, r0
    4420:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
    4424:	e7f0      	b.n	4408 <z_vprintk+0x100>
				if (length_mod == 'z') {
    4426:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
    442a:	d102      	bne.n	4432 <z_vprintk+0x12a>
					d = va_arg(ap, int);
    442c:	f854 5b04 	ldr.w	r5, [r4], #4
    4430:	e01f      	b.n	4472 <z_vprintk+0x16a>
				} else if (length_mod == 'l') {
    4432:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    4436:	d0f9      	beq.n	442c <z_vprintk+0x124>
				} else if (length_mod == 'L') {
    4438:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
    443c:	d1f6      	bne.n	442c <z_vprintk+0x124>
					long long lld = va_arg(ap, long long);
    443e:	3407      	adds	r4, #7
    4440:	f024 0407 	bic.w	r4, r4, #7
    4444:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (lld > __LONG_MAX__ ||
    4448:	f112 4100 	adds.w	r1, r2, #2147483648	; 0x80000000
    444c:	9106      	str	r1, [sp, #24]
    444e:	f143 0100 	adc.w	r1, r3, #0
    4452:	9107      	str	r1, [sp, #28]
    4454:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
    4458:	2100      	movs	r1, #0
    445a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    445e:	4561      	cmp	r1, ip
    4460:	bf08      	it	eq
    4462:	4558      	cmpeq	r0, fp
    4464:	d204      	bcs.n	4470 <z_vprintk+0x168>
						print_err(out, ctx);
    4466:	4639      	mov	r1, r7
    4468:	4630      	mov	r0, r6
    446a:	f7ff ff3f 	bl	42ec <print_err>
						break;
    446e:	e758      	b.n	4322 <z_vprintk+0x1a>
					d = lld;
    4470:	4615      	mov	r5, r2
				if (d < 0) {
    4472:	2d00      	cmp	r5, #0
    4474:	da05      	bge.n	4482 <z_vprintk+0x17a>
					out((int)'-', ctx);
    4476:	4639      	mov	r1, r7
    4478:	202d      	movs	r0, #45	; 0x2d
    447a:	47b0      	blx	r6
					d = -d;
    447c:	426d      	negs	r5, r5
					min_width--;
    447e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
    4482:	f8cd a000 	str.w	sl, [sp]
    4486:	464b      	mov	r3, r9
    4488:	462a      	mov	r2, r5
				_printk_dec_ulong(out, ctx, u, padding,
    448a:	4639      	mov	r1, r7
    448c:	4630      	mov	r0, r6
    448e:	f7fc f8af 	bl	5f0 <_printk_dec_ulong>
				break;
    4492:	e746      	b.n	4322 <z_vprintk+0x1a>
				if (length_mod == 'z') {
    4494:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
    4498:	d102      	bne.n	44a0 <z_vprintk+0x198>
					u = va_arg(ap, unsigned int);
    449a:	f854 2b04 	ldr.w	r2, [r4], #4
    449e:	e011      	b.n	44c4 <z_vprintk+0x1bc>
				} else if (length_mod == 'l') {
    44a0:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    44a4:	d0f9      	beq.n	449a <z_vprintk+0x192>
				} else if (length_mod == 'L') {
    44a6:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
    44aa:	d1f6      	bne.n	449a <z_vprintk+0x192>
					unsigned long long llu =
    44ac:	3407      	adds	r4, #7
    44ae:	f024 0407 	bic.w	r4, r4, #7
    44b2:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
    44b6:	2100      	movs	r1, #0
    44b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    44bc:	4299      	cmp	r1, r3
    44be:	bf08      	it	eq
    44c0:	4290      	cmpeq	r0, r2
    44c2:	d3d0      	bcc.n	4466 <z_vprintk+0x15e>
				_printk_dec_ulong(out, ctx, u, padding,
    44c4:	f8cd a000 	str.w	sl, [sp]
    44c8:	464b      	mov	r3, r9
    44ca:	e7de      	b.n	448a <z_vprintk+0x182>
				out('0', ctx);
    44cc:	4639      	mov	r1, r7
    44ce:	2030      	movs	r0, #48	; 0x30
    44d0:	47b0      	blx	r6
				out('x', ctx);
    44d2:	4639      	mov	r1, r7
    44d4:	2078      	movs	r0, #120	; 0x78
    44d6:	47b0      	blx	r6
					min_width = 8;
    44d8:	f04f 0a08 	mov.w	sl, #8
				padding = PAD_ZERO_BEFORE;
    44dc:	f04f 0901 	mov.w	r9, #1
				if (*fmt == 'p') {
    44e0:	9b02      	ldr	r3, [sp, #8]
    44e2:	781b      	ldrb	r3, [r3, #0]
    44e4:	2b70      	cmp	r3, #112	; 0x70
    44e6:	d104      	bne.n	44f2 <z_vprintk+0x1ea>
					x = va_arg(ap, unsigned int);
    44e8:	f854 3b04 	ldr.w	r3, [r4], #4
    44ec:	9304      	str	r3, [sp, #16]
    44ee:	2300      	movs	r3, #0
    44f0:	e00d      	b.n	450e <z_vprintk+0x206>
				} else if (length_mod == 'l') {
    44f2:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    44f6:	d0f7      	beq.n	44e8 <z_vprintk+0x1e0>
				} else if (length_mod == 'L') {
    44f8:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
    44fc:	d1f4      	bne.n	44e8 <z_vprintk+0x1e0>
					x = va_arg(ap, unsigned long long);
    44fe:	3407      	adds	r4, #7
    4500:	f024 0307 	bic.w	r3, r4, #7
    4504:	461c      	mov	r4, r3
    4506:	685b      	ldr	r3, [r3, #4]
    4508:	f854 2b08 	ldr.w	r2, [r4], #8
    450c:	9204      	str	r2, [sp, #16]
	int digits = 0;
    450e:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
    4510:	2210      	movs	r2, #16
	int digits = 0;
    4512:	9103      	str	r1, [sp, #12]
	int found_largest_digit = 0;
    4514:	9105      	str	r1, [sp, #20]
	int shift = sizeof(num) * 8;
    4516:	f04f 0b40 	mov.w	fp, #64	; 0x40
		shift -= 4;
    451a:	f1ab 0b04 	sub.w	fp, fp, #4
		nibble = (num >> shift) & 0xf;
    451e:	9804      	ldr	r0, [sp, #16]
    4520:	f1cb 0c20 	rsb	ip, fp, #32
    4524:	f1ab 0120 	sub.w	r1, fp, #32
    4528:	fa20 f00b 	lsr.w	r0, r0, fp
    452c:	fa03 fc0c 	lsl.w	ip, r3, ip
    4530:	ea40 000c 	orr.w	r0, r0, ip
    4534:	fa23 f101 	lsr.w	r1, r3, r1
    4538:	4308      	orrs	r0, r1
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
    453a:	f010 000f 	ands.w	r0, r0, #15
    453e:	d108      	bne.n	4552 <z_vprintk+0x24a>
    4540:	9905      	ldr	r1, [sp, #20]
    4542:	b911      	cbnz	r1, 454a <z_vprintk+0x242>
    4544:	f1bb 0f00 	cmp.w	fp, #0
    4548:	d124      	bne.n	4594 <z_vprintk+0x28c>
			nibble += nibble > 9 ? 87 : 48;
    454a:	2130      	movs	r1, #48	; 0x30
    454c:	e005      	b.n	455a <z_vprintk+0x252>
			found_largest_digit = 1;
    454e:	9505      	str	r5, [sp, #20]
    4550:	e7e3      	b.n	451a <z_vprintk+0x212>
			nibble += nibble > 9 ? 87 : 48;
    4552:	2809      	cmp	r0, #9
    4554:	bf8c      	ite	hi
    4556:	2157      	movhi	r1, #87	; 0x57
    4558:	2130      	movls	r1, #48	; 0x30
    455a:	4408      	add	r0, r1
			out((int)nibble, ctx);
    455c:	b240      	sxtb	r0, r0
    455e:	4639      	mov	r1, r7
    4560:	9308      	str	r3, [sp, #32]
    4562:	9205      	str	r2, [sp, #20]
    4564:	47b0      	blx	r6
			digits++;
    4566:	9b03      	ldr	r3, [sp, #12]
	while (shift >= 4) {
    4568:	9a05      	ldr	r2, [sp, #20]
			digits++;
    456a:	3301      	adds	r3, #1
    456c:	9303      	str	r3, [sp, #12]
	while (shift >= 4) {
    456e:	9b08      	ldr	r3, [sp, #32]
    4570:	f1bb 0f00 	cmp.w	fp, #0
    4574:	d1eb      	bne.n	454e <z_vprintk+0x246>
	if (padding == PAD_SPACE_AFTER) {
    4576:	f1b9 0f03 	cmp.w	r9, #3
    457a:	f47f aed2 	bne.w	4322 <z_vprintk+0x1a>
		remaining = min_width * 2 - digits;
    457e:	9b03      	ldr	r3, [sp, #12]
    4580:	ebc3 054a 	rsb	r5, r3, sl, lsl #1
		while (remaining-- > 0) {
    4584:	2d00      	cmp	r5, #0
    4586:	f77f aecc 	ble.w	4322 <z_vprintk+0x1a>
			out(' ', ctx);
    458a:	4639      	mov	r1, r7
    458c:	2020      	movs	r0, #32
    458e:	47b0      	blx	r6
    4590:	3d01      	subs	r5, #1
    4592:	e7f7      	b.n	4584 <z_vprintk+0x27c>
		if (remaining-- <= min_width) {
    4594:	1e51      	subs	r1, r2, #1
    4596:	4592      	cmp	sl, r2
    4598:	9108      	str	r1, [sp, #32]
    459a:	db07      	blt.n	45ac <z_vprintk+0x2a4>
			if (padding == PAD_ZERO_BEFORE) {
    459c:	f1b9 0f01 	cmp.w	r9, #1
    45a0:	d106      	bne.n	45b0 <z_vprintk+0x2a8>
    45a2:	9309      	str	r3, [sp, #36]	; 0x24
				out('0', ctx);
    45a4:	4639      	mov	r1, r7
    45a6:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
    45a8:	47b0      	blx	r6
    45aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
					x = va_arg(ap, unsigned int);
    45ac:	9a08      	ldr	r2, [sp, #32]
    45ae:	e7b4      	b.n	451a <z_vprintk+0x212>
			} else if (padding == PAD_SPACE_BEFORE) {
    45b0:	f1b9 0f02 	cmp.w	r9, #2
    45b4:	d1fa      	bne.n	45ac <z_vprintk+0x2a4>
    45b6:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
    45b8:	4639      	mov	r1, r7
    45ba:	2020      	movs	r0, #32
    45bc:	e7f4      	b.n	45a8 <z_vprintk+0x2a0>
					out((int)(*s++), ctx);
    45be:	4639      	mov	r1, r7
    45c0:	47b0      	blx	r6
    45c2:	e6fb      	b.n	43bc <z_vprintk+0xb4>
				out(c, ctx);
    45c4:	4639      	mov	r1, r7
    45c6:	f854 0b04 	ldr.w	r0, [r4], #4
    45ca:	e6d7      	b.n	437c <z_vprintk+0x74>
				length_mod = 0;
    45cc:	46a8      	mov	r8, r5
				padding = PAD_NONE;
    45ce:	46a9      	mov	r9, r5
				min_width = -1;
    45d0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
				might_format = 1;
    45d4:	2501      	movs	r5, #1
    45d6:	e6ac      	b.n	4332 <z_vprintk+0x2a>
				padding = PAD_SPACE_AFTER;
    45d8:	f04f 0903 	mov.w	r9, #3
    45dc:	e6a9      	b.n	4332 <z_vprintk+0x2a>
					padding = PAD_ZERO_BEFORE;
    45de:	f04f 0901 	mov.w	r9, #1
    45e2:	e6a6      	b.n	4332 <z_vprintk+0x2a>
			might_format = 0;
    45e4:	4605      	mov	r5, r0
		++fmt;
    45e6:	e6a4      	b.n	4332 <z_vprintk+0x2a>

000045e8 <printk>:
{
    45e8:	b40f      	push	{r0, r1, r2, r3}
    45ea:	b507      	push	{r0, r1, r2, lr}
    45ec:	a904      	add	r1, sp, #16
    45ee:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    45f2:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
    45f4:	f7fc f84e 	bl	694 <vprintk>
}
    45f8:	b003      	add	sp, #12
    45fa:	f85d eb04 	ldr.w	lr, [sp], #4
    45fe:	b004      	add	sp, #16
    4600:	4770      	bx	lr

00004602 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_STAT, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);

GEN_ABS_SYM_END
    4602:	4770      	bx	lr

00004604 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
    4604:	2300      	movs	r3, #0
	list->head = NULL;
    4606:	e9c0 3300 	strd	r3, r3, [r0]
}
    460a:	4770      	bx	lr

0000460c <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
    460c:	6803      	ldr	r3, [r0, #0]
    460e:	b923      	cbnz	r3, 461a <log_list_add_tail+0xe>
		list->head = msg;
    4610:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
    4612:	2300      	movs	r3, #0
	list->tail = msg;
    4614:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
    4616:	600b      	str	r3, [r1, #0]
}
    4618:	4770      	bx	lr
		list->tail->next = msg;
    461a:	6843      	ldr	r3, [r0, #4]
    461c:	6019      	str	r1, [r3, #0]
    461e:	e7f8      	b.n	4612 <log_list_add_tail+0x6>

00004620 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
    4620:	6800      	ldr	r0, [r0, #0]
    4622:	4770      	bx	lr

00004624 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
	struct log_msg *msg = list->head;
    4624:	6803      	ldr	r3, [r0, #0]

	if (list->head != NULL) {
    4626:	b10b      	cbz	r3, 462c <log_list_head_get+0x8>
		list->head = list->head->next;
    4628:	681a      	ldr	r2, [r3, #0]
    462a:	6002      	str	r2, [r0, #0]
	}

	return msg;
}
    462c:	4618      	mov	r0, r3
    462e:	4770      	bx	lr

00004630 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
    4630:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    4632:	f7fc fafb 	bl	c2c <log_msg_chunk_alloc>

	if (msg != NULL) {
    4636:	b118      	cbz	r0, 4640 <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
    4638:	2301      	movs	r3, #1
    463a:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    463c:	2300      	movs	r3, #0
    463e:	8103      	strh	r3, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
	}

	return msg;
}
    4640:	bd08      	pop	{r3, pc}

00004642 <k_cycle_get_32_wrapper>:
#ifndef _ASMLANGUAGE
extern u32_t z_timer_cycle_get_32(void);

static inline u32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
    4642:	f7fc be77 	b.w	1334 <z_timer_cycle_get_32>

00004646 <dummy_timestamp>:
    4646:	2000      	movs	r0, #0
    4648:	4770      	bx	lr

0000464a <log_0>:
{
    464a:	b538      	push	{r3, r4, r5, lr}
    464c:	4605      	mov	r5, r0
    464e:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
    4650:	f7ff ffee 	bl	4630 <z_log_msg_std_alloc>

	if (msg != NULL) {
    4654:	b128      	cbz	r0, 4662 <log_0+0x18>
		msg->str = str;
    4656:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
    4658:	4621      	mov	r1, r4
}
    465a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
    465e:	f7fc ba07 	b.w	a70 <msg_finalize>
}
    4662:	bd38      	pop	{r3, r4, r5, pc}

00004664 <log_1>:
{
    4664:	b570      	push	{r4, r5, r6, lr}
    4666:	4604      	mov	r4, r0
    4668:	460e      	mov	r6, r1
    466a:	4615      	mov	r5, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
    466c:	f7ff ffe0 	bl	4630 <z_log_msg_std_alloc>

	if (msg != NULL) {
    4670:	b158      	cbz	r0, 468a <log_1+0x26>
		msg->str = str;
    4672:	6104      	str	r4, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
    4674:	7a44      	ldrb	r4, [r0, #9]
		msg->payload.single.args[0] = arg1;
    4676:	6146      	str	r6, [r0, #20]
		msg->hdr.params.std.nargs = 1U;
    4678:	2201      	movs	r2, #1
    467a:	f362 1407 	bfi	r4, r2, #4, #4
    467e:	7244      	strb	r4, [r0, #9]
		msg_finalize(msg, src_level);
    4680:	4629      	mov	r1, r5
}
    4682:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
    4686:	f7fc b9f3 	b.w	a70 <msg_finalize>
}
    468a:	bd70      	pop	{r4, r5, r6, pc}

0000468c <log_2>:
{
    468c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4690:	4605      	mov	r5, r0
    4692:	4688      	mov	r8, r1
    4694:	4617      	mov	r7, r2
    4696:	461e      	mov	r6, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
    4698:	f7ff ffca 	bl	4630 <z_log_msg_std_alloc>

	if (msg != NULL) {
    469c:	b160      	cbz	r0, 46b8 <log_2+0x2c>
		msg->str = str;
    469e:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
    46a0:	7a45      	ldrb	r5, [r0, #9]
    46a2:	2302      	movs	r3, #2
    46a4:	f363 1507 	bfi	r5, r3, #4, #4
    46a8:	7245      	strb	r5, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
    46aa:	e9c0 8705 	strd	r8, r7, [r0, #20]
		msg_finalize(msg, src_level);
    46ae:	4631      	mov	r1, r6
}
    46b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
    46b4:	f7fc b9dc 	b.w	a70 <msg_finalize>
}
    46b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000046bc <log_3>:
{
    46bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    46c0:	4605      	mov	r5, r0
    46c2:	4689      	mov	r9, r1
    46c4:	4690      	mov	r8, r2
    46c6:	461f      	mov	r7, r3
    46c8:	f8bd 6020 	ldrh.w	r6, [sp, #32]
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
    46cc:	f7ff ffb0 	bl	4630 <z_log_msg_std_alloc>

	if (msg != NULL) {
    46d0:	b168      	cbz	r0, 46ee <log_3+0x32>
		msg->str = str;
    46d2:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
    46d4:	7a45      	ldrb	r5, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
		msg->payload.single.args[2] = arg3;
    46d6:	61c7      	str	r7, [r0, #28]
		msg->hdr.params.std.nargs = 3U;
    46d8:	2303      	movs	r3, #3
    46da:	f363 1507 	bfi	r5, r3, #4, #4
    46de:	7245      	strb	r5, [r0, #9]
		msg->payload.single.args[1] = arg2;
    46e0:	e9c0 9805 	strd	r9, r8, [r0, #20]
		msg_finalize(msg, src_level);
    46e4:	4631      	mov	r1, r6
}
    46e6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
    46ea:	f7fc b9c1 	b.w	a70 <msg_finalize>
}
    46ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000046f2 <log_n>:
{
    46f2:	b510      	push	{r4, lr}
    46f4:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
    46f6:	f000 f89b 	bl	4830 <log_msg_create_n>
		if (msg == NULL) {
    46fa:	b120      	cbz	r0, 4706 <log_n+0x14>
		msg_finalize(msg, src_level);
    46fc:	4621      	mov	r1, r4
}
    46fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
    4702:	f7fc b9b5 	b.w	a70 <msg_finalize>
}
    4706:	bd10      	pop	{r4, pc}

00004708 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    u8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
    4708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    470c:	461c      	mov	r4, r3
	u32_t available_len = msg->hdr.params.hexdump.length;
    470e:	8903      	ldrh	r3, [r0, #8]
{
    4710:	f89d 7020 	ldrb.w	r7, [sp, #32]
	u32_t available_len = msg->hdr.params.hexdump.length;
    4714:	089b      	lsrs	r3, r3, #2
	u8_t *head_data;
	u32_t chunk_len;
	u32_t req_len;
	u32_t cpy_len;

	if (offset >= available_len) {
    4716:	42a3      	cmp	r3, r4
{
    4718:	460e      	mov	r6, r1
	if (offset >= available_len) {
    471a:	d803      	bhi.n	4724 <log_msg_hexdump_data_op+0x1c>
		*length = 0;
    471c:	2300      	movs	r3, #0
    471e:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
    4720:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
    4724:	6811      	ldr	r1, [r2, #0]
    4726:	4421      	add	r1, r4
    4728:	4299      	cmp	r1, r3
		*length = available_len - offset;
    472a:	bf84      	itt	hi
    472c:	1b19      	subhi	r1, r3, r4
    472e:	6011      	strhi	r1, [r2, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
    4730:	2b0c      	cmp	r3, #12
	req_len = *length;
    4732:	f8d2 9000 	ldr.w	r9, [r2]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
    4736:	d928      	bls.n	478a <log_msg_hexdump_data_op+0x82>
	if (offset < chunk_len) {
    4738:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
    473a:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
    473e:	d82b      	bhi.n	4798 <log_msg_hexdump_data_op+0x90>
		head_data = msg->payload.ext.data.bytes;
    4740:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
    4742:	2308      	movs	r3, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
    4744:	454b      	cmp	r3, r9
    4746:	bf28      	it	cs
    4748:	464b      	movcs	r3, r9
    474a:	461d      	mov	r5, r3
		if (put_op) {
    474c:	4420      	add	r0, r4
			(void)memcpy(&head_data[offset], data, cpy_len);
    474e:	461a      	mov	r2, r3
		if (put_op) {
    4750:	b1ff      	cbz	r7, 4792 <log_msg_hexdump_data_op+0x8a>
			(void)memcpy(&head_data[offset], data, cpy_len);
    4752:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
    4754:	f000 fb79 	bl	4e4a <memcpy>
		req_len -= cpy_len;
    4758:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
    475c:	442e      	add	r6, r5
	while (req_len > 0) {
    475e:	f1b9 0f00 	cmp.w	r9, #0
    4762:	d0dd      	beq.n	4720 <log_msg_hexdump_data_op+0x18>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
    4764:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
    4768:	454d      	cmp	r5, r9
    476a:	bf28      	it	cs
    476c:	464d      	movcs	r5, r9
		if (put_op) {
    476e:	1d20      	adds	r0, r4, #4
    4770:	4440      	add	r0, r8
			(void)memcpy(&cont->payload.bytes[offset],
    4772:	462a      	mov	r2, r5
		if (put_op) {
    4774:	b1bf      	cbz	r7, 47a6 <log_msg_hexdump_data_op+0x9e>
			(void)memcpy(&cont->payload.bytes[offset],
    4776:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
    4778:	f000 fb67 	bl	4e4a <memcpy>
		req_len -= cpy_len;
    477c:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
    4780:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
    4784:	442e      	add	r6, r5
		offset = 0;
    4786:	2400      	movs	r4, #0
    4788:	e7e9      	b.n	475e <log_msg_hexdump_data_op+0x56>
		head_data = msg->payload.single.bytes;
    478a:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
    478c:	f04f 0800 	mov.w	r8, #0
    4790:	e7d8      	b.n	4744 <log_msg_hexdump_data_op+0x3c>
			(void)memcpy(data, &head_data[offset], cpy_len);
    4792:	4601      	mov	r1, r0
    4794:	4630      	mov	r0, r6
    4796:	e7dd      	b.n	4754 <log_msg_hexdump_data_op+0x4c>
		offset -= chunk_len;
    4798:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
    479a:	2c1b      	cmp	r4, #27
    479c:	d9df      	bls.n	475e <log_msg_hexdump_data_op+0x56>
			cont = cont->next;
    479e:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
    47a2:	3c1c      	subs	r4, #28
    47a4:	e7f9      	b.n	479a <log_msg_hexdump_data_op+0x92>
			(void)memcpy(data, &cont->payload.bytes[offset],
    47a6:	4601      	mov	r1, r0
    47a8:	4630      	mov	r0, r6
    47aa:	e7e5      	b.n	4778 <log_msg_hexdump_data_op+0x70>

000047ac <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    47ac:	3004      	adds	r0, #4
    47ae:	f3bf 8f5b 	dmb	ish
    47b2:	e850 3f00 	ldrex	r3, [r0]
    47b6:	3301      	adds	r3, #1
    47b8:	e840 3200 	strex	r2, r3, [r0]
    47bc:	2a00      	cmp	r2, #0
    47be:	d1f8      	bne.n	47b2 <log_msg_get+0x6>
    47c0:	f3bf 8f5b 	dmb	ish
}
    47c4:	4770      	bx	lr

000047c6 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
    47c6:	7a40      	ldrb	r0, [r0, #9]
}
    47c8:	0900      	lsrs	r0, r0, #4
    47ca:	4770      	bx	lr

000047cc <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
    47cc:	7a43      	ldrb	r3, [r0, #9]
    47ce:	091b      	lsrs	r3, r3, #4
    47d0:	428b      	cmp	r3, r1
    47d2:	d916      	bls.n	4802 <log_msg_arg_get+0x36>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
    47d4:	2b03      	cmp	r3, #3
    47d6:	d803      	bhi.n	47e0 <log_msg_arg_get+0x14>
		arg = msg->payload.single.args[arg_idx];
    47d8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    47dc:	6948      	ldr	r0, [r1, #20]
    47de:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
    47e0:	2901      	cmp	r1, #1
    47e2:	d803      	bhi.n	47ec <log_msg_arg_get+0x20>
		return msg->payload.ext.data.args[arg_idx];
    47e4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    47e8:	6988      	ldr	r0, [r1, #24]
    47ea:	4770      	bx	lr
	cont = msg->payload.ext.next;
    47ec:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
    47ee:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
    47f0:	2906      	cmp	r1, #6
    47f2:	d803      	bhi.n	47fc <log_msg_arg_get+0x30>
	return cont->payload.args[arg_idx];
    47f4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    47f8:	6848      	ldr	r0, [r1, #4]
    47fa:	4770      	bx	lr
		arg_idx -= ARGS_CONT_MSG;
    47fc:	3907      	subs	r1, #7
		cont = cont->next;
    47fe:	681b      	ldr	r3, [r3, #0]
    4800:	e7f6      	b.n	47f0 <log_msg_arg_get+0x24>
		return 0;
    4802:	2000      	movs	r0, #0
}
    4804:	4770      	bx	lr

00004806 <log_msg_put>:
{
    4806:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    4808:	1d02      	adds	r2, r0, #4
    480a:	f3bf 8f5b 	dmb	ish
    480e:	e852 1f00 	ldrex	r1, [r2]
    4812:	3901      	subs	r1, #1
    4814:	e842 1c00 	strex	ip, r1, [r2]
    4818:	f1bc 0f00 	cmp.w	ip, #0
    481c:	d1f7      	bne.n	480e <log_msg_put+0x8>
    481e:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
    4822:	685b      	ldr	r3, [r3, #4]
    4824:	b90b      	cbnz	r3, 482a <log_msg_put+0x24>
		msg_free(msg);
    4826:	f7fc ba13 	b.w	c50 <msg_free>
}
    482a:	4770      	bx	lr

0000482c <log_msg_str_get>:
}
    482c:	6900      	ldr	r0, [r0, #16]
    482e:	4770      	bx	lr

00004830 <log_msg_create_n>:
{
    4830:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4834:	4682      	mov	sl, r0
    4836:	4688      	mov	r8, r1
    4838:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    483a:	f7fc f9f7 	bl	c2c <log_msg_chunk_alloc>
	if (msg != NULL) {
    483e:	4604      	mov	r4, r0
    4840:	b330      	cbz	r0, 4890 <log_msg_create_n+0x60>
		msg->hdr.ref_cnt = 1;
    4842:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
    4844:	2600      	movs	r6, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
    4846:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
    4848:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    484a:	8106      	strh	r6, [r0, #8]
    484c:	d909      	bls.n	4862 <log_msg_create_n+0x32>
	msg->hdr.params.generic.ext = 1;
    484e:	2202      	movs	r2, #2
    4850:	8102      	strh	r2, [r0, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
    4852:	f1a5 0902 	sub.w	r9, r5, #2
	next = &msg->payload.ext.next;
    4856:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
    485a:	6146      	str	r6, [r0, #20]
	while (n > 0) {
    485c:	f1b9 0f00 	cmp.w	r9, #0
    4860:	dc0e      	bgt.n	4880 <log_msg_create_n+0x50>
		msg->hdr.params.std.nargs = nargs;
    4862:	7a63      	ldrb	r3, [r4, #9]
		msg->str = str;
    4864:	f8c4 a010 	str.w	sl, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
    4868:	f365 1307 	bfi	r3, r5, #4, #4
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
    486c:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
    486e:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
    4870:	d818      	bhi.n	48a4 <log_msg_create_n+0x74>
		(void)memcpy(msg->payload.single.args, args,
    4872:	00aa      	lsls	r2, r5, #2
    4874:	4641      	mov	r1, r8
    4876:	f104 0014 	add.w	r0, r4, #20
    487a:	f000 fae6 	bl	4e4a <memcpy>
		nargs  = 0U;
    487e:	e007      	b.n	4890 <log_msg_create_n+0x60>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
    4880:	f7fc f9d4 	bl	c2c <log_msg_chunk_alloc>
		if (cont == NULL) {
    4884:	4607      	mov	r7, r0
    4886:	b930      	cbnz	r0, 4896 <log_msg_create_n+0x66>
			msg_free(msg);
    4888:	4620      	mov	r0, r4
    488a:	f7fc f9e1 	bl	c50 <msg_free>
			return NULL;
    488e:	463c      	mov	r4, r7
}
    4890:	4620      	mov	r0, r4
    4892:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
    4896:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
    489a:	f1a9 0907 	sub.w	r9, r9, #7
    489e:	6006      	str	r6, [r0, #0]
		next = &cont->next;
    48a0:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
    48a2:	e7db      	b.n	485c <log_msg_create_n+0x2c>
		(void)memcpy(msg->payload.ext.data.args, args,
    48a4:	4641      	mov	r1, r8
    48a6:	2208      	movs	r2, #8
    48a8:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
    48ac:	6967      	ldr	r7, [r4, #20]
		(void)memcpy(msg->payload.ext.data.args, args,
    48ae:	f000 facc 	bl	4e4a <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
    48b2:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
    48b4:	f108 0808 	add.w	r8, r8, #8
		u32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
    48b8:	2d07      	cmp	r5, #7
    48ba:	462e      	mov	r6, r5
    48bc:	bf28      	it	cs
    48be:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
    48c0:	ea4f 0986 	mov.w	r9, r6, lsl #2
    48c4:	4641      	mov	r1, r8
    48c6:	1d38      	adds	r0, r7, #4
    48c8:	464a      	mov	r2, r9
    48ca:	f000 fabe 	bl	4e4a <memcpy>
	while (nargs != 0U) {
    48ce:	1bad      	subs	r5, r5, r6
		args += cpy_args;
    48d0:	44c8      	add	r8, r9
		cont = cont->next;
    48d2:	683f      	ldr	r7, [r7, #0]
	while (nargs != 0U) {
    48d4:	d1f0      	bne.n	48b8 <log_msg_create_n+0x88>
    48d6:	e7db      	b.n	4890 <log_msg_create_n+0x60>

000048d8 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      u8_t *data,
			      size_t *length,
			      size_t offset)
{
    48d8:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
    48da:	2400      	movs	r4, #0
    48dc:	9400      	str	r4, [sp, #0]
    48de:	f7ff ff13 	bl	4708 <log_msg_hexdump_data_op>
}
    48e2:	b002      	add	sp, #8
    48e4:	bd10      	pop	{r4, pc}

000048e6 <buffer_write>:
{
    48e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    48e8:	4606      	mov	r6, r0
    48ea:	460d      	mov	r5, r1
    48ec:	4614      	mov	r4, r2
    48ee:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
    48f0:	4621      	mov	r1, r4
    48f2:	4628      	mov	r0, r5
    48f4:	463a      	mov	r2, r7
    48f6:	47b0      	blx	r6
	} while (len != 0);
    48f8:	1a24      	subs	r4, r4, r0
		buf += processed;
    48fa:	4405      	add	r5, r0
	} while (len != 0);
    48fc:	d1f8      	bne.n	48f0 <buffer_write+0xa>
}
    48fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00004900 <std_print>:
{
    4900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4904:	b08e      	sub	sp, #56	; 0x38
    4906:	af0e      	add	r7, sp, #56	; 0x38
    4908:	4681      	mov	r9, r0
    490a:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
    490c:	f7ff ff8e 	bl	482c <log_msg_str_get>
    4910:	4606      	mov	r6, r0
	u32_t nargs = log_msg_nargs_get(msg);
    4912:	4648      	mov	r0, r9
    4914:	f7ff ff57 	bl	47c6 <log_msg_nargs_get>
	u32_t *args = alloca(sizeof(u32_t)*nargs);
    4918:	0083      	lsls	r3, r0, #2
    491a:	3307      	adds	r3, #7
    491c:	f023 0307 	bic.w	r3, r3, #7
    4920:	ebad 0d03 	sub.w	sp, sp, r3
	u32_t nargs = log_msg_nargs_get(msg);
    4924:	4682      	mov	sl, r0
	u32_t *args = alloca(sizeof(u32_t)*nargs);
    4926:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
    4928:	f04f 0800 	mov.w	r8, #0
    492c:	45d0      	cmp	r8, sl
    492e:	d116      	bne.n	495e <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
    4930:	4648      	mov	r0, r9
    4932:	f7ff ff48 	bl	47c6 <log_msg_nargs_get>
    4936:	280f      	cmp	r0, #15
    4938:	d81e      	bhi.n	4978 <std_print+0x78>
    493a:	e8df f010 	tbh	[pc, r0, lsl #1]
    493e:	0019      	.short	0x0019
    4940:	00260020 	.word	0x00260020
    4944:	0036002d 	.word	0x0036002d
    4948:	004e0041 	.word	0x004e0041
    494c:	006e005d 	.word	0x006e005d
    4950:	00960081 	.word	0x00960081
    4954:	00c600ad 	.word	0x00c600ad
    4958:	00fe00e1 	.word	0x00fe00e1
    495c:	011d      	.short	0x011d
		args[i] = log_msg_arg_get(msg, i);
    495e:	4641      	mov	r1, r8
    4960:	4648      	mov	r0, r9
    4962:	f7ff ff33 	bl	47cc <log_msg_arg_get>
    4966:	f844 0028 	str.w	r0, [r4, r8, lsl #2]
	for (i = 0; i < nargs; i++) {
    496a:	f108 0801 	add.w	r8, r8, #1
    496e:	e7dd      	b.n	492c <std_print+0x2c>
		print_formatted(log_output, str);
    4970:	4631      	mov	r1, r6
    4972:	4628      	mov	r0, r5
    4974:	f7fc f99e 	bl	cb4 <print_formatted>
}
    4978:	46bd      	mov	sp, r7
    497a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
    497e:	6822      	ldr	r2, [r4, #0]
    4980:	4631      	mov	r1, r6
    4982:	4628      	mov	r0, r5
    4984:	f7fc f996 	bl	cb4 <print_formatted>
		break;
    4988:	e7f6      	b.n	4978 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
    498a:	e9d4 2300 	ldrd	r2, r3, [r4]
    498e:	4631      	mov	r1, r6
    4990:	4628      	mov	r0, r5
    4992:	f7fc f98f 	bl	cb4 <print_formatted>
		break;
    4996:	e7ef      	b.n	4978 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
    4998:	68a3      	ldr	r3, [r4, #8]
    499a:	9300      	str	r3, [sp, #0]
    499c:	e9d4 2300 	ldrd	r2, r3, [r4]
    49a0:	4631      	mov	r1, r6
    49a2:	4628      	mov	r0, r5
    49a4:	f7fc f986 	bl	cb4 <print_formatted>
		break;
    49a8:	e7e6      	b.n	4978 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    49aa:	68e3      	ldr	r3, [r4, #12]
    49ac:	9301      	str	r3, [sp, #4]
    49ae:	68a3      	ldr	r3, [r4, #8]
    49b0:	9300      	str	r3, [sp, #0]
    49b2:	e9d4 2300 	ldrd	r2, r3, [r4]
    49b6:	4631      	mov	r1, r6
    49b8:	4628      	mov	r0, r5
    49ba:	f7fc f97b 	bl	cb4 <print_formatted>
		break;
    49be:	e7db      	b.n	4978 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    49c0:	6923      	ldr	r3, [r4, #16]
    49c2:	9302      	str	r3, [sp, #8]
    49c4:	68e3      	ldr	r3, [r4, #12]
    49c6:	9301      	str	r3, [sp, #4]
    49c8:	68a3      	ldr	r3, [r4, #8]
    49ca:	9300      	str	r3, [sp, #0]
    49cc:	e9d4 2300 	ldrd	r2, r3, [r4]
    49d0:	4631      	mov	r1, r6
    49d2:	4628      	mov	r0, r5
    49d4:	f7fc f96e 	bl	cb4 <print_formatted>
		break;
    49d8:	e7ce      	b.n	4978 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    49da:	6963      	ldr	r3, [r4, #20]
    49dc:	9303      	str	r3, [sp, #12]
    49de:	6923      	ldr	r3, [r4, #16]
    49e0:	9302      	str	r3, [sp, #8]
    49e2:	68e3      	ldr	r3, [r4, #12]
    49e4:	9301      	str	r3, [sp, #4]
    49e6:	68a3      	ldr	r3, [r4, #8]
    49e8:	9300      	str	r3, [sp, #0]
    49ea:	e9d4 2300 	ldrd	r2, r3, [r4]
    49ee:	4631      	mov	r1, r6
    49f0:	4628      	mov	r0, r5
    49f2:	f7fc f95f 	bl	cb4 <print_formatted>
		break;
    49f6:	e7bf      	b.n	4978 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    49f8:	69a3      	ldr	r3, [r4, #24]
    49fa:	9304      	str	r3, [sp, #16]
    49fc:	6963      	ldr	r3, [r4, #20]
    49fe:	9303      	str	r3, [sp, #12]
    4a00:	6923      	ldr	r3, [r4, #16]
    4a02:	9302      	str	r3, [sp, #8]
    4a04:	68e3      	ldr	r3, [r4, #12]
    4a06:	9301      	str	r3, [sp, #4]
    4a08:	68a3      	ldr	r3, [r4, #8]
    4a0a:	9300      	str	r3, [sp, #0]
    4a0c:	e9d4 2300 	ldrd	r2, r3, [r4]
    4a10:	4631      	mov	r1, r6
    4a12:	4628      	mov	r0, r5
    4a14:	f7fc f94e 	bl	cb4 <print_formatted>
		break;
    4a18:	e7ae      	b.n	4978 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    4a1a:	69e3      	ldr	r3, [r4, #28]
    4a1c:	9305      	str	r3, [sp, #20]
    4a1e:	69a3      	ldr	r3, [r4, #24]
    4a20:	9304      	str	r3, [sp, #16]
    4a22:	6963      	ldr	r3, [r4, #20]
    4a24:	9303      	str	r3, [sp, #12]
    4a26:	6923      	ldr	r3, [r4, #16]
    4a28:	9302      	str	r3, [sp, #8]
    4a2a:	68e3      	ldr	r3, [r4, #12]
    4a2c:	9301      	str	r3, [sp, #4]
    4a2e:	68a3      	ldr	r3, [r4, #8]
    4a30:	9300      	str	r3, [sp, #0]
    4a32:	e9d4 2300 	ldrd	r2, r3, [r4]
    4a36:	4631      	mov	r1, r6
    4a38:	4628      	mov	r0, r5
    4a3a:	f7fc f93b 	bl	cb4 <print_formatted>
		break;
    4a3e:	e79b      	b.n	4978 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    4a40:	6a23      	ldr	r3, [r4, #32]
    4a42:	9306      	str	r3, [sp, #24]
    4a44:	69e3      	ldr	r3, [r4, #28]
    4a46:	9305      	str	r3, [sp, #20]
    4a48:	69a3      	ldr	r3, [r4, #24]
    4a4a:	9304      	str	r3, [sp, #16]
    4a4c:	6963      	ldr	r3, [r4, #20]
    4a4e:	9303      	str	r3, [sp, #12]
    4a50:	6923      	ldr	r3, [r4, #16]
    4a52:	9302      	str	r3, [sp, #8]
    4a54:	68e3      	ldr	r3, [r4, #12]
    4a56:	9301      	str	r3, [sp, #4]
    4a58:	68a3      	ldr	r3, [r4, #8]
    4a5a:	9300      	str	r3, [sp, #0]
    4a5c:	e9d4 2300 	ldrd	r2, r3, [r4]
    4a60:	4631      	mov	r1, r6
    4a62:	4628      	mov	r0, r5
    4a64:	f7fc f926 	bl	cb4 <print_formatted>
		break;
    4a68:	e786      	b.n	4978 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    4a6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4a6c:	9307      	str	r3, [sp, #28]
    4a6e:	6a23      	ldr	r3, [r4, #32]
    4a70:	9306      	str	r3, [sp, #24]
    4a72:	69e3      	ldr	r3, [r4, #28]
    4a74:	9305      	str	r3, [sp, #20]
    4a76:	69a3      	ldr	r3, [r4, #24]
    4a78:	9304      	str	r3, [sp, #16]
    4a7a:	6963      	ldr	r3, [r4, #20]
    4a7c:	9303      	str	r3, [sp, #12]
    4a7e:	6923      	ldr	r3, [r4, #16]
    4a80:	9302      	str	r3, [sp, #8]
    4a82:	68e3      	ldr	r3, [r4, #12]
    4a84:	9301      	str	r3, [sp, #4]
    4a86:	68a3      	ldr	r3, [r4, #8]
    4a88:	9300      	str	r3, [sp, #0]
    4a8a:	e9d4 2300 	ldrd	r2, r3, [r4]
    4a8e:	4631      	mov	r1, r6
    4a90:	4628      	mov	r0, r5
    4a92:	f7fc f90f 	bl	cb4 <print_formatted>
		break;
    4a96:	e76f      	b.n	4978 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    4a98:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4a9a:	9308      	str	r3, [sp, #32]
    4a9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4a9e:	9307      	str	r3, [sp, #28]
    4aa0:	6a23      	ldr	r3, [r4, #32]
    4aa2:	9306      	str	r3, [sp, #24]
    4aa4:	69e3      	ldr	r3, [r4, #28]
    4aa6:	9305      	str	r3, [sp, #20]
    4aa8:	69a3      	ldr	r3, [r4, #24]
    4aaa:	9304      	str	r3, [sp, #16]
    4aac:	6963      	ldr	r3, [r4, #20]
    4aae:	9303      	str	r3, [sp, #12]
    4ab0:	6923      	ldr	r3, [r4, #16]
    4ab2:	9302      	str	r3, [sp, #8]
    4ab4:	68e3      	ldr	r3, [r4, #12]
    4ab6:	9301      	str	r3, [sp, #4]
    4ab8:	68a3      	ldr	r3, [r4, #8]
    4aba:	9300      	str	r3, [sp, #0]
    4abc:	e9d4 2300 	ldrd	r2, r3, [r4]
    4ac0:	4631      	mov	r1, r6
    4ac2:	4628      	mov	r0, r5
    4ac4:	f7fc f8f6 	bl	cb4 <print_formatted>
		break;
    4ac8:	e756      	b.n	4978 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    4aca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4acc:	9309      	str	r3, [sp, #36]	; 0x24
    4ace:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4ad0:	9308      	str	r3, [sp, #32]
    4ad2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4ad4:	9307      	str	r3, [sp, #28]
    4ad6:	6a23      	ldr	r3, [r4, #32]
    4ad8:	9306      	str	r3, [sp, #24]
    4ada:	69e3      	ldr	r3, [r4, #28]
    4adc:	9305      	str	r3, [sp, #20]
    4ade:	69a3      	ldr	r3, [r4, #24]
    4ae0:	9304      	str	r3, [sp, #16]
    4ae2:	6963      	ldr	r3, [r4, #20]
    4ae4:	9303      	str	r3, [sp, #12]
    4ae6:	6923      	ldr	r3, [r4, #16]
    4ae8:	9302      	str	r3, [sp, #8]
    4aea:	68e3      	ldr	r3, [r4, #12]
    4aec:	9301      	str	r3, [sp, #4]
    4aee:	68a3      	ldr	r3, [r4, #8]
    4af0:	9300      	str	r3, [sp, #0]
    4af2:	e9d4 2300 	ldrd	r2, r3, [r4]
    4af6:	4631      	mov	r1, r6
    4af8:	4628      	mov	r0, r5
    4afa:	f7fc f8db 	bl	cb4 <print_formatted>
		break;
    4afe:	e73b      	b.n	4978 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    4b00:	6b23      	ldr	r3, [r4, #48]	; 0x30
    4b02:	930a      	str	r3, [sp, #40]	; 0x28
    4b04:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4b06:	9309      	str	r3, [sp, #36]	; 0x24
    4b08:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4b0a:	9308      	str	r3, [sp, #32]
    4b0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4b0e:	9307      	str	r3, [sp, #28]
    4b10:	6a23      	ldr	r3, [r4, #32]
    4b12:	9306      	str	r3, [sp, #24]
    4b14:	69e3      	ldr	r3, [r4, #28]
    4b16:	9305      	str	r3, [sp, #20]
    4b18:	69a3      	ldr	r3, [r4, #24]
    4b1a:	9304      	str	r3, [sp, #16]
    4b1c:	6963      	ldr	r3, [r4, #20]
    4b1e:	9303      	str	r3, [sp, #12]
    4b20:	6923      	ldr	r3, [r4, #16]
    4b22:	9302      	str	r3, [sp, #8]
    4b24:	68e3      	ldr	r3, [r4, #12]
    4b26:	9301      	str	r3, [sp, #4]
    4b28:	68a3      	ldr	r3, [r4, #8]
    4b2a:	9300      	str	r3, [sp, #0]
    4b2c:	e9d4 2300 	ldrd	r2, r3, [r4]
    4b30:	4631      	mov	r1, r6
    4b32:	4628      	mov	r0, r5
    4b34:	f7fc f8be 	bl	cb4 <print_formatted>
		break;
    4b38:	e71e      	b.n	4978 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    4b3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4b3c:	930b      	str	r3, [sp, #44]	; 0x2c
    4b3e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    4b40:	930a      	str	r3, [sp, #40]	; 0x28
    4b42:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4b44:	9309      	str	r3, [sp, #36]	; 0x24
    4b46:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4b48:	9308      	str	r3, [sp, #32]
    4b4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4b4c:	9307      	str	r3, [sp, #28]
    4b4e:	6a23      	ldr	r3, [r4, #32]
    4b50:	9306      	str	r3, [sp, #24]
    4b52:	69e3      	ldr	r3, [r4, #28]
    4b54:	9305      	str	r3, [sp, #20]
    4b56:	69a3      	ldr	r3, [r4, #24]
    4b58:	9304      	str	r3, [sp, #16]
    4b5a:	6963      	ldr	r3, [r4, #20]
    4b5c:	9303      	str	r3, [sp, #12]
    4b5e:	6923      	ldr	r3, [r4, #16]
    4b60:	9302      	str	r3, [sp, #8]
    4b62:	68e3      	ldr	r3, [r4, #12]
    4b64:	9301      	str	r3, [sp, #4]
    4b66:	68a3      	ldr	r3, [r4, #8]
    4b68:	9300      	str	r3, [sp, #0]
    4b6a:	e9d4 2300 	ldrd	r2, r3, [r4]
    4b6e:	4631      	mov	r1, r6
    4b70:	4628      	mov	r0, r5
    4b72:	f7fc f89f 	bl	cb4 <print_formatted>
		break;
    4b76:	e6ff      	b.n	4978 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    4b78:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    4b7a:	930c      	str	r3, [sp, #48]	; 0x30
    4b7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4b7e:	930b      	str	r3, [sp, #44]	; 0x2c
    4b80:	6b23      	ldr	r3, [r4, #48]	; 0x30
    4b82:	930a      	str	r3, [sp, #40]	; 0x28
    4b84:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4b86:	9309      	str	r3, [sp, #36]	; 0x24
    4b88:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4b8a:	9308      	str	r3, [sp, #32]
    4b8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4b8e:	9307      	str	r3, [sp, #28]
    4b90:	6a23      	ldr	r3, [r4, #32]
    4b92:	9306      	str	r3, [sp, #24]
    4b94:	69e3      	ldr	r3, [r4, #28]
    4b96:	9305      	str	r3, [sp, #20]
    4b98:	69a3      	ldr	r3, [r4, #24]
    4b9a:	9304      	str	r3, [sp, #16]
    4b9c:	6963      	ldr	r3, [r4, #20]
    4b9e:	9303      	str	r3, [sp, #12]
    4ba0:	6923      	ldr	r3, [r4, #16]
    4ba2:	9302      	str	r3, [sp, #8]
    4ba4:	68e3      	ldr	r3, [r4, #12]
    4ba6:	9301      	str	r3, [sp, #4]
    4ba8:	68a3      	ldr	r3, [r4, #8]
    4baa:	9300      	str	r3, [sp, #0]
    4bac:	e9d4 2300 	ldrd	r2, r3, [r4]
    4bb0:	4631      	mov	r1, r6
    4bb2:	4628      	mov	r0, r5
    4bb4:	f7fc f87e 	bl	cb4 <print_formatted>
}
    4bb8:	e6de      	b.n	4978 <std_print+0x78>

00004bba <log_output_flush>:
		     log_output->control_block->offset,
    4bba:	6842      	ldr	r2, [r0, #4]
	buffer_write(log_output->func, log_output->buf,
    4bbc:	6881      	ldr	r1, [r0, #8]
{
    4bbe:	b510      	push	{r4, lr}
    4bc0:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
    4bc2:	e9d2 2300 	ldrd	r2, r3, [r2]
    4bc6:	6800      	ldr	r0, [r0, #0]
    4bc8:	f7ff fe8d 	bl	48e6 <buffer_write>
	log_output->control_block->offset = 0;
    4bcc:	6863      	ldr	r3, [r4, #4]
    4bce:	2200      	movs	r2, #0
    4bd0:	601a      	str	r2, [r3, #0]
}
    4bd2:	bd10      	pop	{r4, pc}

00004bd4 <out_func>:
{
    4bd4:	b508      	push	{r3, lr}
	out_ctx->buf[out_ctx->control_block->offset] = (u8_t)c;
    4bd6:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
    4bda:	681b      	ldr	r3, [r3, #0]
    4bdc:	54d0      	strb	r0, [r2, r3]
	out_ctx->control_block->offset++;
    4bde:	684a      	ldr	r2, [r1, #4]
    4be0:	6813      	ldr	r3, [r2, #0]
    4be2:	3301      	adds	r3, #1
    4be4:	6013      	str	r3, [r2, #0]
	if (out_ctx->control_block->offset == out_ctx->size) {
    4be6:	68ca      	ldr	r2, [r1, #12]
    4be8:	4293      	cmp	r3, r2
    4bea:	d102      	bne.n	4bf2 <out_func+0x1e>
		log_output_flush(out_ctx);
    4bec:	4608      	mov	r0, r1
    4bee:	f7ff ffe4 	bl	4bba <log_output_flush>
}
    4bf2:	2000      	movs	r0, #0
    4bf4:	bd08      	pop	{r3, pc}

00004bf6 <char_out>:
{
    4bf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4bf8:	460d      	mov	r5, r1
    4bfa:	4616      	mov	r6, r2
	for (size_t i = 0; i < length; i++) {
    4bfc:	4604      	mov	r4, r0
    4bfe:	1847      	adds	r7, r0, r1
    4c00:	42bc      	cmp	r4, r7
    4c02:	d101      	bne.n	4c08 <char_out+0x12>
}
    4c04:	4628      	mov	r0, r5
    4c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(dev, data[i]);
    4c08:	f814 1b01 	ldrb.w	r1, [r4], #1
    4c0c:	6873      	ldr	r3, [r6, #4]
    4c0e:	4630      	mov	r0, r6
    4c10:	685b      	ldr	r3, [r3, #4]
    4c12:	4798      	blx	r3
    4c14:	e7f4      	b.n	4c00 <char_out+0xa>

00004c16 <get_status>:
	struct nrf_clock_control *data = dev->driver_data;
    4c16:	6883      	ldr	r3, [r0, #8]
	if (data->started) {
    4c18:	7a5a      	ldrb	r2, [r3, #9]
    4c1a:	b922      	cbnz	r2, 4c26 <get_status+0x10>
	if (data->ref > 0) {
    4c1c:	7a18      	ldrb	r0, [r3, #8]
		return CLOCK_CONTROL_STATUS_ON;
    4c1e:	fab0 f080 	clz	r0, r0
    4c22:	0940      	lsrs	r0, r0, #5
    4c24:	4770      	bx	lr
    4c26:	2002      	movs	r0, #2
}
    4c28:	4770      	bx	lr

00004c2a <lfclk_init>:
	sys_slist_init(&((struct nrf_clock_control *)dev->driver_data)->list);
    4c2a:	6883      	ldr	r3, [r0, #8]
	list->head = NULL;
    4c2c:	2000      	movs	r0, #0
	list->tail = NULL;
    4c2e:	e9c3 0000 	strd	r0, r0, [r3]
}
    4c32:	4770      	bx	lr

00004c34 <clkstarted_handle>:
{
    4c34:	b538      	push	{r3, r4, r5, lr}
	struct nrf_clock_control *data = dev->driver_data;
    4c36:	6884      	ldr	r4, [r0, #8]
	data->started = true;
    4c38:	2301      	movs	r3, #1
{
    4c3a:	4605      	mov	r5, r0
	data->started = true;
    4c3c:	7263      	strb	r3, [r4, #9]
	__asm__ volatile(
    4c3e:	f04f 0320 	mov.w	r3, #32
    4c42:	f3ef 8111 	mrs	r1, BASEPRI
    4c46:	f383 8811 	msr	BASEPRI, r3
    4c4a:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
    4c4e:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    4c50:	b12b      	cbz	r3, 4c5e <clkstarted_handle+0x2a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    4c52:	6860      	ldr	r0, [r4, #4]
    4c54:	681a      	ldr	r2, [r3, #0]
	list->head = node;
    4c56:	6022      	str	r2, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    4c58:	4283      	cmp	r3, r0
	list->tail = node;
    4c5a:	bf08      	it	eq
    4c5c:	6062      	streq	r2, [r4, #4]
	__asm__ volatile(
    4c5e:	f381 8811 	msr	BASEPRI, r1
    4c62:	f3bf 8f6f 	isb	sy
	while ((async_data = list_get(&data->list)) != NULL) {
    4c66:	b903      	cbnz	r3, 4c6a <clkstarted_handle+0x36>
}
    4c68:	bd38      	pop	{r3, r4, r5, pc}
		async_data->cb(dev, async_data->user_data);
    4c6a:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
    4c6e:	4628      	mov	r0, r5
    4c70:	4790      	blx	r2
    4c72:	e7e4      	b.n	4c3e <clkstarted_handle+0xa>

00004c74 <clock_async_start>:
{
    4c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct nrf_clock_control_config *config =
    4c76:	6803      	ldr	r3, [r0, #0]
{
    4c78:	4606      	mov	r6, r0
	const struct nrf_clock_control_config *config =
    4c7a:	689d      	ldr	r5, [r3, #8]
	struct nrf_clock_control *clk_data = dev->driver_data;
    4c7c:	6883      	ldr	r3, [r0, #8]
	if ((data != NULL)
    4c7e:	b132      	cbz	r2, 4c8e <clock_async_start+0x1a>
	sys_snode_t *item = sys_slist_peek_head(list);
    4c80:	6819      	ldr	r1, [r3, #0]
		if (item == node) {
    4c82:	428a      	cmp	r2, r1
    4c84:	d04c      	beq.n	4d20 <clock_async_start+0xac>
Z_GENLIST_PEEK_NEXT(slist, snode)
    4c86:	b111      	cbz	r1, 4c8e <clock_async_start+0x1a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    4c88:	6809      	ldr	r1, [r1, #0]
	} while (item);
    4c8a:	2900      	cmp	r1, #0
    4c8c:	d1f9      	bne.n	4c82 <clock_async_start+0xe>
	__asm__ volatile(
    4c8e:	f04f 0020 	mov.w	r0, #32
    4c92:	f3ef 8111 	mrs	r1, BASEPRI
    4c96:	f380 8811 	msr	BASEPRI, r0
    4c9a:	f3bf 8f6f 	isb	sy
	ref = ++clk_data->ref;
    4c9e:	7a1c      	ldrb	r4, [r3, #8]
    4ca0:	3401      	adds	r4, #1
    4ca2:	b2e4      	uxtb	r4, r4
    4ca4:	721c      	strb	r4, [r3, #8]
	__asm__ volatile(
    4ca6:	f381 8811 	msr	BASEPRI, r1
    4caa:	f3bf 8f6f 	isb	sy
	if (data) {
    4cae:	b30a      	cbz	r2, 4cf4 <clock_async_start+0x80>
    p_reg->INTENCLR = mask;
    4cb0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    4cb4:	2003      	movs	r0, #3
    4cb6:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
		already_started = clk_data->started;
    4cba:	7a59      	ldrb	r1, [r3, #9]
		if (!already_started) {
    4cbc:	b981      	cbnz	r1, 4ce0 <clock_async_start+0x6c>
	__asm__ volatile(
    4cbe:	f04f 0020 	mov.w	r0, #32
    4cc2:	f3ef 8711 	mrs	r7, BASEPRI
    4cc6:	f380 8811 	msr	BASEPRI, r0
    4cca:	f3bf 8f6f 	isb	sy
	parent->next = child;
    4cce:	6011      	str	r1, [r2, #0]
Z_GENLIST_APPEND(slist, snode)
    4cd0:	6858      	ldr	r0, [r3, #4]
    4cd2:	b9d0      	cbnz	r0, 4d0a <clock_async_start+0x96>
	list->head = node;
    4cd4:	e9c3 2200 	strd	r2, r2, [r3]
	__asm__ volatile(
    4cd8:	f387 8811 	msr	BASEPRI, r7
    4cdc:	f3bf 8f6f 	isb	sy
    p_reg->INTENSET = mask;
    4ce0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4ce4:	2003      	movs	r0, #3
    4ce6:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
		if (already_started) {
    4cea:	b119      	cbz	r1, 4cf4 <clock_async_start+0x80>
			data->cb(dev, data->user_data);
    4cec:	e9d2 3101 	ldrd	r3, r1, [r2, #4]
    4cf0:	4630      	mov	r0, r6
    4cf2:	4798      	blx	r3
	if (ref == 1) {
    4cf4:	2c01      	cmp	r4, #1
    4cf6:	d106      	bne.n	4d06 <clock_async_start+0x92>
		do_start =  (config->start_handler) ?
    4cf8:	682b      	ldr	r3, [r5, #0]
				config->start_handler(dev) : true;
    4cfa:	b94b      	cbnz	r3, 4d10 <clock_async_start+0x9c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4cfc:	7aab      	ldrb	r3, [r5, #10]
    4cfe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4d02:	2201      	movs	r2, #1
    4d04:	601a      	str	r2, [r3, #0]
	return 0;
    4d06:	2000      	movs	r0, #0
    4d08:	e00c      	b.n	4d24 <clock_async_start+0xb0>
	parent->next = child;
    4d0a:	6002      	str	r2, [r0, #0]
	list->tail = node;
    4d0c:	605a      	str	r2, [r3, #4]
    4d0e:	e7e3      	b.n	4cd8 <clock_async_start+0x64>
				config->start_handler(dev) : true;
    4d10:	4630      	mov	r0, r6
    4d12:	4798      	blx	r3
    4d14:	2800      	cmp	r0, #0
    4d16:	d1f1      	bne.n	4cfc <clock_async_start+0x88>
			clkstarted_handle(dev);
    4d18:	4630      	mov	r0, r6
    4d1a:	f7ff ff8b 	bl	4c34 <clkstarted_handle>
    4d1e:	e7f2      	b.n	4d06 <clock_async_start+0x92>
		return -EBUSY;
    4d20:	f06f 000f 	mvn.w	r0, #15
}
    4d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00004d26 <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
    4d26:	2200      	movs	r2, #0
    4d28:	f7ff bfa4 	b.w	4c74 <clock_async_start>

00004d2c <hfclk_init>:
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    4d2c:	2200      	movs	r2, #0
{
    4d2e:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    4d30:	2101      	movs	r1, #1
{
    4d32:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    4d34:	4610      	mov	r0, r2
    4d36:	f7fc fb89 	bl	144c <z_arm_irq_priority_set>
	irq_enable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
    4d3a:	2000      	movs	r0, #0
    4d3c:	f7fc fb76 	bl	142c <arch_irq_enable>
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
    4d40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4d44:	2201      	movs	r2, #1
    4d46:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->INTENSET = mask;
    4d4a:	2203      	movs	r2, #3
    4d4c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	sys_slist_init(&((struct nrf_clock_control *)dev->driver_data)->list);
    4d50:	68a3      	ldr	r3, [r4, #8]
	list->head = NULL;
    4d52:	2000      	movs	r0, #0
	list->tail = NULL;
    4d54:	e9c3 0000 	strd	r0, r0, [r3]
}
    4d58:	bd10      	pop	{r4, pc}

00004d5a <clock_stop>:
	const struct nrf_clock_control_config *config =
    4d5a:	6802      	ldr	r2, [r0, #0]
{
    4d5c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	const struct nrf_clock_control_config *config =
    4d5e:	6895      	ldr	r5, [r2, #8]
	struct nrf_clock_control *data = dev->driver_data;
    4d60:	6884      	ldr	r4, [r0, #8]
	__asm__ volatile(
    4d62:	f04f 0320 	mov.w	r3, #32
    4d66:	f3ef 8611 	mrs	r6, BASEPRI
    4d6a:	f383 8811 	msr	BASEPRI, r3
    4d6e:	f3bf 8f6f 	isb	sy
	if (data->ref == 0) {
    4d72:	7a23      	ldrb	r3, [r4, #8]
    4d74:	b303      	cbz	r3, 4db8 <clock_stop+0x5e>
	data->ref--;
    4d76:	3b01      	subs	r3, #1
    4d78:	b2db      	uxtb	r3, r3
    4d7a:	7223      	strb	r3, [r4, #8]
	if (data->ref == 0) {
    4d7c:	b9fb      	cbnz	r3, 4dbe <clock_stop+0x64>
    4d7e:	e9c4 3300 	strd	r3, r3, [r4]
		do_stop =  (config->stop_handler) ?
    4d82:	686b      	ldr	r3, [r5, #4]
				config->stop_handler(dev) : true;
    4d84:	b9a3      	cbnz	r3, 4db0 <clock_stop+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4d86:	7aeb      	ldrb	r3, [r5, #11]
    4d88:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4d8c:	2201      	movs	r2, #1
    4d8e:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4d90:	892b      	ldrh	r3, [r5, #8]
    4d92:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4d96:	2200      	movs	r2, #0
    4d98:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    4d9a:	681b      	ldr	r3, [r3, #0]
    4d9c:	9301      	str	r3, [sp, #4]
    (void)dummy;
    4d9e:	9b01      	ldr	r3, [sp, #4]
		data->started = false;
    4da0:	2000      	movs	r0, #0
    4da2:	7260      	strb	r0, [r4, #9]
	__asm__ volatile(
    4da4:	f386 8811 	msr	BASEPRI, r6
    4da8:	f3bf 8f6f 	isb	sy
}
    4dac:	b002      	add	sp, #8
    4dae:	bd70      	pop	{r4, r5, r6, pc}
				config->stop_handler(dev) : true;
    4db0:	4798      	blx	r3
    4db2:	2800      	cmp	r0, #0
    4db4:	d1e7      	bne.n	4d86 <clock_stop+0x2c>
    4db6:	e7f3      	b.n	4da0 <clock_stop+0x46>
		err = -EALREADY;
    4db8:	f06f 0044 	mvn.w	r0, #68	; 0x44
    4dbc:	e7f2      	b.n	4da4 <clock_stop+0x4a>
	int err = 0;
    4dbe:	2000      	movs	r0, #0
    4dc0:	e7f0      	b.n	4da4 <clock_stop+0x4a>

00004dc2 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    4dc2:	4770      	bx	lr

00004dc4 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
    4dc4:	4770      	bx	lr

00004dc6 <z_irq_spurious>:
 * @return N/A
 */
void z_irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	z_arm_reserved();
    4dc6:	f7fc bba5 	b.w	1514 <z_arm_bus_fault>

00004dca <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    4dca:	4601      	mov	r1, r0
			reason = K_ERR_KERNEL_OOPS;
		}
	}

#endif /* CONFIG_USERSPACE */
	z_arm_fatal_error(reason, esf);
    4dcc:	6800      	ldr	r0, [r0, #0]
    4dce:	f7fc bbab 	b.w	1528 <z_arm_fatal_error>

00004dd2 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    4dd2:	b508      	push	{r3, lr}
	handler();
    4dd4:	f7fc fbfa 	bl	15cc <z_SysNmiOnReset>
	z_arm_exc_exit();
}
    4dd8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_exc_exit();
    4ddc:	f7fc bac4 	b.w	1368 <z_arm_exc_exit>

00004de0 <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    4de0:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
    4de2:	2100      	movs	r1, #0
    4de4:	a801      	add	r0, sp, #4
    4de6:	f7fc ffd3 	bl	1d90 <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
    4dea:	b003      	add	sp, #12
    4dec:	f85d fb04 	ldr.w	pc, [sp], #4

00004df0 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
    4df0:	b570      	push	{r4, r5, r6, lr}
    4df2:	3901      	subs	r1, #1
    4df4:	4605      	mov	r5, r0
    4df6:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    4df8:	b142      	cbz	r2, 4e0c <strncpy+0x1c>
    4dfa:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    4dfe:	1e56      	subs	r6, r2, #1
    4e00:	b92b      	cbnz	r3, 4e0e <strncpy+0x1e>
    4e02:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
    4e04:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
    4e08:	42a2      	cmp	r2, r4
    4e0a:	d1fb      	bne.n	4e04 <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
    4e0c:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
    4e0e:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
    4e12:	4632      	mov	r2, r6
    4e14:	e7ef      	b.n	4df6 <strncpy+0x6>

00004e16 <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
    4e16:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
    4e18:	7802      	ldrb	r2, [r0, #0]
    4e1a:	428a      	cmp	r2, r1
    4e1c:	4603      	mov	r3, r0
    4e1e:	f100 0001 	add.w	r0, r0, #1
    4e22:	d004      	beq.n	4e2e <strchr+0x18>
    4e24:	2a00      	cmp	r2, #0
    4e26:	d1f7      	bne.n	4e18 <strchr+0x2>
		s++;
	}

	return (*s == tmp) ? (char *) s : NULL;
    4e28:	2900      	cmp	r1, #0
    4e2a:	bf18      	it	ne
    4e2c:	2300      	movne	r3, #0
}
    4e2e:	4618      	mov	r0, r3
    4e30:	4770      	bx	lr

00004e32 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    4e32:	3801      	subs	r0, #1
    4e34:	3901      	subs	r1, #1
    4e36:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    4e3a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    4e3e:	4293      	cmp	r3, r2
    4e40:	d101      	bne.n	4e46 <strcmp+0x14>
    4e42:	2b00      	cmp	r3, #0
    4e44:	d1f7      	bne.n	4e36 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    4e46:	1a98      	subs	r0, r3, r2
    4e48:	4770      	bx	lr

00004e4a <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    4e4a:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    4e4c:	ea81 0400 	eor.w	r4, r1, r0
    4e50:	07a5      	lsls	r5, r4, #30
    4e52:	4603      	mov	r3, r0
    4e54:	d00b      	beq.n	4e6e <memcpy+0x24>
    4e56:	3b01      	subs	r3, #1
    4e58:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    4e5a:	4291      	cmp	r1, r2
    4e5c:	d11a      	bne.n	4e94 <memcpy+0x4a>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    4e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
    4e60:	2a00      	cmp	r2, #0
    4e62:	d0fc      	beq.n	4e5e <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    4e64:	f811 4b01 	ldrb.w	r4, [r1], #1
    4e68:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    4e6c:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
    4e6e:	079c      	lsls	r4, r3, #30
    4e70:	d1f6      	bne.n	4e60 <memcpy+0x16>
    4e72:	0895      	lsrs	r5, r2, #2
    4e74:	00ac      	lsls	r4, r5, #2
    4e76:	1f1e      	subs	r6, r3, #4
    4e78:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
    4e7a:	42b9      	cmp	r1, r7
    4e7c:	d105      	bne.n	4e8a <memcpy+0x40>
    4e7e:	f06f 0603 	mvn.w	r6, #3
    4e82:	fb06 2205 	mla	r2, r6, r5, r2
    4e86:	4423      	add	r3, r4
    4e88:	e7e5      	b.n	4e56 <memcpy+0xc>
			*(d_word++) = *(s_word++);
    4e8a:	f851 cb04 	ldr.w	ip, [r1], #4
    4e8e:	f846 cf04 	str.w	ip, [r6, #4]!
			n -= sizeof(mem_word_t);
    4e92:	e7f2      	b.n	4e7a <memcpy+0x30>
		*(d_byte++) = *(s_byte++);
    4e94:	f811 4b01 	ldrb.w	r4, [r1], #1
    4e98:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    4e9c:	e7dd      	b.n	4e5a <memcpy+0x10>

00004e9e <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    4e9e:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    4ea0:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
    4ea2:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    4ea4:	079c      	lsls	r4, r3, #30
    4ea6:	d110      	bne.n	4eca <memset+0x2c>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
    4ea8:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    4eac:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    4eb0:	0894      	lsrs	r4, r2, #2
    4eb2:	eb03 0684 	add.w	r6, r3, r4, lsl #2
    4eb6:	42b3      	cmp	r3, r6
    4eb8:	d10d      	bne.n	4ed6 <memset+0x38>
    4eba:	f06f 0503 	mvn.w	r5, #3
    4ebe:	fb05 2404 	mla	r4, r5, r4, r2
    4ec2:	441c      	add	r4, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    4ec4:	42a3      	cmp	r3, r4
    4ec6:	d109      	bne.n	4edc <memset+0x3e>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    4ec8:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    4eca:	2a00      	cmp	r2, #0
    4ecc:	d0fc      	beq.n	4ec8 <memset+0x2a>
		*(d_byte++) = c_byte;
    4ece:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    4ed2:	3a01      	subs	r2, #1
    4ed4:	e7e6      	b.n	4ea4 <memset+0x6>
		*(d_word++) = c_word;
    4ed6:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
    4eda:	e7ec      	b.n	4eb6 <memset+0x18>
		*(d_byte++) = c_byte;
    4edc:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    4ee0:	e7f0      	b.n	4ec4 <memset+0x26>

00004ee2 <_to_x>:
{
    4ee2:	b5f0      	push	{r4, r5, r6, r7, lr}
    4ee4:	4603      	mov	r3, r0
		unsigned int d = n % base;
    4ee6:	fbb1 f7f2 	udiv	r7, r1, r2
    4eea:	fb02 1517 	mls	r5, r2, r7, r1
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
    4eee:	2d09      	cmp	r5, #9
    4ef0:	bf8c      	ite	hi
    4ef2:	2627      	movhi	r6, #39	; 0x27
    4ef4:	2600      	movls	r6, #0
    4ef6:	461c      	mov	r4, r3
    4ef8:	3530      	adds	r5, #48	; 0x30
    4efa:	4435      	add	r5, r6
	} while (n);
    4efc:	4291      	cmp	r1, r2
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
    4efe:	f804 5b01 	strb.w	r5, [r4], #1
	} while (n);
    4f02:	d206      	bcs.n	4f12 <_to_x+0x30>
	*buf = 0;
    4f04:	2200      	movs	r2, #0
    4f06:	7022      	strb	r2, [r4, #0]
	len = buf - start;
    4f08:	1a24      	subs	r4, r4, r0
	for (buf--; buf > start; buf--, start++) {
    4f0a:	4283      	cmp	r3, r0
    4f0c:	d804      	bhi.n	4f18 <_to_x+0x36>
}
    4f0e:	4620      	mov	r0, r4
    4f10:	bdf0      	pop	{r4, r5, r6, r7, pc}
		n /= base;
    4f12:	4639      	mov	r1, r7
    4f14:	4623      	mov	r3, r4
    4f16:	e7e6      	b.n	4ee6 <_to_x+0x4>
		char tmp = *buf;
    4f18:	781a      	ldrb	r2, [r3, #0]
		*buf = *start;
    4f1a:	7801      	ldrb	r1, [r0, #0]
    4f1c:	f803 1901 	strb.w	r1, [r3], #-1
		*start = tmp;
    4f20:	f800 2b01 	strb.w	r2, [r0], #1
    4f24:	e7f1      	b.n	4f0a <_to_x+0x28>

00004f26 <_rlrshift>:
{
    4f26:	b570      	push	{r4, r5, r6, lr}
	*v = (*v & 1) + (*v >> 1);
    4f28:	e9d0 6500 	ldrd	r6, r5, [r0]
    4f2c:	0872      	lsrs	r2, r6, #1
    4f2e:	f006 0301 	and.w	r3, r6, #1
    4f32:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
    4f36:	189b      	adds	r3, r3, r2
    4f38:	f04f 0100 	mov.w	r1, #0
    4f3c:	ea4f 0455 	mov.w	r4, r5, lsr #1
    4f40:	eb44 0101 	adc.w	r1, r4, r1
    4f44:	e9c0 3100 	strd	r3, r1, [r0]
}
    4f48:	bd70      	pop	{r4, r5, r6, pc}

00004f4a <_ldiv5>:
	uint64_t rem = *v, quot = 0U, q;
    4f4a:	e9d0 3200 	ldrd	r3, r2, [r0]
{
    4f4e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	rem += 2U;
    4f52:	3302      	adds	r3, #2
		q = (uint64_t)(hi / 5U) << shifts[i];
    4f54:	f04f 0705 	mov.w	r7, #5
    4f58:	f04f 0c00 	mov.w	ip, #0
	rem += 2U;
    4f5c:	f142 0200 	adc.w	r2, r2, #0
		rem -= q * 5U;
    4f60:	ebb3 060c 	subs.w	r6, r3, ip
		q = (uint64_t)(hi / 5U) << shifts[i];
    4f64:	fbb2 fef7 	udiv	lr, r2, r7
		rem -= q * 5U;
    4f68:	fb07 f10e 	mul.w	r1, r7, lr
    4f6c:	eb62 0101 	sbc.w	r1, r2, r1
		hi = rem >> shifts[i];
    4f70:	08f2      	lsrs	r2, r6, #3
    4f72:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
		q = (uint64_t)(hi / 5U) << shifts[i];
    4f76:	fbb2 f1f7 	udiv	r1, r2, r7
    4f7a:	00ca      	lsls	r2, r1, #3
		quot += q;
    4f7c:	eb1c 0802 	adds.w	r8, ip, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
    4f80:	ea4f 7351 	mov.w	r3, r1, lsr #29
		quot += q;
    4f84:	eb4e 0903 	adc.w	r9, lr, r3
		rem -= q * 5U;
    4f88:	fba2 2307 	umull	r2, r3, r2, r7
    4f8c:	1ab3      	subs	r3, r6, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
    4f8e:	fbb3 f3f7 	udiv	r3, r3, r7
		quot += q;
    4f92:	eb18 0403 	adds.w	r4, r8, r3
    4f96:	f149 0500 	adc.w	r5, r9, #0
	*v = quot;
    4f9a:	e9c0 4500 	strd	r4, r5, [r0]
}
    4f9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00004fa2 <_get_digit>:
	if (*digit_count > 0) {
    4fa2:	680b      	ldr	r3, [r1, #0]
    4fa4:	2b00      	cmp	r3, #0
{
    4fa6:	b570      	push	{r4, r5, r6, lr}
	if (*digit_count > 0) {
    4fa8:	dd10      	ble.n	4fcc <_get_digit+0x2a>
		*digit_count -= 1;
    4faa:	3b01      	subs	r3, #1
		*fr = *fr * 10U;
    4fac:	6802      	ldr	r2, [r0, #0]
		*digit_count -= 1;
    4fae:	600b      	str	r3, [r1, #0]
		*fr = *fr * 10U;
    4fb0:	6844      	ldr	r4, [r0, #4]
    4fb2:	210a      	movs	r1, #10
    4fb4:	fba2 5601 	umull	r5, r6, r2, r1
    4fb8:	fb01 6604 	mla	r6, r1, r4, r6
		*fr &= 0x0FFFFFFFFFFFFFFFull;
    4fbc:	f026 4370 	bic.w	r3, r6, #4026531840	; 0xf0000000
    4fc0:	e9c0 5300 	strd	r5, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
    4fc4:	0f31      	lsrs	r1, r6, #28
    4fc6:	3130      	adds	r1, #48	; 0x30
}
    4fc8:	4608      	mov	r0, r1
    4fca:	bd70      	pop	{r4, r5, r6, pc}
		rval = '0';
    4fcc:	2130      	movs	r1, #48	; 0x30
    4fce:	e7fb      	b.n	4fc8 <_get_digit+0x26>

00004fd0 <_stdout_hook_default>:
}
    4fd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4fd4:	4770      	bx	lr

00004fd6 <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
    4fd6:	684b      	ldr	r3, [r1, #4]
    4fd8:	2b01      	cmp	r3, #1
    4fda:	dd07      	ble.n	4fec <sprintf_out+0x16>
		*(p->ptr) = c;
    4fdc:	680b      	ldr	r3, [r1, #0]
    4fde:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
    4fe0:	680b      	ldr	r3, [r1, #0]
    4fe2:	3301      	adds	r3, #1
    4fe4:	600b      	str	r3, [r1, #0]
		p->len -= 1;
    4fe6:	684b      	ldr	r3, [r1, #4]
    4fe8:	3b01      	subs	r3, #1
    4fea:	604b      	str	r3, [r1, #4]
}
    4fec:	2000      	movs	r0, #0
    4fee:	4770      	bx	lr

00004ff0 <z_platform_init>:
	nrfx_coredep_delay_us(time_us);
}

void z_platform_init(void)
{
	SystemInit();
    4ff0:	f7fd bfba 	b.w	2f68 <SystemInit>

00004ff4 <gpio_nrfx_write>:
{
    4ff4:	b510      	push	{r4, lr}
	return port->config->config_info;
    4ff6:	6804      	ldr	r4, [r0, #0]
    4ff8:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4ffa:	68a4      	ldr	r4, [r4, #8]
    4ffc:	69c0      	ldr	r0, [r0, #28]
    4ffe:	6824      	ldr	r4, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
    5000:	2901      	cmp	r1, #1
    5002:	d104      	bne.n	500e <gpio_nrfx_write+0x1a>
		nrf_gpio_port_out_write(reg, value ^ data->inverted);
    5004:	4058      	eors	r0, r3
    p_reg->OUT = value;
    5006:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
}
    500a:	2000      	movs	r0, #0
    500c:	bd10      	pop	{r4, pc}
		if ((value > 0) ^ ((BIT(pin) & data->inverted) != 0)) {
    500e:	3300      	adds	r3, #0
    5010:	fa20 f002 	lsr.w	r0, r0, r2
    5014:	f04f 0101 	mov.w	r1, #1
    5018:	bf18      	it	ne
    501a:	2301      	movne	r3, #1
    501c:	f000 0001 	and.w	r0, r0, #1
    5020:	4091      	lsls	r1, r2
    5022:	4283      	cmp	r3, r0
    p_reg->OUTSET = set_mask;
    5024:	bf14      	ite	ne
    5026:	f8c4 1508 	strne.w	r1, [r4, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    502a:	f8c4 150c 	streq.w	r1, [r4, #1292]	; 0x50c
    502e:	e7ec      	b.n	500a <gpio_nrfx_write+0x16>

00005030 <gpio_nrfx_read>:
{
    5030:	b570      	push	{r4, r5, r6, lr}
	return port->config->config_info;
    5032:	6804      	ldr	r4, [r0, #0]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
    5034:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5036:	68a4      	ldr	r4, [r4, #8]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
    5038:	69c0      	ldr	r0, [r0, #28]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    503a:	6825      	ldr	r5, [r4, #0]
    return p_reg->DIR;
    503c:	f8d5 6514 	ldr.w	r6, [r5, #1300]	; 0x514
    return p_reg->IN;
    5040:	f8d5 4510 	ldr.w	r4, [r5, #1296]	; 0x510
    return p_reg->OUT;
    5044:	f8d5 5504 	ldr.w	r5, [r5, #1284]	; 0x504
	u32_t port_val = (port_in | port_out) ^ data->inverted;
    5048:	4060      	eors	r0, r4
    504a:	406c      	eors	r4, r5
    504c:	4034      	ands	r4, r6
    504e:	4060      	eors	r0, r4
	if (access_op == GPIO_ACCESS_BY_PORT) {
    5050:	2901      	cmp	r1, #1
		*value = (port_val & BIT(pin)) ? 1 : 0;
    5052:	bf1c      	itt	ne
    5054:	40d0      	lsrne	r0, r2
    5056:	f000 0001 	andne.w	r0, r0, #1
    505a:	6018      	str	r0, [r3, #0]
}
    505c:	2000      	movs	r0, #0
    505e:	bd70      	pop	{r4, r5, r6, pc}

00005060 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    5060:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_IS_EMPTY(slist)
    5062:	6818      	ldr	r0, [r3, #0]
{
    5064:	b530      	push	{r4, r5, lr}
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
    5066:	b158      	cbz	r0, 5080 <gpio_nrfx_manage_callback+0x20>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5068:	2400      	movs	r4, #0
    506a:	4281      	cmp	r1, r0
    506c:	d113      	bne.n	5096 <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
    506e:	6808      	ldr	r0, [r1, #0]
    5070:	b95c      	cbnz	r4, 508a <gpio_nrfx_manage_callback+0x2a>
    5072:	685c      	ldr	r4, [r3, #4]
	list->head = node;
    5074:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
    5076:	42a1      	cmp	r1, r4
    5078:	d100      	bne.n	507c <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    507a:	6058      	str	r0, [r3, #4]
	parent->next = child;
    507c:	2000      	movs	r0, #0
    507e:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
    5080:	b972      	cbnz	r2, 50a0 <gpio_nrfx_manage_callback+0x40>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    5082:	2000      	movs	r0, #0
}
    5084:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5086:	4628      	mov	r0, r5
    5088:	e7ef      	b.n	506a <gpio_nrfx_manage_callback+0xa>
	parent->next = child;
    508a:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    508c:	6858      	ldr	r0, [r3, #4]
    508e:	4281      	cmp	r1, r0
	list->tail = node;
    5090:	bf08      	it	eq
    5092:	605c      	streq	r4, [r3, #4]
    5094:	e7f2      	b.n	507c <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    5096:	6805      	ldr	r5, [r0, #0]
	return node->next;
    5098:	4604      	mov	r4, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    509a:	2d00      	cmp	r5, #0
    509c:	d1f3      	bne.n	5086 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    509e:	b13a      	cbz	r2, 50b0 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
    50a0:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
    50a2:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    50a4:	6858      	ldr	r0, [r3, #4]
	list->head = node;
    50a6:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
    50a8:	2800      	cmp	r0, #0
    50aa:	d1ea      	bne.n	5082 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    50ac:	6059      	str	r1, [r3, #4]
    50ae:	e7e9      	b.n	5084 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    50b0:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    50b4:	e7e6      	b.n	5084 <gpio_nrfx_manage_callback+0x24>

000050b6 <gpio_nrfx_config>:
{
    50b6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    50ba:	4680      	mov	r8, r0
	struct gpio_nrfx_data *data = get_port_data(port);
    50bc:	6885      	ldr	r5, [r0, #8]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    50be:	f403 4070 	and.w	r0, r3, #61440	; 0xf000
    50c2:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
{
    50c6:	461e      	mov	r6, r3
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    50c8:	d041      	beq.n	514e <gpio_nrfx_config+0x98>
    50ca:	dc09      	bgt.n	50e0 <gpio_nrfx_config+0x2a>
    50cc:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    50d0:	d03f      	beq.n	5152 <gpio_nrfx_config+0x9c>
    50d2:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
    50d6:	d03e      	beq.n	5156 <gpio_nrfx_config+0xa0>
    50d8:	b190      	cbz	r0, 5100 <gpio_nrfx_config+0x4a>
		return -EINVAL;
    50da:	f06f 0015 	mvn.w	r0, #21
    50de:	e033      	b.n	5148 <gpio_nrfx_config+0x92>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    50e0:	f5b0 4fe0 	cmp.w	r0, #28672	; 0x7000
    50e4:	d039      	beq.n	515a <gpio_nrfx_config+0xa4>
    50e6:	dc04      	bgt.n	50f2 <gpio_nrfx_config+0x3c>
    50e8:	f5b0 4fa0 	cmp.w	r0, #20480	; 0x5000
    50ec:	d1f5      	bne.n	50da <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0H1;
    50ee:	2003      	movs	r0, #3
    50f0:	e006      	b.n	5100 <gpio_nrfx_config+0x4a>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    50f2:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
    50f6:	d032      	beq.n	515e <gpio_nrfx_config+0xa8>
    50f8:	f5b0 4f50 	cmp.w	r0, #53248	; 0xd000
    50fc:	d1ed      	bne.n	50da <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0D1;
    50fe:	2007      	movs	r0, #7
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    5100:	f406 7740 	and.w	r7, r6, #768	; 0x300
    5104:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
    5108:	d02b      	beq.n	5162 <gpio_nrfx_config+0xac>
		pull = NRF_GPIO_PIN_NOPULL;
    510a:	f5a7 7400 	sub.w	r4, r7, #512	; 0x200
    510e:	4263      	negs	r3, r4
    5110:	4163      	adcs	r3, r4
	dir = ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT)
    5112:	f006 0c01 	and.w	ip, r6, #1
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
    5116:	ea4f 074c 	mov.w	r7, ip, lsl #1
	if (access_op == GPIO_ACCESS_BY_PORT) {
    511a:	2901      	cmp	r1, #1
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    511c:	ea47 070c 	orr.w	r7, r7, ip
		from_pin = pin;
    5120:	bf18      	it	ne
    5122:	b2d4      	uxtbne	r4, r2
    5124:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
    5128:	ea40 0783 	orr.w	r7, r0, r3, lsl #2
		to_pin   = pin;
    512c:	bf12      	itee	ne
    512e:	46a1      	movne	r9, r4
		to_pin   = 31U;
    5130:	f04f 091f 	moveq.w	r9, #31
		from_pin = 0U;
    5134:	2400      	moveq	r4, #0
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    5136:	f04f 4aa0 	mov.w	sl, #1342177280	; 0x50000000
    513a:	f04f 0b01 	mov.w	fp, #1
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    513e:	f006 0302 	and.w	r3, r6, #2
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    5142:	45a1      	cmp	r9, r4
    5144:	d20f      	bcs.n	5166 <gpio_nrfx_config+0xb0>
	return 0;
    5146:	2000      	movs	r0, #0
}
    5148:	b003      	add	sp, #12
    514a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		drive = NRF_GPIO_PIN_S0H1;
    514e:	2002      	movs	r0, #2
    5150:	e7d6      	b.n	5100 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_H0S1;
    5152:	2001      	movs	r0, #1
    5154:	e7d4      	b.n	5100 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0S1;
    5156:	2004      	movs	r0, #4
    5158:	e7d2      	b.n	5100 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0H1;
    515a:	2005      	movs	r0, #5
    515c:	e7d0      	b.n	5100 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_S0D1;
    515e:	2006      	movs	r0, #6
    5160:	e7ce      	b.n	5100 <gpio_nrfx_config+0x4a>
		pull = NRF_GPIO_PIN_PULLUP;
    5162:	2303      	movs	r3, #3
    5164:	e7d5      	b.n	5112 <gpio_nrfx_config+0x5c>
	return port->config->config_info;
    5166:	f8d8 2000 	ldr.w	r2, [r8]
		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
    516a:	6892      	ldr	r2, [r2, #8]
    516c:	7911      	ldrb	r1, [r2, #4]
    516e:	f004 021f 	and.w	r2, r4, #31
    5172:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
    5176:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    517a:	f84a 7022 	str.w	r7, [sl, r2, lsl #2]
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    517e:	fa0b f204 	lsl.w	r2, fp, r4
    5182:	68a9      	ldr	r1, [r5, #8]
    5184:	2b00      	cmp	r3, #0
    5186:	d025      	beq.n	51d4 <gpio_nrfx_config+0x11e>
    5188:	4311      	orrs	r1, r2
    518a:	60a9      	str	r1, [r5, #8]
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
    518c:	6969      	ldr	r1, [r5, #20]
    518e:	9301      	str	r3, [sp, #4]
    5190:	06b0      	lsls	r0, r6, #26
    5192:	bf4c      	ite	mi
    5194:	4311      	orrmi	r1, r2
    5196:	4391      	bicpl	r1, r2
    5198:	6169      	str	r1, [r5, #20]
		WRITE_BIT(data->double_edge, curr_pin,
    519a:	69a9      	ldr	r1, [r5, #24]
    519c:	0670      	lsls	r0, r6, #25
    519e:	bf4c      	ite	mi
    51a0:	4311      	orrmi	r1, r2
    51a2:	4391      	bicpl	r1, r2
    51a4:	61a9      	str	r1, [r5, #24]
		WRITE_BIT(data->active_level, curr_pin,
    51a6:	6929      	ldr	r1, [r5, #16]
    51a8:	0770      	lsls	r0, r6, #29
    51aa:	bf4c      	ite	mi
    51ac:	4311      	orrmi	r1, r2
    51ae:	4391      	bicpl	r1, r2
    51b0:	6129      	str	r1, [r5, #16]
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
    51b2:	69e9      	ldr	r1, [r5, #28]
    51b4:	0630      	lsls	r0, r6, #24
    51b6:	bf4c      	ite	mi
    51b8:	430a      	orrmi	r2, r1
    51ba:	ea21 0202 	bicpl.w	r2, r1, r2
    51be:	61ea      	str	r2, [r5, #28]
		res = gpiote_pin_int_cfg(port, curr_pin);
    51c0:	4621      	mov	r1, r4
    51c2:	4640      	mov	r0, r8
    51c4:	f7fd fb00 	bl	27c8 <gpiote_pin_int_cfg>
		if (res != 0) {
    51c8:	2800      	cmp	r0, #0
    51ca:	d1bd      	bne.n	5148 <gpio_nrfx_config+0x92>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    51cc:	3401      	adds	r4, #1
    51ce:	b2e4      	uxtb	r4, r4
    51d0:	9b01      	ldr	r3, [sp, #4]
    51d2:	e7b6      	b.n	5142 <gpio_nrfx_config+0x8c>
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    51d4:	ea21 0102 	bic.w	r1, r1, r2
    51d8:	e7d7      	b.n	518a <gpio_nrfx_config+0xd4>

000051da <gpio_nrfx_pin_disable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
    51da:	2901      	cmp	r1, #1
{
    51dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
    51e0:	bf18      	it	ne
    51e2:	b2d4      	uxtbne	r4, r2
	struct gpio_nrfx_data *data = get_port_data(port);
    51e4:	6887      	ldr	r7, [r0, #8]
{
    51e6:	4606      	mov	r6, r0
		to_pin   = pin;
    51e8:	bf12      	itee	ne
    51ea:	4625      	movne	r5, r4
		to_pin   = 31U;
    51ec:	251f      	moveq	r5, #31
		from_pin = 0U;
    51ee:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
    51f0:	f04f 0801 	mov.w	r8, #1
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    51f4:	42ac      	cmp	r4, r5
    51f6:	d902      	bls.n	51fe <gpio_nrfx_pin_disable_callback+0x24>
	return res;
    51f8:	2000      	movs	r0, #0
}
    51fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
    51fe:	68fb      	ldr	r3, [r7, #12]
    5200:	fa08 f204 	lsl.w	r2, r8, r4
    5204:	ea23 0302 	bic.w	r3, r3, r2
    5208:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
    520a:	4621      	mov	r1, r4
    520c:	4630      	mov	r0, r6
    520e:	f7fd fadb 	bl	27c8 <gpiote_pin_int_cfg>
		if (res != 0) {
    5212:	2800      	cmp	r0, #0
    5214:	d1f1      	bne.n	51fa <gpio_nrfx_pin_disable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    5216:	3401      	adds	r4, #1
    5218:	b2e4      	uxtb	r4, r4
    521a:	e7eb      	b.n	51f4 <gpio_nrfx_pin_disable_callback+0x1a>

0000521c <gpio_nrfx_pin_enable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
    521c:	2901      	cmp	r1, #1
{
    521e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
    5222:	bf18      	it	ne
    5224:	b2d4      	uxtbne	r4, r2
	struct gpio_nrfx_data *data = get_port_data(port);
    5226:	6887      	ldr	r7, [r0, #8]
{
    5228:	4606      	mov	r6, r0
		to_pin   = pin;
    522a:	bf12      	itee	ne
    522c:	4625      	movne	r5, r4
		to_pin   = 31U;
    522e:	251f      	moveq	r5, #31
		from_pin = 0U;
    5230:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
    5232:	f04f 0801 	mov.w	r8, #1
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    5236:	42ac      	cmp	r4, r5
    5238:	d902      	bls.n	5240 <gpio_nrfx_pin_enable_callback+0x24>
	return res;
    523a:	2000      	movs	r0, #0
}
    523c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
    5240:	68fb      	ldr	r3, [r7, #12]
    5242:	fa08 f204 	lsl.w	r2, r8, r4
    5246:	4313      	orrs	r3, r2
    5248:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
    524a:	4621      	mov	r1, r4
    524c:	4630      	mov	r0, r6
    524e:	f7fd fabb 	bl	27c8 <gpiote_pin_int_cfg>
		if (res != 0) {
    5252:	2800      	cmp	r0, #0
    5254:	d1f2      	bne.n	523c <gpio_nrfx_pin_enable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    5256:	3401      	adds	r4, #1
    5258:	b2e4      	uxtb	r4, r4
    525a:	e7ec      	b.n	5236 <gpio_nrfx_pin_enable_callback+0x1a>

0000525c <uart_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
    525c:	6882      	ldr	r2, [r0, #8]
{
    525e:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    5260:	e892 0003 	ldmia.w	r2, {r0, r1}
    5264:	e883 0003 	stmia.w	r3, {r0, r1}
}
    5268:	2000      	movs	r0, #0
    526a:	4770      	bx	lr

0000526c <nrf_pwm_event_clear>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    526c:	2300      	movs	r3, #0
    526e:	5043      	str	r3, [r0, r1]
{
    5270:	b082      	sub	sp, #8
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    5272:	5843      	ldr	r3, [r0, r1]
    5274:	9301      	str	r3, [sp, #4]
    (void)dummy;
    5276:	9b01      	ldr	r3, [sp, #4]
}
    5278:	b002      	add	sp, #8
    527a:	4770      	bx	lr

0000527c <start_playback.isra.2>:
static uint32_t start_playback(nrfx_pwm_t const * p_instance,
    527c:	b538      	push	{r3, r4, r5, lr}
    527e:	461d      	mov	r5, r3
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    5280:	2302      	movs	r3, #2
    5282:	720b      	strb	r3, [r1, #8]
    if (p_cb->handler)
    5284:	680b      	ldr	r3, [r1, #0]
    p_cb->flags = flags;
    5286:	724a      	strb	r2, [r1, #9]
static uint32_t start_playback(nrfx_pwm_t const * p_instance,
    5288:	4604      	mov	r4, r0
    if (p_cb->handler)
    528a:	b17b      	cbz	r3, 52ac <start_playback.isra.2+0x30>
            int_mask |= NRF_PWM_INT_SEQEND0_MASK;
    528c:	f012 0f04 	tst.w	r2, #4
    5290:	bf0c      	ite	eq
    5292:	2182      	moveq	r1, #130	; 0x82
    5294:	2192      	movne	r1, #146	; 0x92
        if (flags & NRFX_PWM_FLAG_SIGNAL_END_SEQ1)
    5296:	0710      	lsls	r0, r2, #28
            int_mask |= NRF_PWM_INT_SEQEND1_MASK;
    5298:	bf48      	it	mi
    529a:	f041 0120 	orrmi.w	r1, r1, #32
        if (flags & NRFX_PWM_FLAG_NO_EVT_FINISHED)
    529e:	06d3      	lsls	r3, r2, #27
        nrf_pwm_int_set(p_instance->p_registers, int_mask);
    52a0:	6823      	ldr	r3, [r4, #0]
            int_mask &= ~NRF_PWM_INT_LOOPSDONE_MASK;
    52a2:	bf48      	it	mi
    52a4:	f021 0180 	bicmi.w	r1, r1, #128	; 0x80
    p_reg->INTEN = mask;
    52a8:	f8c3 1300 	str.w	r1, [r3, #768]	; 0x300
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_STOPPED);
    52ac:	6820      	ldr	r0, [r4, #0]
    52ae:	f44f 7182 	mov.w	r1, #260	; 0x104
    52b2:	f7ff ffdb 	bl	526c <nrf_pwm_event_clear>
    if (flags & NRFX_PWM_FLAG_START_VIA_TASK)
    52b6:	6820      	ldr	r0, [r4, #0]
    52b8:	f012 0f80 	tst.w	r2, #128	; 0x80
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    52bc:	bf05      	ittet	eq
    52be:	2301      	moveq	r3, #1
    52c0:	5143      	streq	r3, [r0, r5]
    return ((uint32_t)p_reg + (uint32_t)task);
    52c2:	1940      	addne	r0, r0, r5
    return 0;
    52c4:	2000      	moveq	r0, #0
}
    52c6:	bd38      	pop	{r3, r4, r5, pc}

000052c8 <nrfx_pwm_stop>:
{
    52c8:	b538      	push	{r3, r4, r5, lr}
    52ca:	4605      	mov	r5, r0
    52cc:	460c      	mov	r4, r1
    if (nrfx_pwm_is_stopped(p_instance))
    52ce:	f7fe f837 	bl	3340 <nrfx_pwm_is_stopped>
    52d2:	b950      	cbnz	r0, 52ea <nrfx_pwm_stop+0x22>
        nrf_pwm_task_trigger(p_instance->p_registers, NRF_PWM_TASK_STOP);
    52d4:	682b      	ldr	r3, [r5, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    52d6:	2201      	movs	r2, #1
    52d8:	605a      	str	r2, [r3, #4]
            if (nrfx_pwm_is_stopped(p_instance))
    52da:	4628      	mov	r0, r5
    52dc:	f7fe f830 	bl	3340 <nrfx_pwm_is_stopped>
    52e0:	b918      	cbnz	r0, 52ea <nrfx_pwm_stop+0x22>
        } while (wait_until_stopped);
    52e2:	2c00      	cmp	r4, #0
    52e4:	d1f9      	bne.n	52da <nrfx_pwm_stop+0x12>
}
    52e6:	4620      	mov	r0, r4
    52e8:	bd38      	pop	{r3, r4, r5, pc}
        ret_val = true;
    52ea:	2401      	movs	r4, #1
    52ec:	e7fb      	b.n	52e6 <nrfx_pwm_stop+0x1e>

000052ee <arch_system_halt>:
	__asm__ volatile(
    52ee:	f04f 0220 	mov.w	r2, #32
    52f2:	f3ef 8311 	mrs	r3, BASEPRI
    52f6:	f382 8811 	msr	BASEPRI, r2
    52fa:	f3bf 8f6f 	isb	sy
	}
    52fe:	e7fe      	b.n	52fe <arch_system_halt+0x10>

00005300 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
    5300:	f7ff bd60 	b.w	4dc4 <z_clock_idle_exit>

00005304 <k_mem_slab_init>:
{
    5304:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    5306:	2400      	movs	r4, #0
	slab->block_size = block_size;
    5308:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->free_list = NULL;
    530c:	e9c0 4405 	strd	r4, r4, [r0, #20]
	slab->buffer = buffer;
    5310:	6101      	str	r1, [r0, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
    5312:	42a3      	cmp	r3, r4
    5314:	d102      	bne.n	531c <k_mem_slab_init+0x18>
	list->tail = (sys_dnode_t *)list;
    5316:	e9c0 0000 	strd	r0, r0, [r0]
}
    531a:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    531c:	6945      	ldr	r5, [r0, #20]
    531e:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    5320:	3401      	adds	r4, #1
		slab->free_list = p;
    5322:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
    5324:	4411      	add	r1, r2
    5326:	e7f4      	b.n	5312 <k_mem_slab_init+0xe>

00005328 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    5328:	7b43      	ldrb	r3, [r0, #13]
    532a:	06db      	lsls	r3, r3, #27
    532c:	bf03      	ittte	eq
    532e:	6980      	ldreq	r0, [r0, #24]
    5330:	fab0 f080 	clzeq	r0, r0
    5334:	0940      	lsreq	r0, r0, #5
    5336:	2000      	movne	r0, #0
}
    5338:	4770      	bx	lr

0000533a <z_find_first_thread_to_unpend>:
{
    533a:	b510      	push	{r4, lr}
    533c:	f04f 0320 	mov.w	r3, #32
    5340:	f3ef 8411 	mrs	r4, BASEPRI
    5344:	f383 8811 	msr	BASEPRI, r3
    5348:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
    534c:	f000 f83f 	bl	53ce <z_priq_dumb_best>
	__asm__ volatile(
    5350:	f384 8811 	msr	BASEPRI, r4
    5354:	f3bf 8f6f 	isb	sy
}
    5358:	bd10      	pop	{r4, pc}

0000535a <z_unpend_thread_no_timeout>:
{
    535a:	b538      	push	{r3, r4, r5, lr}
    535c:	4604      	mov	r4, r0
	__asm__ volatile(
    535e:	f04f 0320 	mov.w	r3, #32
    5362:	f3ef 8511 	mrs	r5, BASEPRI
    5366:	f383 8811 	msr	BASEPRI, r3
    536a:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    536e:	4601      	mov	r1, r0
    5370:	6880      	ldr	r0, [r0, #8]
    5372:	f7fe fa69 	bl	3848 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    5376:	7b63      	ldrb	r3, [r4, #13]
    5378:	f023 0302 	bic.w	r3, r3, #2
    537c:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
    537e:	f385 8811 	msr	BASEPRI, r5
    5382:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
    5386:	2300      	movs	r3, #0
    5388:	60a3      	str	r3, [r4, #8]
}
    538a:	bd38      	pop	{r3, r4, r5, pc}

0000538c <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    538c:	b921      	cbnz	r1, 5398 <z_reschedule+0xc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    538e:	f3ef 8005 	mrs	r0, IPSR
    5392:	b908      	cbnz	r0, 5398 <z_reschedule+0xc>
    5394:	f7fb bff6 	b.w	1384 <arch_swap>
    5398:	f381 8811 	msr	BASEPRI, r1
    539c:	f3bf 8f6f 	isb	sy
}
    53a0:	4770      	bx	lr

000053a2 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    53a2:	4603      	mov	r3, r0
    53a4:	b920      	cbnz	r0, 53b0 <z_reschedule_irqlock+0xe>
    53a6:	f3ef 8205 	mrs	r2, IPSR
    53aa:	b90a      	cbnz	r2, 53b0 <z_reschedule_irqlock+0xe>
    53ac:	f7fb bfea 	b.w	1384 <arch_swap>
    53b0:	f383 8811 	msr	BASEPRI, r3
    53b4:	f3bf 8f6f 	isb	sy
}
    53b8:	4770      	bx	lr

000053ba <z_reschedule_unlocked>:
	__asm__ volatile(
    53ba:	f04f 0320 	mov.w	r3, #32
    53be:	f3ef 8011 	mrs	r0, BASEPRI
    53c2:	f383 8811 	msr	BASEPRI, r3
    53c6:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    53ca:	f7ff bfea 	b.w	53a2 <z_reschedule_irqlock>

000053ce <z_priq_dumb_best>:
	return list->head == list;
    53ce:	6803      	ldr	r3, [r0, #0]
}
    53d0:	4298      	cmp	r0, r3
    53d2:	bf14      	ite	ne
    53d4:	4618      	movne	r0, r3
    53d6:	2000      	moveq	r0, #0
    53d8:	4770      	bx	lr

000053da <z_thread_timeout>:
	if (th->base.pended_on != NULL) {
    53da:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
    53de:	b570      	push	{r4, r5, r6, lr}
    53e0:	4604      	mov	r4, r0
	struct k_thread *th = CONTAINER_OF(to, struct k_thread, base.timeout);
    53e2:	f1a0 0518 	sub.w	r5, r0, #24
	if (th->base.pended_on != NULL) {
    53e6:	b1cb      	cbz	r3, 541c <z_thread_timeout+0x42>
    53e8:	f04f 0320 	mov.w	r3, #32
    53ec:	f3ef 8611 	mrs	r6, BASEPRI
    53f0:	f383 8811 	msr	BASEPRI, r3
    53f4:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    53f8:	4629      	mov	r1, r5
    53fa:	f850 0c10 	ldr.w	r0, [r0, #-16]
    53fe:	f7fe fa23 	bl	3848 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    5402:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    5406:	f023 0302 	bic.w	r3, r3, #2
    540a:	f804 3c0b 	strb.w	r3, [r4, #-11]
	__asm__ volatile(
    540e:	f386 8811 	msr	BASEPRI, r6
    5412:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
    5416:	2300      	movs	r3, #0
    5418:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    541c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    5420:	f023 0314 	bic.w	r3, r3, #20
    5424:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
    5428:	4628      	mov	r0, r5
    542a:	f7ff ff7d 	bl	5328 <z_is_thread_ready>
    542e:	b120      	cbz	r0, 543a <z_thread_timeout+0x60>
		z_add_thread_to_ready_q(thread);
    5430:	4628      	mov	r0, r5
}
    5432:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5436:	f7fe ba57 	b.w	38e8 <z_add_thread_to_ready_q>
    543a:	bd70      	pop	{r4, r5, r6, pc}

0000543c <z_unpend_first_thread>:
{
    543c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    543e:	f04f 0320 	mov.w	r3, #32
    5442:	f3ef 8211 	mrs	r2, BASEPRI
    5446:	f383 8811 	msr	BASEPRI, r3
    544a:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
    544e:	f7ff ffbe 	bl	53ce <z_priq_dumb_best>
    5452:	4604      	mov	r4, r0
	__asm__ volatile(
    5454:	f382 8811 	msr	BASEPRI, r2
    5458:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
    545c:	b1c8      	cbz	r0, 5492 <z_unpend_first_thread+0x56>
	__asm__ volatile(
    545e:	f04f 0320 	mov.w	r3, #32
    5462:	f3ef 8511 	mrs	r5, BASEPRI
    5466:	f383 8811 	msr	BASEPRI, r3
    546a:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    546e:	4601      	mov	r1, r0
    5470:	6880      	ldr	r0, [r0, #8]
    5472:	f7fe f9e9 	bl	3848 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    5476:	7b63      	ldrb	r3, [r4, #13]
    5478:	f023 0302 	bic.w	r3, r3, #2
    547c:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
    547e:	f385 8811 	msr	BASEPRI, r5
    5482:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
    5486:	2300      	movs	r3, #0
    5488:	60a3      	str	r3, [r4, #8]
	return z_abort_timeout(&thread->base.timeout);
    548a:	f104 0018 	add.w	r0, r4, #24
    548e:	f000 f83e 	bl	550e <z_abort_timeout>
}
    5492:	4620      	mov	r0, r4
    5494:	bd38      	pop	{r3, r4, r5, pc}

00005496 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    5496:	7b43      	ldrb	r3, [r0, #13]
    5498:	06db      	lsls	r3, r3, #27
    549a:	bf03      	ittte	eq
    549c:	6980      	ldreq	r0, [r0, #24]
    549e:	fab0 f080 	clzeq	r0, r0
    54a2:	0940      	lsreq	r0, r0, #5
    54a4:	2000      	movne	r0, #0
}
    54a6:	4770      	bx	lr

000054a8 <z_impl_k_thread_name_set>:
}
    54a8:	f06f 0046 	mvn.w	r0, #70	; 0x46
    54ac:	4770      	bx	lr

000054ae <k_thread_name_get>:
}
    54ae:	2000      	movs	r0, #0
    54b0:	4770      	bx	lr

000054b2 <z_new_thread_init>:
{
    54b2:	b510      	push	{r4, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
    54b4:	9c02      	ldr	r4, [sp, #8]
    54b6:	7304      	strb	r4, [r0, #12]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;
    54b8:	7383      	strb	r3, [r0, #14]
	thread_base->thread_state = (u8_t)initial_state;
    54ba:	2404      	movs	r4, #4

	thread_base->sched_locked = 0U;
    54bc:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
    54be:	7344      	strb	r4, [r0, #13]
	thread_base->sched_locked = 0U;
    54c0:	73c3      	strb	r3, [r0, #15]
	node->prev = NULL;
    54c2:	e9c0 3306 	strd	r3, r3, [r0, #24]
	thread->fn_abort = NULL;
    54c6:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
	thread->stack_info.size = (u32_t)stackSize;
    54ca:	e9c0 1216 	strd	r1, r2, [r0, #88]	; 0x58
}
    54ce:	bd10      	pop	{r4, pc}

000054d0 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
    54d0:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
    54d2:	b510      	push	{r4, lr}
    54d4:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
    54d6:	b103      	cbz	r3, 54da <z_thread_single_abort+0xa>
		thread->fn_abort();
    54d8:	4798      	blx	r3
	if (z_is_thread_ready(thread)) {
    54da:	4620      	mov	r0, r4
    54dc:	f7ff ffdb 	bl	5496 <z_is_thread_ready>
    54e0:	b138      	cbz	r0, 54f2 <z_thread_single_abort+0x22>
		z_remove_thread_from_ready_q(thread);
    54e2:	4620      	mov	r0, r4
    54e4:	f7fe faae 	bl	3a44 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_DEAD;
    54e8:	7b63      	ldrb	r3, [r4, #13]
    54ea:	f043 0308 	orr.w	r3, r3, #8
    54ee:	7363      	strb	r3, [r4, #13]
}
    54f0:	bd10      	pop	{r4, pc}
		if (z_is_thread_pending(thread)) {
    54f2:	7b63      	ldrb	r3, [r4, #13]
    54f4:	079b      	lsls	r3, r3, #30
    54f6:	d502      	bpl.n	54fe <z_thread_single_abort+0x2e>
			z_unpend_thread_no_timeout(thread);
    54f8:	4620      	mov	r0, r4
    54fa:	f7ff ff2e 	bl	535a <z_unpend_thread_no_timeout>
		if (z_is_thread_timeout_active(thread)) {
    54fe:	69a3      	ldr	r3, [r4, #24]
    5500:	2b00      	cmp	r3, #0
    5502:	d0f1      	beq.n	54e8 <z_thread_single_abort+0x18>
    5504:	f104 0018 	add.w	r0, r4, #24
    5508:	f000 f801 	bl	550e <z_abort_timeout>
    550c:	e7ec      	b.n	54e8 <z_thread_single_abort+0x18>

0000550e <z_abort_timeout>:
{
    550e:	b510      	push	{r4, lr}
	__asm__ volatile(
    5510:	f04f 0220 	mov.w	r2, #32
    5514:	f3ef 8411 	mrs	r4, BASEPRI
    5518:	f382 8811 	msr	BASEPRI, r2
    551c:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    5520:	6803      	ldr	r3, [r0, #0]
    5522:	b13b      	cbz	r3, 5534 <z_abort_timeout+0x26>
			remove_timeout(to);
    5524:	f7fe fd1e 	bl	3f64 <remove_timeout>
			ret = 0;
    5528:	2000      	movs	r0, #0
	__asm__ volatile(
    552a:	f384 8811 	msr	BASEPRI, r4
    552e:	f3bf 8f6f 	isb	sy
}
    5532:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    5534:	f06f 0015 	mvn.w	r0, #21
    5538:	e7f7      	b.n	552a <z_abort_timeout+0x1c>

0000553a <z_get_next_timeout_expiry>:
{
    553a:	b510      	push	{r4, lr}
	__asm__ volatile(
    553c:	f04f 0320 	mov.w	r3, #32
    5540:	f3ef 8411 	mrs	r4, BASEPRI
    5544:	f383 8811 	msr	BASEPRI, r3
    5548:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    554c:	f7fe fd1e 	bl	3f8c <next_timeout>
	__asm__ volatile(
    5550:	f384 8811 	msr	BASEPRI, r4
    5554:	f3bf 8f6f 	isb	sy
}
    5558:	bd10      	pop	{r4, pc}

0000555a <z_set_timeout_expiry>:
{
    555a:	b570      	push	{r4, r5, r6, lr}
    555c:	4604      	mov	r4, r0
    555e:	460e      	mov	r6, r1
	__asm__ volatile(
    5560:	f04f 0320 	mov.w	r3, #32
    5564:	f3ef 8511 	mrs	r5, BASEPRI
    5568:	f383 8811 	msr	BASEPRI, r3
    556c:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
    5570:	f7fe fd0c 	bl	3f8c <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    5574:	2801      	cmp	r0, #1
    5576:	dd05      	ble.n	5584 <z_set_timeout_expiry+0x2a>
    5578:	42a0      	cmp	r0, r4
    557a:	dd03      	ble.n	5584 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
    557c:	4631      	mov	r1, r6
    557e:	4620      	mov	r0, r4
    5580:	f7fb fe68 	bl	1254 <z_clock_set_timeout>
	__asm__ volatile(
    5584:	f385 8811 	msr	BASEPRI, r5
    5588:	f3bf 8f6f 	isb	sy
}
    558c:	bd70      	pop	{r4, r5, r6, pc}

0000558e <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
    558e:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
    5590:	f7fe fdb0 	bl	40f4 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
    5594:	bd08      	pop	{r3, pc}

00005596 <k_timer_init>:
	timer->status = 0U;
    5596:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
    5598:	e9c0 1206 	strd	r1, r2, [r0, #24]
    559c:	f100 0210 	add.w	r2, r0, #16
	timer->status = 0U;
    55a0:	6243      	str	r3, [r0, #36]	; 0x24
	list->tail = (sys_dnode_t *)list;
    55a2:	e9c0 2204 	strd	r2, r2, [r0, #16]
	node->prev = NULL;
    55a6:	e9c0 3300 	strd	r3, r3, [r0]
	timer->user_data = NULL;
    55aa:	6283      	str	r3, [r0, #40]	; 0x28
}
    55ac:	4770      	bx	lr

000055ae <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    55ae:	b510      	push	{r4, lr}
    55b0:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
    55b2:	f7ff ffac 	bl	550e <z_abort_timeout>

	if (inactive) {
    55b6:	bb00      	cbnz	r0, 55fa <z_impl_k_timer_stop+0x4c>
		return;
	}

	if (timer->stop_fn != NULL) {
    55b8:	69e3      	ldr	r3, [r4, #28]
    55ba:	b10b      	cbz	r3, 55c0 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    55bc:	4620      	mov	r0, r4
    55be:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
    55c0:	f104 0010 	add.w	r0, r4, #16
    55c4:	2100      	movs	r1, #0
    55c6:	f7ff feb8 	bl	533a <z_find_first_thread_to_unpend>
	if (thread != NULL) {
    55ca:	4604      	mov	r4, r0
    55cc:	b1a8      	cbz	r0, 55fa <z_impl_k_timer_stop+0x4c>
		z_unpend_thread_no_timeout(thread);
    55ce:	f7ff fec4 	bl	535a <z_unpend_thread_no_timeout>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    55d2:	7b63      	ldrb	r3, [r4, #13]
    55d4:	06db      	lsls	r3, r3, #27
    55d6:	d104      	bne.n	55e2 <z_impl_k_timer_stop+0x34>
	if (z_is_thread_ready(thread)) {
    55d8:	69a3      	ldr	r3, [r4, #24]
    55da:	b913      	cbnz	r3, 55e2 <z_impl_k_timer_stop+0x34>
		z_add_thread_to_ready_q(thread);
    55dc:	4620      	mov	r0, r4
    55de:	f7fe f983 	bl	38e8 <z_add_thread_to_ready_q>
	__asm__ volatile(
    55e2:	f04f 0320 	mov.w	r3, #32
    55e6:	f3ef 8011 	mrs	r0, BASEPRI
    55ea:	f383 8811 	msr	BASEPRI, r3
    55ee:	f3bf 8f6f 	isb	sy

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
		z_reschedule_unlocked();
	}
}
    55f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
    55f6:	f7ff bed4 	b.w	53a2 <z_reschedule_irqlock>
    55fa:	bd10      	pop	{r4, pc}

000055fc <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
    55fc:	4770      	bx	lr
