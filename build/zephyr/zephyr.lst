
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:

	return fd_entry->obj;
}

int z_reserve_fd(void)
{
   0:	200016f8 	.word	0x200016f8
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&mutex, *(uintptr_t *)&timeout, K_SYSCALL_K_MUTEX_LOCK);
	}
#endif
	compiler_barrier();
	return z_impl_k_mutex_lock(mutex, timeout);
   4:	0000173d 	.word	0x0000173d
   8:	00004efb 	.word	0x00004efb
		if (fdtable[fd].obj == NULL) {
   c:	00001611 	.word	0x00001611
  10:	00001611 	.word	0x00001611
  14:	00001611 	.word	0x00001611
	for (fd = 0; fd < ARRAY_SIZE(fdtable); fd++) {
  18:	00001611 	.word	0x00001611
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
  1c:	00001611 	.word	0x00001611
	errno = ENFILE;
  20:	00001611 	.word	0x00001611
	return -1;
  24:	00001611 	.word	0x00001611
		arch_syscall_invoke1(*(uintptr_t *)&mutex, K_SYSCALL_K_MUTEX_UNLOCK);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_mutex_unlock(mutex);
  28:	00001611 	.word	0x00001611
  2c:	00001509 	.word	0x00001509
	}

	k_mutex_unlock(&fdtable_lock);

	return fd;
}
  30:	00001611 	.word	0x00001611
		fdtable[fd].obj = FD_OBJ_RESERVED;
  34:	00001611 	.word	0x00001611
  38:	000014b5 	.word	0x000014b5
  3c:	00004eeb 	.word	0x00004eeb

00000040 <_irq_vector_table>:
  40:	000016fd 000016fd 000016fd 000016fd     ................
		sys_pm_notify_power_state_exit(pm_state);
		_sys_pm_power_state_exit_post_ops(pm_state);
	}

	return pm_state;
}
  50:	000016fd 000016fd 000016fd 000016fd     ................
  60:	000016fd 000016fd 000016fd 000016fd     ................
  70:	000016fd 000016fd 000016fd 000016fd     ................
  80:	000016fd 000016fd 000016fd 000016fd     ................
  90:	000016fd 000016fd 000016fd 000016fd     ................
  a0:	000016fd 000016fd 000016fd 000016fd     ................
  b0:	000016fd 000016fd 000016fd 000016fd     ................
  c0:	000016fd 000016fd 000016fd 000016fd     ................
  d0:	000016fd 000016fd 000016fd              ............

Disassembly of section _TEXT_SECTION_NAME_2:

000000dc <__aeabi_uldivmod>:
      dc:	b953      	cbnz	r3, f4 <__aeabi_uldivmod+0x18>
      de:	b94a      	cbnz	r2, f4 <__aeabi_uldivmod+0x18>
      e0:	2900      	cmp	r1, #0
      e2:	bf08      	it	eq
      e4:	2800      	cmpeq	r0, #0
      e6:	bf1c      	itt	ne
      e8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
      ec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
      f0:	f000 b80c 	b.w	10c <__aeabi_idiv0>
      f4:	f1ad 0c08 	sub.w	ip, sp, #8
      f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
      fc:	f000 f808 	bl	110 <__udivmoddi4>
     100:	f8dd e004 	ldr.w	lr, [sp, #4]
     104:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     108:	b004      	add	sp, #16
     10a:	4770      	bx	lr

0000010c <__aeabi_idiv0>:
     10c:	4770      	bx	lr
     10e:	bf00      	nop

00000110 <__udivmoddi4>:
     110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     114:	9f09      	ldr	r7, [sp, #36]	; 0x24
     116:	4615      	mov	r5, r2
     118:	4604      	mov	r4, r0
     11a:	468e      	mov	lr, r1
     11c:	461e      	mov	r6, r3
     11e:	2b00      	cmp	r3, #0
     120:	f040 80cc 	bne.w	2bc <CONFIG_FLASH_SIZE+0xbc>
     124:	428a      	cmp	r2, r1
     126:	fab2 fc82 	clz	ip, r2
     12a:	d94c      	bls.n	1c6 <CONFIG_IDLE_STACK_SIZE+0x86>
     12c:	f1bc 0f00 	cmp.w	ip, #0
     130:	d00b      	beq.n	14a <CONFIG_IDLE_STACK_SIZE+0xa>
     132:	f1cc 0820 	rsb	r8, ip, #32
     136:	fa01 fe0c 	lsl.w	lr, r1, ip
     13a:	fa20 f808 	lsr.w	r8, r0, r8
     13e:	fa02 f50c 	lsl.w	r5, r2, ip
     142:	ea48 0e0e 	orr.w	lr, r8, lr
     146:	fa00 f40c 	lsl.w	r4, r0, ip
     14a:	ea4f 4915 	mov.w	r9, r5, lsr #16
     14e:	fa1f f885 	uxth.w	r8, r5
     152:	fbbe faf9 	udiv	sl, lr, r9
     156:	0c21      	lsrs	r1, r4, #16
     158:	fb09 e31a 	mls	r3, r9, sl, lr
     15c:	fb0a fb08 	mul.w	fp, sl, r8
     160:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     164:	459b      	cmp	fp, r3
     166:	d92a      	bls.n	1be <CONFIG_IDLE_STACK_SIZE+0x7e>
     168:	18eb      	adds	r3, r5, r3
     16a:	f10a 30ff 	add.w	r0, sl, #4294967295	; 0xffffffff
     16e:	d204      	bcs.n	17a <CONFIG_IDLE_STACK_SIZE+0x3a>
     170:	459b      	cmp	fp, r3
     172:	d902      	bls.n	17a <CONFIG_IDLE_STACK_SIZE+0x3a>
     174:	f1aa 0002 	sub.w	r0, sl, #2
     178:	442b      	add	r3, r5
     17a:	eba3 030b 	sub.w	r3, r3, fp
     17e:	b2a4      	uxth	r4, r4
     180:	fbb3 f2f9 	udiv	r2, r3, r9
     184:	fb09 3312 	mls	r3, r9, r2, r3
     188:	fb02 f808 	mul.w	r8, r2, r8
     18c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     190:	45a0      	cmp	r8, r4
     192:	d916      	bls.n	1c2 <CONFIG_IDLE_STACK_SIZE+0x82>
     194:	192c      	adds	r4, r5, r4
     196:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
     19a:	d203      	bcs.n	1a4 <CONFIG_IDLE_STACK_SIZE+0x64>
     19c:	45a0      	cmp	r8, r4
     19e:	d901      	bls.n	1a4 <CONFIG_IDLE_STACK_SIZE+0x64>
     1a0:	1e93      	subs	r3, r2, #2
     1a2:	442c      	add	r4, r5
     1a4:	eba4 0408 	sub.w	r4, r4, r8
     1a8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     1ac:	b127      	cbz	r7, 1b8 <CONFIG_IDLE_STACK_SIZE+0x78>
     1ae:	fa24 f40c 	lsr.w	r4, r4, ip
     1b2:	2300      	movs	r3, #0
     1b4:	603c      	str	r4, [r7, #0]
     1b6:	607b      	str	r3, [r7, #4]
     1b8:	4631      	mov	r1, r6
     1ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     1be:	4650      	mov	r0, sl
     1c0:	e7db      	b.n	17a <CONFIG_IDLE_STACK_SIZE+0x3a>
     1c2:	4613      	mov	r3, r2
     1c4:	e7ee      	b.n	1a4 <CONFIG_IDLE_STACK_SIZE+0x64>
     1c6:	b902      	cbnz	r2, 1ca <CONFIG_IDLE_STACK_SIZE+0x8a>
     1c8:	deff      	udf	#255	; 0xff
     1ca:	f1bc 0f00 	cmp.w	ip, #0
     1ce:	d12e      	bne.n	22e <CONFIG_FLASH_SIZE+0x2e>
     1d0:	1a8b      	subs	r3, r1, r2
     1d2:	2601      	movs	r6, #1
     1d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1d8:	b2aa      	uxth	r2, r5
     1da:	fbb3 f8fe 	udiv	r8, r3, lr
     1de:	0c21      	lsrs	r1, r4, #16
     1e0:	fb0e 3318 	mls	r3, lr, r8, r3
     1e4:	fb08 f902 	mul.w	r9, r8, r2
     1e8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     1ec:	4599      	cmp	r9, r3
     1ee:	d961      	bls.n	2b4 <CONFIG_FLASH_SIZE+0xb4>
     1f0:	18eb      	adds	r3, r5, r3
     1f2:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     1f6:	d204      	bcs.n	202 <CONFIG_FLASH_SIZE+0x2>
     1f8:	4599      	cmp	r9, r3
     1fa:	d902      	bls.n	202 <CONFIG_FLASH_SIZE+0x2>
     1fc:	f1a8 0002 	sub.w	r0, r8, #2
     200:	442b      	add	r3, r5
     202:	eba3 0309 	sub.w	r3, r3, r9
     206:	b2a4      	uxth	r4, r4
     208:	fbb3 f1fe 	udiv	r1, r3, lr
     20c:	fb0e 3311 	mls	r3, lr, r1, r3
     210:	434a      	muls	r2, r1
     212:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     216:	42a2      	cmp	r2, r4
     218:	d94e      	bls.n	2b8 <CONFIG_FLASH_SIZE+0xb8>
     21a:	192c      	adds	r4, r5, r4
     21c:	f101 33ff 	add.w	r3, r1, #4294967295	; 0xffffffff
     220:	d203      	bcs.n	22a <CONFIG_FLASH_SIZE+0x2a>
     222:	42a2      	cmp	r2, r4
     224:	d901      	bls.n	22a <CONFIG_FLASH_SIZE+0x2a>
     226:	1e8b      	subs	r3, r1, #2
     228:	442c      	add	r4, r5
     22a:	1aa4      	subs	r4, r4, r2
     22c:	e7bc      	b.n	1a8 <CONFIG_IDLE_STACK_SIZE+0x68>
     22e:	f1cc 0e20 	rsb	lr, ip, #32
     232:	fa02 f50c 	lsl.w	r5, r2, ip
     236:	fa21 f90e 	lsr.w	r9, r1, lr
     23a:	fa01 f30c 	lsl.w	r3, r1, ip
     23e:	fa20 fe0e 	lsr.w	lr, r0, lr
     242:	ea4e 0303 	orr.w	r3, lr, r3
     246:	ea4f 4815 	mov.w	r8, r5, lsr #16
     24a:	fa00 f40c 	lsl.w	r4, r0, ip
     24e:	fbb9 f1f8 	udiv	r1, r9, r8
     252:	fa1f fe85 	uxth.w	lr, r5
     256:	fb08 9211 	mls	r2, r8, r1, r9
     25a:	0c18      	lsrs	r0, r3, #16
     25c:	fb01 f60e 	mul.w	r6, r1, lr
     260:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
     264:	4296      	cmp	r6, r2
     266:	d921      	bls.n	2ac <CONFIG_FLASH_SIZE+0xac>
     268:	18aa      	adds	r2, r5, r2
     26a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
     26e:	d203      	bcs.n	278 <CONFIG_FLASH_SIZE+0x78>
     270:	4296      	cmp	r6, r2
     272:	d901      	bls.n	278 <CONFIG_FLASH_SIZE+0x78>
     274:	1e88      	subs	r0, r1, #2
     276:	442a      	add	r2, r5
     278:	1b92      	subs	r2, r2, r6
     27a:	b29b      	uxth	r3, r3
     27c:	fbb2 f9f8 	udiv	r9, r2, r8
     280:	fb08 2219 	mls	r2, r8, r9, r2
     284:	fb09 fe0e 	mul.w	lr, r9, lr
     288:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
     28c:	459e      	cmp	lr, r3
     28e:	d90f      	bls.n	2b0 <CONFIG_FLASH_SIZE+0xb0>
     290:	18eb      	adds	r3, r5, r3
     292:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
     296:	d204      	bcs.n	2a2 <CONFIG_FLASH_SIZE+0xa2>
     298:	459e      	cmp	lr, r3
     29a:	d902      	bls.n	2a2 <CONFIG_FLASH_SIZE+0xa2>
     29c:	f1a9 0602 	sub.w	r6, r9, #2
     2a0:	442b      	add	r3, r5
     2a2:	eba3 030e 	sub.w	r3, r3, lr
     2a6:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
     2aa:	e793      	b.n	1d4 <CONFIG_IDLE_STACK_SIZE+0x94>
     2ac:	4608      	mov	r0, r1
     2ae:	e7e3      	b.n	278 <CONFIG_FLASH_SIZE+0x78>
     2b0:	464e      	mov	r6, r9
     2b2:	e7f6      	b.n	2a2 <CONFIG_FLASH_SIZE+0xa2>
     2b4:	4640      	mov	r0, r8
     2b6:	e7a4      	b.n	202 <CONFIG_FLASH_SIZE+0x2>
     2b8:	460b      	mov	r3, r1
     2ba:	e7b6      	b.n	22a <CONFIG_FLASH_SIZE+0x2a>
     2bc:	428b      	cmp	r3, r1
     2be:	d905      	bls.n	2cc <CONFIG_FLASH_SIZE+0xcc>
     2c0:	b10f      	cbz	r7, 2c6 <CONFIG_FLASH_SIZE+0xc6>
     2c2:	e9c7 0100 	strd	r0, r1, [r7]
     2c6:	2600      	movs	r6, #0
     2c8:	4630      	mov	r0, r6
     2ca:	e775      	b.n	1b8 <CONFIG_IDLE_STACK_SIZE+0x78>
     2cc:	fab3 fc83 	clz	ip, r3
     2d0:	f1bc 0f00 	cmp.w	ip, #0
     2d4:	d10f      	bne.n	2f6 <CONFIG_FLASH_SIZE+0xf6>
     2d6:	428b      	cmp	r3, r1
     2d8:	d301      	bcc.n	2de <CONFIG_FLASH_SIZE+0xde>
     2da:	4282      	cmp	r2, r0
     2dc:	d809      	bhi.n	2f2 <CONFIG_FLASH_SIZE+0xf2>
     2de:	1a84      	subs	r4, r0, r2
     2e0:	eb61 0e03 	sbc.w	lr, r1, r3
     2e4:	2001      	movs	r0, #1
     2e6:	2f00      	cmp	r7, #0
     2e8:	d06a      	beq.n	3c0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xc0>
     2ea:	e9c7 4e00 	strd	r4, lr, [r7]
     2ee:	2600      	movs	r6, #0
     2f0:	e762      	b.n	1b8 <CONFIG_IDLE_STACK_SIZE+0x78>
     2f2:	4660      	mov	r0, ip
     2f4:	e7f7      	b.n	2e6 <CONFIG_FLASH_SIZE+0xe6>
     2f6:	f1cc 0e20 	rsb	lr, ip, #32
     2fa:	fa03 f30c 	lsl.w	r3, r3, ip
     2fe:	fa22 f50e 	lsr.w	r5, r2, lr
     302:	fa21 f40e 	lsr.w	r4, r1, lr
     306:	431d      	orrs	r5, r3
     308:	fa01 f30c 	lsl.w	r3, r1, ip
     30c:	fa20 f10e 	lsr.w	r1, r0, lr
     310:	430b      	orrs	r3, r1
     312:	ea4f 4a15 	mov.w	sl, r5, lsr #16
     316:	fa00 f60c 	lsl.w	r6, r0, ip
     31a:	fbb4 f9fa 	udiv	r9, r4, sl
     31e:	fa1f f885 	uxth.w	r8, r5
     322:	fb0a 4019 	mls	r0, sl, r9, r4
     326:	0c1c      	lsrs	r4, r3, #16
     328:	fb09 f108 	mul.w	r1, r9, r8
     32c:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
     330:	42a1      	cmp	r1, r4
     332:	fa02 f20c 	lsl.w	r2, r2, ip
     336:	d93f      	bls.n	3b8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb8>
     338:	192c      	adds	r4, r5, r4
     33a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     33e:	d204      	bcs.n	34a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x4a>
     340:	42a1      	cmp	r1, r4
     342:	d902      	bls.n	34a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x4a>
     344:	f1a9 0002 	sub.w	r0, r9, #2
     348:	442c      	add	r4, r5
     34a:	1a64      	subs	r4, r4, r1
     34c:	b29b      	uxth	r3, r3
     34e:	fbb4 f9fa 	udiv	r9, r4, sl
     352:	fb0a 4419 	mls	r4, sl, r9, r4
     356:	fb09 f808 	mul.w	r8, r9, r8
     35a:	ea43 4104 	orr.w	r1, r3, r4, lsl #16
     35e:	4588      	cmp	r8, r1
     360:	d92c      	bls.n	3bc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xbc>
     362:	1869      	adds	r1, r5, r1
     364:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
     368:	d204      	bcs.n	374 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x74>
     36a:	4588      	cmp	r8, r1
     36c:	d902      	bls.n	374 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x74>
     36e:	f1a9 0302 	sub.w	r3, r9, #2
     372:	4429      	add	r1, r5
     374:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     378:	eba1 0108 	sub.w	r1, r1, r8
     37c:	fba0 8902 	umull	r8, r9, r0, r2
     380:	4549      	cmp	r1, r9
     382:	46c2      	mov	sl, r8
     384:	464c      	mov	r4, r9
     386:	d302      	bcc.n	38e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8e>
     388:	d106      	bne.n	398 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x98>
     38a:	4546      	cmp	r6, r8
     38c:	d204      	bcs.n	398 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x98>
     38e:	ebb8 0a02 	subs.w	sl, r8, r2
     392:	eb69 0405 	sbc.w	r4, r9, r5
     396:	3801      	subs	r0, #1
     398:	b197      	cbz	r7, 3c0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xc0>
     39a:	ebb6 030a 	subs.w	r3, r6, sl
     39e:	eb61 0604 	sbc.w	r6, r1, r4
     3a2:	fa06 fe0e 	lsl.w	lr, r6, lr
     3a6:	fa23 f30c 	lsr.w	r3, r3, ip
     3aa:	ea4e 0303 	orr.w	r3, lr, r3
     3ae:	fa26 f60c 	lsr.w	r6, r6, ip
     3b2:	e9c7 3600 	strd	r3, r6, [r7]
     3b6:	e79a      	b.n	2ee <CONFIG_FLASH_SIZE+0xee>
     3b8:	4648      	mov	r0, r9
     3ba:	e7c6      	b.n	34a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x4a>
     3bc:	464b      	mov	r3, r9
     3be:	e7d9      	b.n	374 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x74>
     3c0:	463e      	mov	r6, r7
     3c2:	e6f9      	b.n	1b8 <CONFIG_IDLE_STACK_SIZE+0x78>

000003c4 <button0_callback>:
	}
	state_machine_action();
}

void button0_callback(struct device *gpiob, struct gpio_callback *cb, u32_t pins)
{
     3c4:	b508      	push	{r3, lr}
    printk("Button 0 pressed!\n");
     3c6:	4805      	ldr	r0, [pc, #20]	; (3dc <button0_callback+0x18>)
     3c8:	f004 f9a2 	bl	4710 <printk>
    button0_pressed = 1;
     3cc:	4b04      	ldr	r3, [pc, #16]	; (3e0 <button0_callback+0x1c>)
    printk("Button 0 Value [%d]\n", button0_pressed);
     3ce:	4805      	ldr	r0, [pc, #20]	; (3e4 <button0_callback+0x20>)
    button0_pressed = 1;
     3d0:	2101      	movs	r1, #1
     3d2:	7019      	strb	r1, [r3, #0]
}
     3d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    printk("Button 0 Value [%d]\n", button0_pressed);
     3d8:	f004 b99a 	b.w	4710 <printk>
     3dc:	00005a6c 	.word	0x00005a6c
     3e0:	200003e8 	.word	0x200003e8
     3e4:	00005a7f 	.word	0x00005a7f

000003e8 <pwm_pin_set_usec.constprop.2>:
 * @param pulse Pulse width (in microseconds) set to the PWM.
 *
 * @retval 0 If successful.
 * @retval Negative errno code if failure.
 */
static inline int pwm_pin_set_usec(struct device *dev, u32_t pwm,
     3e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     3ec:	4680      	mov	r8, r0
     3ee:	468a      	mov	sl, r1
	return api->get_cycles_per_sec(dev, pwm, cycles);
     3f0:	6843      	ldr	r3, [r0, #4]
     3f2:	466a      	mov	r2, sp
     3f4:	685b      	ldr	r3, [r3, #4]
     3f6:	2111      	movs	r1, #17
     3f8:	4798      	blx	r3
				   u32_t period, u32_t pulse)
{
	u64_t period_cycles, pulse_cycles, cycles_per_sec;

	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
     3fa:	bb88      	cbnz	r0, 460 <CONFIG_LOG_BUFFER_SIZE+0x60>
		return -EIO;
	}

	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
     3fc:	e9dd 4900 	ldrd	r4, r9, [sp]
     400:	f644 6320 	movw	r3, #20000	; 0x4e20
     404:	fba4 6703 	umull	r6, r7, r4, r3
     408:	fb03 7709 	mla	r7, r3, r9, r7
     40c:	4a17      	ldr	r2, [pc, #92]	; (46c <CONFIG_LOG_BUFFER_SIZE+0x6c>)
     40e:	2300      	movs	r3, #0
     410:	4630      	mov	r0, r6
     412:	4639      	mov	r1, r7
     414:	f7ff fe62 	bl	dc <__aeabi_uldivmod>
	if (period_cycles >= ((u64_t)1 << 32)) {
     418:	4b15      	ldr	r3, [pc, #84]	; (470 <CONFIG_LOG_BUFFER_SIZE+0x70>)
     41a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     41e:	42bb      	cmp	r3, r7
     420:	bf08      	it	eq
     422:	42b2      	cmpeq	r2, r6
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
     424:	4683      	mov	fp, r0
	if (period_cycles >= ((u64_t)1 << 32)) {
     426:	d31e      	bcc.n	466 <CONFIG_LOG_BUFFER_SIZE+0x66>
		return -ENOTSUP;
	}

	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
     428:	fbaa 4504 	umull	r4, r5, sl, r4
     42c:	fb0a 5509 	mla	r5, sl, r9, r5
     430:	4a0e      	ldr	r2, [pc, #56]	; (46c <CONFIG_LOG_BUFFER_SIZE+0x6c>)
     432:	2300      	movs	r3, #0
     434:	4620      	mov	r0, r4
     436:	4629      	mov	r1, r5
     438:	f7ff fe50 	bl	dc <__aeabi_uldivmod>
	if (pulse_cycles >= ((u64_t)1 << 32)) {
     43c:	4a0c      	ldr	r2, [pc, #48]	; (470 <CONFIG_LOG_BUFFER_SIZE+0x70>)
     43e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     442:	42aa      	cmp	r2, r5
     444:	bf08      	it	eq
     446:	42a1      	cmpeq	r1, r4
	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
     448:	4603      	mov	r3, r0
	if (pulse_cycles >= ((u64_t)1 << 32)) {
     44a:	d30c      	bcc.n	466 <CONFIG_LOG_BUFFER_SIZE+0x66>
	return api->pin_set(dev, pwm, period, pulse);
     44c:	f8d8 2004 	ldr.w	r2, [r8, #4]
     450:	2111      	movs	r1, #17
     452:	6814      	ldr	r4, [r2, #0]
     454:	4640      	mov	r0, r8
     456:	465a      	mov	r2, fp
     458:	47a0      	blx	r4
		return -ENOTSUP;
	}

	return pwm_pin_set_cycles(dev, pwm, (u32_t)period_cycles,
				  (u32_t)pulse_cycles);
}
     45a:	b003      	add	sp, #12
     45c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EIO;
     460:	f06f 0004 	mvn.w	r0, #4
     464:	e7f9      	b.n	45a <CONFIG_LOG_BUFFER_SIZE+0x5a>
		return -ENOTSUP;
     466:	f06f 0022 	mvn.w	r0, #34	; 0x22
     46a:	e7f6      	b.n	45a <CONFIG_LOG_BUFFER_SIZE+0x5a>
     46c:	000f4240 	.word	0x000f4240
     470:	000f423f 	.word	0x000f423f

00000474 <state_machine_action>:
    switch (state) {
     474:	4b0f      	ldr	r3, [pc, #60]	; (4b4 <state_machine_action+0x40>)
     476:	781b      	ldrb	r3, [r3, #0]
     478:	2b01      	cmp	r3, #1
{
     47a:	b510      	push	{r4, lr}
    switch (state) {
     47c:	d00c      	beq.n	498 <state_machine_action+0x24>
     47e:	b113      	cbz	r3, 486 <state_machine_action+0x12>
     480:	2b02      	cmp	r3, #2
     482:	d014      	beq.n	4ae <state_machine_action+0x3a>
}
     484:	bd10      	pop	{r4, pc}
            input_read(&sensor1, &val);
     486:	490c      	ldr	r1, [pc, #48]	; (4b8 <state_machine_action+0x44>)
     488:	480c      	ldr	r0, [pc, #48]	; (4bc <state_machine_action+0x48>)
     48a:	f003 ff42 	bl	4312 <input_read>
            printk("Realizando a aferição normalmente\n");
     48e:	480c      	ldr	r0, [pc, #48]	; (4c0 <state_machine_action+0x4c>)
}
     490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            printk("Em espera\n");
     494:	f004 b93c 	b.w	4710 <printk>
            input_read(&sensor1, &val);
     498:	4c07      	ldr	r4, [pc, #28]	; (4b8 <state_machine_action+0x44>)
     49a:	4808      	ldr	r0, [pc, #32]	; (4bc <state_machine_action+0x48>)
     49c:	4621      	mov	r1, r4
     49e:	f003 ff38 	bl	4312 <input_read>
            printk("Valor transferido para central: %d.\n", val);
     4a2:	6821      	ldr	r1, [r4, #0]
     4a4:	4807      	ldr	r0, [pc, #28]	; (4c4 <state_machine_action+0x50>)
}
     4a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            printk("Valor transferido para central: %d.\n", val);
     4aa:	f004 b931 	b.w	4710 <printk>
            printk("Em espera\n");
     4ae:	4806      	ldr	r0, [pc, #24]	; (4c8 <state_machine_action+0x54>)
     4b0:	e7ee      	b.n	490 <state_machine_action+0x1c>
     4b2:	bf00      	nop
     4b4:	20002530 	.word	0x20002530
     4b8:	2000017c 	.word	0x2000017c
     4bc:	20000164 	.word	0x20000164
     4c0:	00005be7 	.word	0x00005be7
     4c4:	00005c0c 	.word	0x00005c0c
     4c8:	00005c31 	.word	0x00005c31

000004cc <state_machine>:
    switch (state) 
     4cc:	4b07      	ldr	r3, [pc, #28]	; (4ec <state_machine+0x20>)
     4ce:	781a      	ldrb	r2, [r3, #0]
     4d0:	b132      	cbz	r2, 4e0 <state_machine+0x14>
     4d2:	2a01      	cmp	r2, #1
     4d4:	d101      	bne.n	4da <state_machine+0xe>
            if(event == ALERT) {
     4d6:	2801      	cmp	r0, #1
     4d8:	d105      	bne.n	4e6 <state_machine+0x1a>
	    state = READING;
     4da:	2200      	movs	r2, #0
     4dc:	701a      	strb	r2, [r3, #0]
     4de:	e002      	b.n	4e6 <state_machine+0x1a>
            if(event == ALERT) {
     4e0:	2801      	cmp	r0, #1
     4e2:	d100      	bne.n	4e6 <state_machine+0x1a>
	        state = WRITING;
     4e4:	7018      	strb	r0, [r3, #0]
	state_machine_action();
     4e6:	f7ff bfc5 	b.w	474 <state_machine_action>
     4ea:	bf00      	nop
     4ec:	20002530 	.word	0x20002530

000004f0 <readThread>:

// ------------------------------------------------------------
// ------------------------------------------------------------
//  Thread de leitura
void readThread(void)
{
     4f0:	b508      	push	{r3, lr}
    printk("Hello Read Thread\n");
     4f2:	480b      	ldr	r0, [pc, #44]	; (520 <readThread+0x30>)
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sem, *(uintptr_t *)&timeout, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
     4f4:	4c0b      	ldr	r4, [pc, #44]	; (524 <readThread+0x34>)
        k_sleep(K_MSEC(SLEEP_TIME));
        k_sem_take(&data_sem, K_FOREVER);

        // ÁREA RESERVADA
	
	current_event = SENSING;
     4f6:	4d0c      	ldr	r5, [pc, #48]	; (528 <readThread+0x38>)
    printk("Hello Read Thread\n");
     4f8:	f004 f90a 	bl	4710 <printk>
        k_sleep(K_MSEC(SLEEP_TIME));
     4fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     500:	f003 fefa 	bl	42f8 <k_sleep>
     504:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     508:	4620      	mov	r0, r4
     50a:	f003 fc71 	bl	3df0 <z_impl_k_sem_take>
	current_event = SENSING;
     50e:	2000      	movs	r0, #0
     510:	7028      	strb	r0, [r5, #0]
    //printk("STATE - [%d] | CURRENT EVENT - [%d] - READ THREAD\n", state, current_event);
	state_machine(current_event);
     512:	f7ff ffdb 	bl	4cc <state_machine>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
     516:	4620      	mov	r0, r4
     518:	f003 fc44 	bl	3da4 <z_impl_k_sem_give>
     51c:	e7ee      	b.n	4fc <readThread+0xc>
     51e:	bf00      	nop
     520:	00005b85 	.word	0x00005b85
     524:	20002654 	.word	0x20002654
     528:	200003e9 	.word	0x200003e9

0000052c <buttonPWMThread>:
// ------------------------------------------------------------
// ------------------------------------------------------------

// THREAD DOS BOTÕES - Ao pressionar o botão LED PWM ativado
void buttonPWMThread(void)
{
     52c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        printk("Hello button Thread\n");
     530:	4819      	ldr	r0, [pc, #100]	; (598 <buttonPWMThread+0x6c>)

        while(1)
        {   
            k_sleep(K_MSEC(PWM_TIME));

            if(button0_pressed == 1)    
     532:	4f1a      	ldr	r7, [pc, #104]	; (59c <buttonPWMThread+0x70>)
        printk("Hello button Thread\n");
     534:	f004 f8ec 	bl	4710 <printk>
        u8_t counter = 0;
     538:	2400      	movs	r4, #0
        u8_t step = 1;
     53a:	2601      	movs	r6, #1
     53c:	46b8      	mov	r8, r7
            k_sleep(K_MSEC(PWM_TIME));
     53e:	2064      	movs	r0, #100	; 0x64
     540:	f003 feda 	bl	42f8 <k_sleep>
            if(button0_pressed == 1)    
     544:	783d      	ldrb	r5, [r7, #0]
     546:	2d01      	cmp	r5, #1
     548:	d1f9      	bne.n	53e <buttonPWMThread+0x12>
            {
                printk("Value of BUTTON 0 [%d]\n", button0_pressed);
     54a:	4629      	mov	r1, r5
     54c:	4814      	ldr	r0, [pc, #80]	; (5a0 <buttonPWMThread+0x74>)
     54e:	f004 f8df 	bl	4710 <printk>
		        current_event = ALERT;
     552:	4b14      	ldr	r3, [pc, #80]	; (5a4 <buttonPWMThread+0x78>)
                //printk("STATE - [%d] | CURRENT EVENT - [%d] - BUTTON THREAD\n", state, current_event);
		        state_machine(current_event);
     554:	4628      	mov	r0, r5
		        current_event = ALERT;
     556:	701d      	strb	r5, [r3, #0]

                if (pwm_pin_set_usec(pwm_dev, PWM_CHANNEL, PERIOD, (PERIOD / 50) * step)) 
     558:	4d13      	ldr	r5, [pc, #76]	; (5a8 <buttonPWMThread+0x7c>)
		        state_machine(current_event);
     55a:	f7ff ffb7 	bl	4cc <state_machine>
                if (pwm_pin_set_usec(pwm_dev, PWM_CHANNEL, PERIOD, (PERIOD / 50) * step)) 
     55e:	f44f 71c8 	mov.w	r1, #400	; 0x190
     562:	4371      	muls	r1, r6
     564:	6828      	ldr	r0, [r5, #0]
     566:	f7ff ff3f 	bl	3e8 <pwm_pin_set_usec.constprop.2>
     56a:	b110      	cbz	r0, 572 <buttonPWMThread+0x46>
                {
                    printk("pwm pin set fails\n");
     56c:	480f      	ldr	r0, [pc, #60]	; (5ac <buttonPWMThread+0x80>)
     56e:	f004 f8cf 	bl	4710 <printk>
                }

                step++;
     572:	3601      	adds	r6, #1
     574:	b2f6      	uxtb	r6, r6
                if (step == 50) 
     576:	2e32      	cmp	r6, #50	; 0x32
                {
                    step = 1;
                    counter += 1;
     578:	bf02      	ittt	eq
     57a:	3401      	addeq	r4, #1
     57c:	b2e4      	uxtbeq	r4, r4
                    step = 1;
     57e:	2601      	moveq	r6, #1
                }

                if (counter == 2)
     580:	2c02      	cmp	r4, #2
     582:	d1dc      	bne.n	53e <buttonPWMThread+0x12>
                {
                    button0_pressed = 0;
     584:	2400      	movs	r4, #0
                    counter = 0;
                    pwm_pin_set_usec(pwm_dev, PWM_CHANNEL, PERIOD, (PERIOD / 50) * 1);
     586:	f44f 71c8 	mov.w	r1, #400	; 0x190
     58a:	6828      	ldr	r0, [r5, #0]
                    button0_pressed = 0;
     58c:	f888 4000 	strb.w	r4, [r8]
                    pwm_pin_set_usec(pwm_dev, PWM_CHANNEL, PERIOD, (PERIOD / 50) * 1);
     590:	f7ff ff2a 	bl	3e8 <pwm_pin_set_usec.constprop.2>
     594:	e7d3      	b.n	53e <buttonPWMThread+0x12>
     596:	bf00      	nop
     598:	00005a94 	.word	0x00005a94
     59c:	200003e8 	.word	0x200003e8
     5a0:	00005aa9 	.word	0x00005aa9
     5a4:	200003e9 	.word	0x200003e9
     5a8:	20000160 	.word	0x20000160
     5ac:	00005ac1 	.word	0x00005ac1

000005b0 <printThread>:
// ------------------------------------------------------------
// ------------------------------------------------------------

// THREAD de Sincronização
void printThread(void)
{
     5b0:	b570      	push	{r4, r5, r6, lr}
    printk("Hello Print Thread\n");
     5b2:	480d      	ldr	r0, [pc, #52]	; (5e8 <printThread+0x38>)
	return z_impl_k_sem_take(sem, timeout);
     5b4:	4c0d      	ldr	r4, [pc, #52]	; (5ec <printThread+0x3c>)
    {
        k_sleep(K_MSEC(SLEEP_TIME));
        k_sem_take(&data_sem, K_FOREVER);
	// ÁREA RESERVADA
	
	current_event = SENSING;
     5b6:	4e0e      	ldr	r6, [pc, #56]	; (5f0 <printThread+0x40>)
    //printk("STATE - [%d] | CURRENT EVENT - [%d] - PRINT THREAD\n", state, current_event);
	state_machine(current_event);

        test = data;
     5b8:	4d0e      	ldr	r5, [pc, #56]	; (5f4 <printThread+0x44>)
    printk("Hello Print Thread\n");
     5ba:	f004 f8a9 	bl	4710 <printk>
        k_sleep(K_MSEC(SLEEP_TIME));
     5be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     5c2:	f003 fe99 	bl	42f8 <k_sleep>
     5c6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     5ca:	4620      	mov	r0, r4
     5cc:	f003 fc10 	bl	3df0 <z_impl_k_sem_take>
	current_event = SENSING;
     5d0:	2000      	movs	r0, #0
     5d2:	7030      	strb	r0, [r6, #0]
	state_machine(current_event);
     5d4:	f7ff ff7a 	bl	4cc <state_machine>
        printk("Value of data [%d]\n", test);
     5d8:	7829      	ldrb	r1, [r5, #0]
     5da:	4807      	ldr	r0, [pc, #28]	; (5f8 <printThread+0x48>)
     5dc:	f004 f898 	bl	4710 <printk>
	z_impl_k_sem_give(sem);
     5e0:	4620      	mov	r0, r4
     5e2:	f003 fbdf 	bl	3da4 <z_impl_k_sem_give>
     5e6:	e7ea      	b.n	5be <printThread+0xe>
     5e8:	00005b5d 	.word	0x00005b5d
     5ec:	20002654 	.word	0x20002654
     5f0:	200003e9 	.word	0x200003e9
     5f4:	200003ea 	.word	0x200003ea
     5f8:	00005b71 	.word	0x00005b71

000005fc <sensor>:
void sensor(input_t *sensor, u32_t pin, char *port){
     5fc:	b538      	push	{r3, r4, r5, lr}
     5fe:	460c      	mov	r4, r1
    int e = input_open(sensor, port);
     600:	4611      	mov	r1, r2
void sensor(input_t *sensor, u32_t pin, char *port){
     602:	4605      	mov	r5, r0
    int e = input_open(sensor, port);
     604:	f000 f858 	bl	6b8 <input_open>
    if(e){
     608:	b128      	cbz	r0, 616 <sensor+0x1a>
        printk("Alerta: Sensor para o PIN%d não inicializado.\n", pin);
     60a:	4807      	ldr	r0, [pc, #28]	; (628 <sensor+0x2c>)
     60c:	4621      	mov	r1, r4
}
     60e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    printk("Sensor em PIN%d inicializado.\n", pin);
     612:	f004 b87d 	b.w	4710 <printk>
    input_configure(sensor, pin, GPIO_DIR_IN | SW_GPIO_FLAGS);
     616:	4621      	mov	r1, r4
     618:	f44f 7299 	mov.w	r2, #306	; 0x132
     61c:	4628      	mov	r0, r5
     61e:	f003 fe6d 	bl	42fc <input_configure>
    printk("Sensor em PIN%d inicializado.\n", pin);
     622:	4621      	mov	r1, r4
     624:	4801      	ldr	r0, [pc, #4]	; (62c <sensor+0x30>)
     626:	e7f2      	b.n	60e <sensor+0x12>
     628:	00005b98 	.word	0x00005b98
     62c:	00005bc8 	.word	0x00005bc8

00000630 <main>:
{
     630:	b508      	push	{r3, lr}
    printk("Inicializando o Botão\n");
     632:	4815      	ldr	r0, [pc, #84]	; (688 <main+0x58>)
     634:	f004 f86c 	bl	4710 <printk>
    button_create(&button0, BUTTON_DEVICE, BUTTON_PIN0, button0_callback);
     638:	4b14      	ldr	r3, [pc, #80]	; (68c <main+0x5c>)
     63a:	4915      	ldr	r1, [pc, #84]	; (690 <main+0x60>)
     63c:	4815      	ldr	r0, [pc, #84]	; (694 <main+0x64>)
     63e:	220d      	movs	r2, #13
     640:	f003 fe72 	bl	4328 <button_create>
    printk("Botão OK\n");
     644:	4814      	ldr	r0, [pc, #80]	; (698 <main+0x68>)
     646:	f004 f863 	bl	4710 <printk>
    printk("Inicializando o device PWM\n");
     64a:	4814      	ldr	r0, [pc, #80]	; (69c <main+0x6c>)
     64c:	f004 f860 	bl	4710 <printk>
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     650:	4813      	ldr	r0, [pc, #76]	; (6a0 <main+0x70>)
     652:	f002 ff21 	bl	3498 <z_impl_device_get_binding>
    pwm_dev = device_get_binding(PWM_DRIVER);
     656:	4b13      	ldr	r3, [pc, #76]	; (6a4 <main+0x74>)
     658:	6018      	str	r0, [r3, #0]
    if (!pwm_dev) 
     65a:	b980      	cbnz	r0, 67e <main+0x4e>
        printk("Cannot find %s!\n", PWM_DRIVER);
     65c:	4910      	ldr	r1, [pc, #64]	; (6a0 <main+0x70>)
     65e:	4812      	ldr	r0, [pc, #72]	; (6a8 <main+0x78>)
     660:	f004 f856 	bl	4710 <printk>
    sensor(&sensor1, XL2_PIN, XL2_PORT);
     664:	4811      	ldr	r0, [pc, #68]	; (6ac <main+0x7c>)
     666:	4a0a      	ldr	r2, [pc, #40]	; (690 <main+0x60>)
     668:	210f      	movs	r1, #15
     66a:	f7ff ffc7 	bl	5fc <sensor>
    printk("Hello Main Thread\n");
     66e:	4810      	ldr	r0, [pc, #64]	; (6b0 <main+0x80>)
     670:	f004 f84e 	bl	4710 <printk>
        k_sleep(K_SECONDS(1));
     674:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     678:	f003 fe3e 	bl	42f8 <k_sleep>
     67c:	e7fa      	b.n	674 <main+0x44>
        printk("PWM device inicializado\n");
     67e:	480d      	ldr	r0, [pc, #52]	; (6b4 <main+0x84>)
     680:	f004 f846 	bl	4710 <printk>
     684:	e7ee      	b.n	664 <main+0x34>
     686:	bf00      	nop
     688:	00005ad4 	.word	0x00005ad4
     68c:	000003c5 	.word	0x000003c5
     690:	00005aec 	.word	0x00005aec
     694:	2000014c 	.word	0x2000014c
     698:	00005af3 	.word	0x00005af3
     69c:	00005afe 	.word	0x00005afe
     6a0:	00005b1a 	.word	0x00005b1a
     6a4:	20000160 	.word	0x20000160
     6a8:	00005b20 	.word	0x00005b20
     6ac:	20000164 	.word	0x20000164
     6b0:	00005b4a 	.word	0x00005b4a
     6b4:	00005b31 	.word	0x00005b31

000006b8 <input_open>:
#include <gpio.h>

//#include "setup.h"
#include "input.h"

int input_open(input_t *in, char *dev_label) {
     6b8:	b510      	push	{r4, lr}
     6ba:	4604      	mov	r4, r0
    in->dev_label = dev_label;
     6bc:	6101      	str	r1, [r0, #16]
     6be:	4608      	mov	r0, r1
     6c0:	f002 feea 	bl	3498 <z_impl_device_get_binding>
    in->device = device_get_binding(in->dev_label);
     6c4:	6020      	str	r0, [r4, #0]

    if(in->device == NULL) {
     6c6:	b920      	cbnz	r0, 6d2 <input_open+0x1a>
      printk("[INPUT] Error: Device not found or cannot be used.\n");
     6c8:	4803      	ldr	r0, [pc, #12]	; (6d8 <input_open+0x20>)
     6ca:	f004 f821 	bl	4710 <printk>
      return 1;
     6ce:	2001      	movs	r0, #1
    }
    return 0;
}
     6d0:	bd10      	pop	{r4, pc}
    return 0;
     6d2:	2000      	movs	r0, #0
     6d4:	e7fc      	b.n	6d0 <input_open+0x18>
     6d6:	bf00      	nop
     6d8:	00005c54 	.word	0x00005c54

000006dc <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     6dc:	680b      	ldr	r3, [r1, #0]
     6de:	3301      	adds	r3, #1
     6e0:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     6e2:	4b01      	ldr	r3, [pc, #4]	; (6e8 <char_out+0xc>)
     6e4:	681b      	ldr	r3, [r3, #0]
     6e6:	4718      	bx	r3
     6e8:	20002500 	.word	0x20002500

000006ec <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
     6ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     6f0:	b085      	sub	sp, #20
     6f2:	469b      	mov	fp, r3
     6f4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
     6f6:	f8df 9088 	ldr.w	r9, [pc, #136]	; 780 <_printk_dec_ulong+0x94>
     6fa:	2c01      	cmp	r4, #1
     6fc:	bfb8      	it	lt
     6fe:	2401      	movlt	r4, #1
     700:	2b01      	cmp	r3, #1
     702:	bf0c      	ite	eq
     704:	2330      	moveq	r3, #48	; 0x30
     706:	2320      	movne	r3, #32
     708:	4616      	mov	r6, r2
     70a:	4682      	mov	sl, r0
     70c:	4688      	mov	r8, r1
     70e:	9302      	str	r3, [sp, #8]
     710:	2501      	movs	r5, #1
     712:	270a      	movs	r7, #10
     714:	2200      	movs	r2, #0
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
     716:	fbb6 f3f9 	udiv	r3, r6, r9
     71a:	9301      	str	r3, [sp, #4]
     71c:	b90a      	cbnz	r2, 722 <_printk_dec_ulong+0x36>
     71e:	45b1      	cmp	r9, r6
     720:	d81d      	bhi.n	75e <_printk_dec_ulong+0x72>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
     722:	9b01      	ldr	r3, [sp, #4]
     724:	4641      	mov	r1, r8
     726:	f103 0030 	add.w	r0, r3, #48	; 0x30
     72a:	47d0      	blx	sl
			digits++;
     72c:	3501      	adds	r5, #1
			found_largest_digit = 1;
     72e:	2201      	movs	r2, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
     730:	9b01      	ldr	r3, [sp, #4]
		remaining--;
     732:	3f01      	subs	r7, #1
	while (pos >= 10) {
     734:	2f01      	cmp	r7, #1
		remainder %= pos;
     736:	fb09 6613 	mls	r6, r9, r3, r6
		pos /= 10;
     73a:	f04f 030a 	mov.w	r3, #10
     73e:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
     742:	d1e8      	bne.n	716 <_printk_dec_ulong+0x2a>
	}
	out((int)(remainder + 48), ctx);
     744:	4641      	mov	r1, r8
     746:	f106 0030 	add.w	r0, r6, #48	; 0x30
     74a:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
     74c:	f1bb 0f03 	cmp.w	fp, #3
     750:	d102      	bne.n	758 <_printk_dec_ulong+0x6c>
		remaining = min_width - digits;
     752:	1b64      	subs	r4, r4, r5
		while (remaining-- > 0) {
     754:	2c00      	cmp	r4, #0
     756:	dc0e      	bgt.n	776 <_printk_dec_ulong+0x8a>
			out(' ', ctx);
		}
	}
}
     758:	b005      	add	sp, #20
     75a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
     75e:	42bc      	cmp	r4, r7
     760:	dbe6      	blt.n	730 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
     762:	f1bb 0f02 	cmp.w	fp, #2
     766:	d8e3      	bhi.n	730 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     768:	4641      	mov	r1, r8
     76a:	9802      	ldr	r0, [sp, #8]
     76c:	9203      	str	r2, [sp, #12]
			digits++;
     76e:	3501      	adds	r5, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
     770:	47d0      	blx	sl
			digits++;
     772:	9a03      	ldr	r2, [sp, #12]
     774:	e7dc      	b.n	730 <_printk_dec_ulong+0x44>
			out(' ', ctx);
     776:	4641      	mov	r1, r8
     778:	2020      	movs	r0, #32
     77a:	47d0      	blx	sl
     77c:	3c01      	subs	r4, #1
     77e:	e7e9      	b.n	754 <_printk_dec_ulong+0x68>
     780:	3b9aca00 	.word	0x3b9aca00

00000784 <__printk_hook_install>:
	_char_out = fn;
     784:	4b01      	ldr	r3, [pc, #4]	; (78c <__printk_hook_install+0x8>)
     786:	6018      	str	r0, [r3, #0]
}
     788:	4770      	bx	lr
     78a:	bf00      	nop
     78c:	20002500 	.word	0x20002500

00000790 <vprintk>:
{
     790:	b507      	push	{r0, r1, r2, lr}
	struct out_context ctx = { 0 };
     792:	2300      	movs	r3, #0
     794:	9301      	str	r3, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
     796:	4602      	mov	r2, r0
     798:	460b      	mov	r3, r1
     79a:	4803      	ldr	r0, [pc, #12]	; (7a8 <vprintk+0x18>)
     79c:	a901      	add	r1, sp, #4
     79e:	f003 fe47 	bl	4430 <z_vprintk>
}
     7a2:	b003      	add	sp, #12
     7a4:	f85d fb04 	ldr.w	pc, [sp], #4
     7a8:	000006dd 	.word	0x000006dd

000007ac <enable_logger>:

K_THREAD_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(struct device *arg)
{
     7ac:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
     7ae:	2200      	movs	r2, #0
{
     7b0:	b087      	sub	sp, #28
		k_timer_init(&log_process_thread_timer,
     7b2:	490d      	ldr	r1, [pc, #52]	; (7e8 <enable_logger+0x3c>)
     7b4:	480d      	ldr	r0, [pc, #52]	; (7ec <enable_logger+0x40>)
     7b6:	f004 ff82 	bl	56be <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
     7ba:	4d0d      	ldr	r5, [pc, #52]	; (7f0 <enable_logger+0x44>)
     7bc:	490d      	ldr	r1, [pc, #52]	; (7f4 <enable_logger+0x48>)
     7be:	2400      	movs	r4, #0
     7c0:	230e      	movs	r3, #14
     7c2:	e9cd 4302 	strd	r4, r3, [sp, #8]
     7c6:	e9cd 4404 	strd	r4, r4, [sp, #16]
     7ca:	e9cd 4400 	strd	r4, r4, [sp]
     7ce:	4b0a      	ldr	r3, [pc, #40]	; (7f8 <enable_logger+0x4c>)
     7d0:	f44f 7240 	mov.w	r2, #768	; 0x300
     7d4:	4628      	mov	r0, r5
     7d6:	f003 fb6b 	bl	3eb0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
     7da:	4908      	ldr	r1, [pc, #32]	; (7fc <enable_logger+0x50>)
     7dc:	4628      	mov	r0, r5
     7de:	f004 fef7 	bl	55d0 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
     7e2:	4620      	mov	r0, r4
     7e4:	b007      	add	sp, #28
     7e6:	bd30      	pop	{r4, r5, pc}
     7e8:	00000801 	.word	0x00000801
     7ec:	20000194 	.word	0x20000194
     7f0:	200001dc 	.word	0x200001dc
     7f4:	20000ff8 	.word	0x20000ff8
     7f8:	00000c25 	.word	0x00000c25
     7fc:	00005c88 	.word	0x00005c88

00000800 <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
     800:	4801      	ldr	r0, [pc, #4]	; (808 <CONFIG_ISR_STACK_SIZE+0x8>)
     802:	f003 bacf 	b.w	3da4 <z_impl_k_sem_give>
     806:	bf00      	nop
     808:	20002664 	.word	0x20002664

0000080c <log_core_init>:
{
     80c:	b508      	push	{r3, lr}
		log_msg_pool_init();
     80e:	f000 fa69 	bl	ce4 <log_msg_pool_init>
		log_list_init(&list);
     812:	4809      	ldr	r0, [pc, #36]	; (838 <log_core_init+0x2c>)
     814:	f003 ff8a 	bl	472c <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
     818:	2304      	movs	r3, #4
     81a:	2228      	movs	r2, #40	; 0x28
     81c:	4807      	ldr	r0, [pc, #28]	; (83c <log_core_init+0x30>)
     81e:	4908      	ldr	r1, [pc, #32]	; (840 <log_core_init+0x34>)
     820:	f004 fe04 	bl	542c <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
     824:	4b07      	ldr	r3, [pc, #28]	; (844 <log_core_init+0x38>)
     826:	4a08      	ldr	r2, [pc, #32]	; (848 <log_core_init+0x3c>)
     828:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
     82a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
}
     82e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
     832:	f000 bc87 	b.w	1144 <log_output_timestamp_freq_set>
     836:	bf00      	nop
     838:	2000018c 	.word	0x2000018c
     83c:	200001c0 	.word	0x200001c0
     840:	20002060 	.word	0x20002060
     844:	20002504 	.word	0x20002504
     848:	0000476b 	.word	0x0000476b

0000084c <dropped_notify>:
{
     84c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
     84e:	4b0f      	ldr	r3, [pc, #60]	; (88c <dropped_notify+0x40>)
     850:	f3bf 8f5b 	dmb	ish
     854:	2500      	movs	r5, #0
     856:	e853 7f00 	ldrex	r7, [r3]
     85a:	e843 5200 	strex	r2, r5, [r3]
     85e:	2a00      	cmp	r2, #0
     860:	d1f9      	bne.n	856 <dropped_notify+0xa>
     862:	f3bf 8f5b 	dmb	ish
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
     866:	4c0a      	ldr	r4, [pc, #40]	; (890 <dropped_notify+0x44>)
     868:	4e0a      	ldr	r6, [pc, #40]	; (894 <dropped_notify+0x48>)
     86a:	1b36      	subs	r6, r6, r4
     86c:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
     86e:	42b5      	cmp	r5, r6
     870:	db00      	blt.n	874 <dropped_notify+0x28>
}
     872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
     874:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
     876:	795b      	ldrb	r3, [r3, #5]
     878:	b12b      	cbz	r3, 886 <dropped_notify+0x3a>
	if (backend->api->dropped != NULL) {
     87a:	6823      	ldr	r3, [r4, #0]
     87c:	68db      	ldr	r3, [r3, #12]
     87e:	b113      	cbz	r3, 886 <dropped_notify+0x3a>
		backend->api->dropped(backend, cnt);
     880:	4639      	mov	r1, r7
     882:	4620      	mov	r0, r4
     884:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
     886:	3501      	adds	r5, #1
     888:	3410      	adds	r4, #16
     88a:	e7f0      	b.n	86e <dropped_notify+0x22>
     88c:	20000184 	.word	0x20000184
     890:	00005930 	.word	0x00005930
     894:	00005940 	.word	0x00005940

00000898 <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
     898:	4b06      	ldr	r3, [pc, #24]	; (8b4 <log_dropped+0x1c>)
     89a:	f3bf 8f5b 	dmb	ish
     89e:	e853 2f00 	ldrex	r2, [r3]
     8a2:	3201      	adds	r2, #1
     8a4:	e843 2100 	strex	r1, r2, [r3]
     8a8:	2900      	cmp	r1, #0
     8aa:	d1f8      	bne.n	89e <log_dropped+0x6>
     8ac:	f3bf 8f5b 	dmb	ish
}
     8b0:	4770      	bx	lr
     8b2:	bf00      	nop
     8b4:	20000184 	.word	0x20000184

000008b8 <log_source_name_get>:
 * @return Source ID.
 */
static inline u32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((u8_t *)data - (u8_t *)__log_const_start)/
     8b8:	4a04      	ldr	r2, [pc, #16]	; (8cc <log_source_name_get+0x14>)
     8ba:	4b05      	ldr	r3, [pc, #20]	; (8d0 <log_source_name_get+0x18>)
     8bc:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
     8be:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
     8c2:	bf34      	ite	cc
     8c4:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
     8c8:	2000      	movcs	r0, #0
}
     8ca:	4770      	bx	lr
     8cc:	000058f8 	.word	0x000058f8
     8d0:	00005930 	.word	0x00005930

000008d4 <log_backend_enable>:
	id += backend - log_backend_get(0);
     8d4:	4b09      	ldr	r3, [pc, #36]	; (8fc <log_backend_enable+0x28>)
	log_backend_id_set(backend, id);
     8d6:	6842      	ldr	r2, [r0, #4]
	id += backend - log_backend_get(0);
     8d8:	1ac3      	subs	r3, r0, r3
     8da:	111b      	asrs	r3, r3, #4
     8dc:	3301      	adds	r3, #1
{
     8de:	b510      	push	{r4, lr}
	log_backend_id_set(backend, id);
     8e0:	7113      	strb	r3, [r2, #4]
	log_backend_activate(backend, ctx);
     8e2:	6843      	ldr	r3, [r0, #4]
	if (!backend_attached) {
     8e4:	4c06      	ldr	r4, [pc, #24]	; (900 <log_backend_enable+0x2c>)
	backend->cb->ctx = ctx;
     8e6:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
     8e8:	2201      	movs	r2, #1
     8ea:	715a      	strb	r2, [r3, #5]
     8ec:	7822      	ldrb	r2, [r4, #0]
     8ee:	b912      	cbnz	r2, 8f6 <log_backend_enable+0x22>
     8f0:	4804      	ldr	r0, [pc, #16]	; (904 <log_backend_enable+0x30>)
     8f2:	f003 fa57 	bl	3da4 <z_impl_k_sem_give>
	backend_attached = true;
     8f6:	2301      	movs	r3, #1
     8f8:	7023      	strb	r3, [r4, #0]
}
     8fa:	bd10      	pop	{r4, pc}
     8fc:	00005930 	.word	0x00005930
     900:	200003eb 	.word	0x200003eb
     904:	20002664 	.word	0x20002664

00000908 <log_init>:
{
     908:	b570      	push	{r4, r5, r6, lr}
     90a:	4b11      	ldr	r3, [pc, #68]	; (950 <log_init+0x48>)
     90c:	f3bf 8f5b 	dmb	ish
     910:	e853 5f00 	ldrex	r5, [r3]
     914:	1c6a      	adds	r2, r5, #1
     916:	e843 2100 	strex	r1, r2, [r3]
     91a:	2900      	cmp	r1, #0
     91c:	d1f8      	bne.n	910 <log_init+0x8>
     91e:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
     922:	b92d      	cbnz	r5, 930 <log_init+0x28>
	return __log_backends_end - __log_backends_start;
     924:	4c0b      	ldr	r4, [pc, #44]	; (954 <log_init+0x4c>)
     926:	4e0c      	ldr	r6, [pc, #48]	; (958 <log_init+0x50>)
     928:	1b36      	subs	r6, r6, r4
     92a:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
     92c:	42b5      	cmp	r5, r6
     92e:	db00      	blt.n	932 <log_init+0x2a>
}
     930:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
     932:	7b23      	ldrb	r3, [r4, #12]
     934:	b143      	cbz	r3, 948 <log_init+0x40>
			if (backend->api->init != NULL) {
     936:	6823      	ldr	r3, [r4, #0]
     938:	695b      	ldr	r3, [r3, #20]
     93a:	b103      	cbz	r3, 93e <log_init+0x36>
				backend->api->init();
     93c:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
     93e:	2204      	movs	r2, #4
     940:	2100      	movs	r1, #0
     942:	4620      	mov	r0, r4
     944:	f7ff ffc6 	bl	8d4 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
     948:	3501      	adds	r5, #1
     94a:	3410      	adds	r4, #16
     94c:	e7ee      	b.n	92c <log_init+0x24>
     94e:	bf00      	nop
     950:	20000188 	.word	0x20000188
     954:	00005930 	.word	0x00005930
     958:	00005940 	.word	0x00005940

0000095c <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
     95c:	4b16      	ldr	r3, [pc, #88]	; (9b8 <log_strdup+0x5c>)
     95e:	4298      	cmp	r0, r3
{
     960:	b537      	push	{r0, r1, r2, r4, r5, lr}
     962:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
     964:	d302      	bcc.n	96c <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
     966:	4b15      	ldr	r3, [pc, #84]	; (9bc <log_strdup+0x60>)
     968:	4298      	cmp	r0, r3
     96a:	d31f      	bcc.n	9ac <log_strdup+0x50>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
     96c:	2200      	movs	r2, #0
     96e:	a901      	add	r1, sp, #4
     970:	4813      	ldr	r0, [pc, #76]	; (9c0 <log_strdup+0x64>)
     972:	f002 ff37 	bl	37e4 <k_mem_slab_alloc>
	if (err != 0) {
     976:	4605      	mov	r5, r0
     978:	b9d8      	cbnz	r0, 9b2 <log_strdup+0x56>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
     97a:	2201      	movs	r2, #1
     97c:	9b01      	ldr	r3, [sp, #4]
     97e:	f3bf 8f5b 	dmb	ish
     982:	e853 1f00 	ldrex	r1, [r3]
     986:	e843 2000 	strex	r0, r2, [r3]
     98a:	2800      	cmp	r0, #0
     98c:	d1f9      	bne.n	982 <log_strdup+0x26>
     98e:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
     992:	9801      	ldr	r0, [sp, #4]
     994:	4621      	mov	r1, r4
     996:	221f      	movs	r2, #31
     998:	3004      	adds	r0, #4
     99a:	f004 fabd 	bl	4f18 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
     99e:	9c01      	ldr	r4, [sp, #4]
     9a0:	237e      	movs	r3, #126	; 0x7e
     9a2:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
     9a6:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
	return dup->buf;
     9aa:	3404      	adds	r4, #4
}
     9ac:	4620      	mov	r0, r4
     9ae:	b003      	add	sp, #12
     9b0:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
     9b2:	4c04      	ldr	r4, [pc, #16]	; (9c4 <log_strdup+0x68>)
     9b4:	e7fa      	b.n	9ac <log_strdup+0x50>
     9b6:	bf00      	nop
     9b8:	00005730 	.word	0x00005730
     9bc:	000063f8 	.word	0x000063f8
     9c0:	200001c0 	.word	0x200001c0
     9c4:	00005c90 	.word	0x00005c90

000009c8 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (u8_t *)buf);
     9c8:	b148      	cbz	r0, 9de <log_is_strdup+0x16>
     9ca:	4b05      	ldr	r3, [pc, #20]	; (9e0 <log_is_strdup+0x18>)
     9cc:	4298      	cmp	r0, r3
     9ce:	d305      	bcc.n	9dc <log_is_strdup+0x14>
     9d0:	33a0      	adds	r3, #160	; 0xa0
     9d2:	4298      	cmp	r0, r3
     9d4:	bf2c      	ite	cs
     9d6:	2000      	movcs	r0, #0
     9d8:	2001      	movcc	r0, #1
     9da:	4770      	bx	lr
     9dc:	2000      	movs	r0, #0
}
     9de:	4770      	bx	lr
     9e0:	20002060 	.word	0x20002060

000009e4 <z_impl_log_process>:
{
     9e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
     9e8:	4b53      	ldr	r3, [pc, #332]	; (b38 <z_impl_log_process+0x154>)
     9ea:	781b      	ldrb	r3, [r3, #0]
{
     9ec:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
     9ee:	b903      	cbnz	r3, 9f2 <z_impl_log_process+0xe>
     9f0:	b360      	cbz	r0, a4c <z_impl_log_process+0x68>
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     9f2:	f04f 0320 	mov.w	r3, #32
     9f6:	f3ef 8611 	mrs	r6, BASEPRI
     9fa:	f383 8811 	msr	BASEPRI, r3
     9fe:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
     a02:	484e      	ldr	r0, [pc, #312]	; (b3c <z_impl_log_process+0x158>)
     a04:	f003 fea2 	bl	474c <log_list_head_get>
     a08:	4605      	mov	r5, r0
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     a0a:	f386 8811 	msr	BASEPRI, r6
     a0e:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
     a12:	b178      	cbz	r0, a34 <z_impl_log_process+0x50>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
     a14:	f3bf 8f5b 	dmb	ish
     a18:	4b49      	ldr	r3, [pc, #292]	; (b40 <z_impl_log_process+0x15c>)
     a1a:	e853 2f00 	ldrex	r2, [r3]
     a1e:	3a01      	subs	r2, #1
     a20:	e843 2100 	strex	r1, r2, [r3]
     a24:	2900      	cmp	r1, #0
     a26:	d1f8      	bne.n	a1a <z_impl_log_process+0x36>
     a28:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
     a2c:	b18c      	cbz	r4, a52 <z_impl_log_process+0x6e>
	log_msg_put(msg);
     a2e:	4628      	mov	r0, r5
     a30:	f003 ff7d 	bl	492e <log_msg_put>
	if (!bypass && dropped_cnt) {
     a34:	b924      	cbnz	r4, a40 <z_impl_log_process+0x5c>
     a36:	4b43      	ldr	r3, [pc, #268]	; (b44 <z_impl_log_process+0x160>)
     a38:	681b      	ldr	r3, [r3, #0]
     a3a:	b10b      	cbz	r3, a40 <z_impl_log_process+0x5c>
		dropped_notify();
     a3c:	f7ff ff06 	bl	84c <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
     a40:	483e      	ldr	r0, [pc, #248]	; (b3c <z_impl_log_process+0x158>)
     a42:	f003 fe81 	bl	4748 <log_list_head_peek>
     a46:	1c04      	adds	r4, r0, #0
     a48:	bf18      	it	ne
     a4a:	2401      	movne	r4, #1
}
     a4c:	4620      	mov	r0, r4
     a4e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
     a52:	4b3d      	ldr	r3, [pc, #244]	; (b48 <z_impl_log_process+0x164>)
     a54:	781b      	ldrb	r3, [r3, #0]
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
     a56:	b9db      	cbnz	r3, a90 <z_impl_log_process+0xac>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
     a58:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
     a5a:	07db      	lsls	r3, r3, #31
     a5c:	d418      	bmi.n	a90 <z_impl_log_process+0xac>
	msg_str = log_msg_str_get(msg);
     a5e:	f003 ff79 	bl	4954 <log_msg_str_get>
     a62:	4681      	mov	r9, r0
	mask = count_s(msg_str, log_msg_nargs_get(msg));
     a64:	4628      	mov	r0, r5
     a66:	f003 ff42 	bl	48ee <log_msg_nargs_get>
	u32_t mask = 0;
     a6a:	4626      	mov	r6, r4
	bool arm = false;
     a6c:	4622      	mov	r2, r4
	mask = count_s(msg_str, log_msg_nargs_get(msg));
     a6e:	46cc      	mov	ip, r9
	u32_t arg = 0;
     a70:	4623      	mov	r3, r4
				mask |= BIT(arg);
     a72:	f04f 0e01 	mov.w	lr, #1
	while ((curr = *str++) && arg < nargs) {
     a76:	f81c 1b01 	ldrb.w	r1, [ip], #1
     a7a:	b109      	cbz	r1, a80 <z_impl_log_process+0x9c>
     a7c:	4298      	cmp	r0, r3
     a7e:	d80e      	bhi.n	a9e <z_impl_log_process+0xba>
	return ((u8_t *)data - (u8_t *)__log_const_start)/
     a80:	4b32      	ldr	r3, [pc, #200]	; (b4c <z_impl_log_process+0x168>)
				LOG_ERR(ERR_MSG, idx, msg_str);
     a82:	4a33      	ldr	r2, [pc, #204]	; (b50 <z_impl_log_process+0x16c>)
     a84:	f8df b0e0 	ldr.w	fp, [pc, #224]	; b68 <z_impl_log_process+0x184>
     a88:	1a9b      	subs	r3, r3, r2
     a8a:	f3c3 0ac9 	ubfx	sl, r3, #3, #10
	while (mask) {
     a8e:	b9d6      	cbnz	r6, ac6 <z_impl_log_process+0xe2>
     a90:	4e30      	ldr	r6, [pc, #192]	; (b54 <z_impl_log_process+0x170>)
     a92:	4f31      	ldr	r7, [pc, #196]	; (b58 <z_impl_log_process+0x174>)
     a94:	1bbf      	subs	r7, r7, r6
     a96:	113f      	asrs	r7, r7, #4
     a98:	f04f 0800 	mov.w	r8, #0
     a9c:	e048      	b.n	b30 <z_impl_log_process+0x14c>
		if (curr == '%') {
     a9e:	2925      	cmp	r1, #37	; 0x25
     aa0:	d102      	bne.n	aa8 <z_impl_log_process+0xc4>
			arm = !arm;
     aa2:	f082 0201 	eor.w	r2, r2, #1
     aa6:	e7e6      	b.n	a76 <z_impl_log_process+0x92>
		} else if (arm && isalpha((int)curr)) {
     aa8:	2a00      	cmp	r2, #0
     aaa:	d0e4      	beq.n	a76 <z_impl_log_process+0x92>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
}

static inline int isalpha(int c)
{
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
     aac:	f041 0720 	orr.w	r7, r1, #32
     ab0:	3f61      	subs	r7, #97	; 0x61
     ab2:	2f19      	cmp	r7, #25
     ab4:	d8df      	bhi.n	a76 <z_impl_log_process+0x92>
			if (curr == 's') {
     ab6:	2973      	cmp	r1, #115	; 0x73
				mask |= BIT(arg);
     ab8:	bf04      	itt	eq
     aba:	fa0e f203 	lsleq.w	r2, lr, r3
     abe:	4316      	orreq	r6, r2
			arg++;
     ac0:	3301      	adds	r3, #1
			arm = false;
     ac2:	2200      	movs	r2, #0
     ac4:	e7d7      	b.n	a76 <z_impl_log_process+0x92>
		idx = 31 - __builtin_clz(mask);
     ac6:	fab6 f786 	clz	r7, r6
     aca:	f1c7 071f 	rsb	r7, r7, #31
		str = (const char *)log_msg_arg_get(msg, idx);
     ace:	4639      	mov	r1, r7
     ad0:	4628      	mov	r0, r5
     ad2:	f003 ff0f 	bl	48f4 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
     ad6:	4b21      	ldr	r3, [pc, #132]	; (b5c <z_impl_log_process+0x178>)
     ad8:	4298      	cmp	r0, r3
		str = (const char *)log_msg_arg_get(msg, idx);
     ada:	4602      	mov	r2, r0
	return (((const char *)addr >= (const char *)RO_START) &&
     adc:	d302      	bcc.n	ae4 <z_impl_log_process+0x100>
		if (!is_rodata(str) && !log_is_strdup(str) &&
     ade:	4b20      	ldr	r3, [pc, #128]	; (b60 <z_impl_log_process+0x17c>)
     ae0:	4298      	cmp	r0, r3
     ae2:	d314      	bcc.n	b0e <z_impl_log_process+0x12a>
     ae4:	4610      	mov	r0, r2
     ae6:	f7ff ff6f 	bl	9c8 <log_is_strdup>
     aea:	b980      	cbnz	r0, b0e <z_impl_log_process+0x12a>
     aec:	4b1d      	ldr	r3, [pc, #116]	; (b64 <z_impl_log_process+0x180>)
     aee:	429a      	cmp	r2, r3
     af0:	d00d      	beq.n	b0e <z_impl_log_process+0x12a>
				LOG_ERR(ERR_MSG, idx, msg_str);
     af2:	f028 033f 	bic.w	r3, r8, #63	; 0x3f
     af6:	f043 0301 	orr.w	r3, r3, #1
     afa:	f363 0807 	bfi	r8, r3, #0, #8
     afe:	f36a 188f 	bfi	r8, sl, #6, #10
     b02:	4643      	mov	r3, r8
     b04:	464a      	mov	r2, r9
     b06:	4639      	mov	r1, r7
     b08:	4658      	mov	r0, fp
     b0a:	f003 fe53 	bl	47b4 <log_2>
		mask &= ~BIT(idx);
     b0e:	2301      	movs	r3, #1
     b10:	fa03 f707 	lsl.w	r7, r3, r7
     b14:	ea26 0607 	bic.w	r6, r6, r7
     b18:	e7b9      	b.n	a8e <z_impl_log_process+0xaa>
	return backend->cb->active;
     b1a:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
     b1c:	795b      	ldrb	r3, [r3, #5]
     b1e:	b123      	cbz	r3, b2a <z_impl_log_process+0x146>
	backend->api->put(backend, msg);
     b20:	6833      	ldr	r3, [r6, #0]
     b22:	4629      	mov	r1, r5
     b24:	681b      	ldr	r3, [r3, #0]
     b26:	4630      	mov	r0, r6
     b28:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
     b2a:	f108 0801 	add.w	r8, r8, #1
     b2e:	3610      	adds	r6, #16
     b30:	45b8      	cmp	r8, r7
     b32:	dbf2      	blt.n	b1a <z_impl_log_process+0x136>
     b34:	e77b      	b.n	a2e <z_impl_log_process+0x4a>
     b36:	bf00      	nop
     b38:	200003eb 	.word	0x200003eb
     b3c:	2000018c 	.word	0x2000018c
     b40:	20000180 	.word	0x20000180
     b44:	20000184 	.word	0x20000184
     b48:	200003ec 	.word	0x200003ec
     b4c:	00005900 	.word	0x00005900
     b50:	000058f8 	.word	0x000058f8
     b54:	00005930 	.word	0x00005930
     b58:	00005940 	.word	0x00005940
     b5c:	00005730 	.word	0x00005730
     b60:	000063f8 	.word	0x000063f8
     b64:	00005c90 	.word	0x00005c90
     b68:	00005cae 	.word	0x00005cae

00000b6c <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
     b6c:	4b26      	ldr	r3, [pc, #152]	; (c08 <msg_finalize+0x9c>)
{
     b6e:	b570      	push	{r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
     b70:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
     b72:	8141      	strh	r1, [r0, #10]
{
     b74:	4605      	mov	r5, r0
	msg->hdr.timestamp = timestamp_func();
     b76:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
     b78:	4c24      	ldr	r4, [pc, #144]	; (c0c <msg_finalize+0xa0>)
     b7a:	60e8      	str	r0, [r5, #12]
     b7c:	f3bf 8f5b 	dmb	ish
     b80:	e854 3f00 	ldrex	r3, [r4]
     b84:	3301      	adds	r3, #1
     b86:	e844 3200 	strex	r2, r3, [r4]
     b8a:	2a00      	cmp	r2, #0
     b8c:	d1f8      	bne.n	b80 <msg_finalize+0x14>
     b8e:	f3bf 8f5b 	dmb	ish
	__asm__ volatile(
     b92:	f04f 0320 	mov.w	r3, #32
     b96:	f3ef 8611 	mrs	r6, BASEPRI
     b9a:	f383 8811 	msr	BASEPRI, r3
     b9e:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
     ba2:	481b      	ldr	r0, [pc, #108]	; (c10 <msg_finalize+0xa4>)
     ba4:	4629      	mov	r1, r5
     ba6:	f003 fdc5 	bl	4734 <log_list_add_tail>
	__asm__ volatile(
     baa:	f386 8811 	msr	BASEPRI, r6
     bae:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
     bb2:	4b18      	ldr	r3, [pc, #96]	; (c14 <msg_finalize+0xa8>)
     bb4:	781a      	ldrb	r2, [r3, #0]
     bb6:	b17a      	cbz	r2, bd8 <msg_finalize+0x6c>
	__asm__ volatile(
     bb8:	f04f 0320 	mov.w	r3, #32
     bbc:	f3ef 8411 	mrs	r4, BASEPRI
     bc0:	f383 8811 	msr	BASEPRI, r3
     bc4:	f3bf 8f6f 	isb	sy
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
     bc8:	2000      	movs	r0, #0
     bca:	f7ff ff0b 	bl	9e4 <z_impl_log_process>
	__asm__ volatile(
     bce:	f384 8811 	msr	BASEPRI, r4
     bd2:	f3bf 8f6f 	isb	sy
}
     bd6:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
     bd8:	490f      	ldr	r1, [pc, #60]	; (c18 <msg_finalize+0xac>)
     bda:	6823      	ldr	r3, [r4, #0]
     bdc:	6809      	ldr	r1, [r1, #0]
     bde:	2900      	cmp	r1, #0
     be0:	d0f9      	beq.n	bd6 <msg_finalize+0x6a>
     be2:	2b01      	cmp	r3, #1
     be4:	d106      	bne.n	bf4 <msg_finalize+0x88>
	z_impl_k_timer_start(timer, duration, period);
     be6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
     bea:	480c      	ldr	r0, [pc, #48]	; (c1c <msg_finalize+0xb0>)
}
     bec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     bf0:	f003 bb40 	b.w	4274 <z_impl_k_timer_start>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
     bf4:	2b0a      	cmp	r3, #10
     bf6:	d1ee      	bne.n	bd6 <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
     bf8:	4808      	ldr	r0, [pc, #32]	; (c1c <msg_finalize+0xb0>)
     bfa:	f004 fd6c 	bl	56d6 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
     bfe:	4808      	ldr	r0, [pc, #32]	; (c20 <msg_finalize+0xb4>)
}
     c00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
     c04:	f003 b8ce 	b.w	3da4 <z_impl_k_sem_give>
     c08:	20002504 	.word	0x20002504
     c0c:	20000180 	.word	0x20000180
     c10:	2000018c 	.word	0x2000018c
     c14:	200003ec 	.word	0x200003ec
     c18:	20000248 	.word	0x20000248
     c1c:	20000194 	.word	0x20000194
     c20:	20002664 	.word	0x20002664

00000c24 <log_process_thread_func>:
{
     c24:	b508      	push	{r3, lr}
	log_init();
     c26:	f7ff fe6f 	bl	908 <log_init>
	return z_impl_k_current_get();
     c2a:	f003 f8b5 	bl	3d98 <z_impl_k_current_get>
	proc_tid = process_tid;
     c2e:	4b0b      	ldr	r3, [pc, #44]	; (c5c <log_process_thread_func+0x38>)
     c30:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
     c32:	b130      	cbz	r0, c42 <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
     c34:	4b0a      	ldr	r3, [pc, #40]	; (c60 <log_process_thread_func+0x3c>)
	    process_tid &&
     c36:	681b      	ldr	r3, [r3, #0]
     c38:	2b09      	cmp	r3, #9
     c3a:	dd02      	ble.n	c42 <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
     c3c:	4809      	ldr	r0, [pc, #36]	; (c64 <log_process_thread_func+0x40>)
     c3e:	f003 f8b1 	bl	3da4 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
     c42:	4c08      	ldr	r4, [pc, #32]	; (c64 <log_process_thread_func+0x40>)
     c44:	2000      	movs	r0, #0
     c46:	f7ff fecd 	bl	9e4 <z_impl_log_process>
		if (log_process(false) == false) {
     c4a:	2800      	cmp	r0, #0
     c4c:	d1fa      	bne.n	c44 <log_process_thread_func+0x20>
     c4e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     c52:	4620      	mov	r0, r4
     c54:	f003 f8cc 	bl	3df0 <z_impl_k_sem_take>
     c58:	e7f4      	b.n	c44 <log_process_thread_func+0x20>
     c5a:	bf00      	nop
     c5c:	20000248 	.word	0x20000248
     c60:	20000180 	.word	0x20000180
     c64:	20002664 	.word	0x20002664

00000c68 <z_impl_log_panic>:
{
     c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
     c6a:	4f0e      	ldr	r7, [pc, #56]	; (ca4 <z_impl_log_panic+0x3c>)
     c6c:	783d      	ldrb	r5, [r7, #0]
     c6e:	b975      	cbnz	r5, c8e <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
     c70:	4c0d      	ldr	r4, [pc, #52]	; (ca8 <z_impl_log_panic+0x40>)
     c72:	4e0e      	ldr	r6, [pc, #56]	; (cac <z_impl_log_panic+0x44>)
	log_init();
     c74:	f7ff fe48 	bl	908 <log_init>
     c78:	1b36      	subs	r6, r6, r4
     c7a:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
     c7c:	42b5      	cmp	r5, r6
     c7e:	db07      	blt.n	c90 <z_impl_log_panic+0x28>
     c80:	2000      	movs	r0, #0
     c82:	f7ff feaf 	bl	9e4 <z_impl_log_process>
		while (log_process(false) == true) {
     c86:	2800      	cmp	r0, #0
     c88:	d1fa      	bne.n	c80 <z_impl_log_panic+0x18>
	panic_mode = true;
     c8a:	2301      	movs	r3, #1
     c8c:	703b      	strb	r3, [r7, #0]
}
     c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
     c90:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
     c92:	795b      	ldrb	r3, [r3, #5]
     c94:	b11b      	cbz	r3, c9e <z_impl_log_panic+0x36>
	backend->api->panic(backend);
     c96:	6823      	ldr	r3, [r4, #0]
     c98:	4620      	mov	r0, r4
     c9a:	691b      	ldr	r3, [r3, #16]
     c9c:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
     c9e:	3501      	adds	r5, #1
     ca0:	3410      	adds	r4, #16
     ca2:	e7eb      	b.n	c7c <z_impl_log_panic+0x14>
     ca4:	200003ec 	.word	0x200003ec
     ca8:	00005930 	.word	0x00005930
     cac:	00005940 	.word	0x00005940

00000cb0 <log_free>:
{
     cb0:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
     cb2:	3804      	subs	r0, #4
     cb4:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
     cb6:	f3bf 8f5b 	dmb	ish
     cba:	e850 3f00 	ldrex	r3, [r0]
     cbe:	1e5a      	subs	r2, r3, #1
     cc0:	e840 2100 	strex	r1, r2, [r0]
     cc4:	2900      	cmp	r1, #0
     cc6:	d1f8      	bne.n	cba <log_free+0xa>
     cc8:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
     ccc:	2b01      	cmp	r3, #1
     cce:	d103      	bne.n	cd8 <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
     cd0:	a901      	add	r1, sp, #4
     cd2:	4803      	ldr	r0, [pc, #12]	; (ce0 <log_free+0x30>)
     cd4:	f002 fdb2 	bl	383c <k_mem_slab_free>
}
     cd8:	b003      	add	sp, #12
     cda:	f85d fb04 	ldr.w	pc, [sp], #4
     cde:	bf00      	nop
     ce0:	200001c0 	.word	0x200001c0

00000ce4 <log_msg_pool_init>:
static u8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
     ce4:	2320      	movs	r3, #32
     ce6:	461a      	mov	r2, r3
     ce8:	4901      	ldr	r1, [pc, #4]	; (cf0 <log_msg_pool_init+0xc>)
     cea:	4802      	ldr	r0, [pc, #8]	; (cf4 <log_msg_pool_init+0x10>)
     cec:	f004 bb9e 	b.w	542c <k_mem_slab_init>
     cf0:	20002100 	.word	0x20002100
     cf4:	2000024c 	.word	0x2000024c

00000cf8 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
     cf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
     cfa:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
     cfc:	4d09      	ldr	r5, [pc, #36]	; (d24 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
     cfe:	9301      	str	r3, [sp, #4]
     d00:	2001      	movs	r0, #1
     d02:	f7ff fe6f 	bl	9e4 <z_impl_log_process>
     d06:	4604      	mov	r4, r0
			log_dropped();
     d08:	f7ff fdc6 	bl	898 <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
     d0c:	2200      	movs	r2, #0
     d0e:	a901      	add	r1, sp, #4
     d10:	4628      	mov	r0, r5
     d12:	f002 fd67 	bl	37e4 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
     d16:	b108      	cbz	r0, d1c <log_msg_no_space_handle+0x24>
     d18:	2c00      	cmp	r4, #0
     d1a:	d1f1      	bne.n	d00 <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
     d1c:	9801      	ldr	r0, [sp, #4]
     d1e:	b003      	add	sp, #12
     d20:	bd30      	pop	{r4, r5, pc}
     d22:	bf00      	nop
     d24:	2000024c 	.word	0x2000024c

00000d28 <log_msg_chunk_alloc>:
{
     d28:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
     d2a:	2200      	movs	r2, #0
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
     d2c:	a901      	add	r1, sp, #4
     d2e:	4806      	ldr	r0, [pc, #24]	; (d48 <log_msg_chunk_alloc+0x20>)
	union log_msg_chunk *msg = NULL;
     d30:	9201      	str	r2, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
     d32:	f002 fd57 	bl	37e4 <k_mem_slab_alloc>
	if (err != 0) {
     d36:	b110      	cbz	r0, d3e <log_msg_chunk_alloc+0x16>
		msg = log_msg_no_space_handle();
     d38:	f7ff ffde 	bl	cf8 <log_msg_no_space_handle>
     d3c:	9001      	str	r0, [sp, #4]
}
     d3e:	9801      	ldr	r0, [sp, #4]
     d40:	b003      	add	sp, #12
     d42:	f85d fb04 	ldr.w	pc, [sp], #4
     d46:	bf00      	nop
     d48:	2000024c 	.word	0x2000024c

00000d4c <msg_free>:
{
     d4c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
     d4e:	7a04      	ldrb	r4, [r0, #8]
	u32_t nargs = msg->hdr.params.std.nargs;
     d50:	7a45      	ldrb	r5, [r0, #9]
{
     d52:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
     d54:	f014 0401 	ands.w	r4, r4, #1
	u32_t nargs = msg->hdr.params.std.nargs;
     d58:	ea4f 1515 	mov.w	r5, r5, lsr #4
	if (log_msg_is_std(msg) && nargs) {
     d5c:	d00e      	beq.n	d7c <msg_free+0x30>
	if (msg->hdr.params.generic.ext == 1) {
     d5e:	9b01      	ldr	r3, [sp, #4]
     d60:	7a1a      	ldrb	r2, [r3, #8]
     d62:	0792      	lsls	r2, r2, #30
     d64:	d504      	bpl.n	d70 <msg_free+0x24>
		cont_free(msg->payload.ext.next);
     d66:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
     d68:	4c10      	ldr	r4, [pc, #64]	; (dac <msg_free+0x60>)
     d6a:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
     d6c:	9b03      	ldr	r3, [sp, #12]
     d6e:	b9b3      	cbnz	r3, d9e <msg_free+0x52>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
     d70:	a901      	add	r1, sp, #4
     d72:	480e      	ldr	r0, [pc, #56]	; (dac <msg_free+0x60>)
     d74:	f002 fd62 	bl	383c <k_mem_slab_free>
}
     d78:	b004      	add	sp, #16
     d7a:	bd70      	pop	{r4, r5, r6, pc}
	if (log_msg_is_std(msg) && nargs) {
     d7c:	2d00      	cmp	r5, #0
     d7e:	d0ee      	beq.n	d5e <msg_free+0x12>
		for (i = 0; i < nargs; i++) {
     d80:	42a5      	cmp	r5, r4
     d82:	9801      	ldr	r0, [sp, #4]
     d84:	d9eb      	bls.n	d5e <msg_free+0x12>
			void *buf = (void *)log_msg_arg_get(msg, i);
     d86:	4621      	mov	r1, r4
     d88:	f003 fdb4 	bl	48f4 <log_msg_arg_get>
     d8c:	4606      	mov	r6, r0
			if (log_is_strdup(buf)) {
     d8e:	f7ff fe1b 	bl	9c8 <log_is_strdup>
     d92:	b110      	cbz	r0, d9a <msg_free+0x4e>
				log_free(buf);
     d94:	4630      	mov	r0, r6
     d96:	f7ff ff8b 	bl	cb0 <log_free>
		for (i = 0; i < nargs; i++) {
     d9a:	3401      	adds	r4, #1
     d9c:	e7f0      	b.n	d80 <msg_free+0x34>
		next = cont->next;
     d9e:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
     da0:	a903      	add	r1, sp, #12
     da2:	4620      	mov	r0, r4
     da4:	f002 fd4a 	bl	383c <k_mem_slab_free>
		cont = next;
     da8:	9503      	str	r5, [sp, #12]
     daa:	e7df      	b.n	d6c <msg_free+0x20>
     dac:	2000024c 	.word	0x2000024c

00000db0 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
     db0:	b40e      	push	{r1, r2, r3}
     db2:	b503      	push	{r0, r1, lr}
     db4:	ab03      	add	r3, sp, #12
	va_start(args, fmt);
#if !defined(CONFIG_NEWLIB_LIBC) && !defined(CONFIG_ARCH_POSIX) && \
    defined(CONFIG_LOG_ENABLE_FANCY_OUTPUT_FORMATTING)
	length = z_prf(out_func, (void *)log_output, (char *)fmt, args);
#else
	z_vprintk(out_func, (void *)log_output, fmt, args);
     db6:	4601      	mov	r1, r0
{
     db8:	f853 2b04 	ldr.w	r2, [r3], #4
	z_vprintk(out_func, (void *)log_output, fmt, args);
     dbc:	4804      	ldr	r0, [pc, #16]	; (dd0 <print_formatted+0x20>)
	va_start(args, fmt);
     dbe:	9301      	str	r3, [sp, #4]
	z_vprintk(out_func, (void *)log_output, fmt, args);
     dc0:	f003 fb36 	bl	4430 <z_vprintk>
#endif
	va_end(args);

	return length;
}
     dc4:	2000      	movs	r0, #0
     dc6:	b002      	add	sp, #8
     dc8:	f85d eb04 	ldr.w	lr, [sp], #4
     dcc:	b003      	add	sp, #12
     dce:	4770      	bx	lr
     dd0:	00004cfd 	.word	0x00004cfd

00000dd4 <prefix_print>:
}

static u32_t prefix_print(const struct log_output *log_output,
			 u32_t flags, bool func_on, u32_t timestamp, u8_t level,
			 u8_t domain_id, u16_t source_id)
{
     dd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     dd8:	b085      	sub	sp, #20
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
     dda:	f011 0402 	ands.w	r4, r1, #2
{
     dde:	4606      	mov	r6, r0
     de0:	4690      	mov	r8, r2
     de2:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
     de6:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
     dea:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
     dee:	d007      	beq.n	e00 <prefix_print+0x2c>
	if (!format) {
     df0:	f011 0f44 	tst.w	r1, #68	; 0x44
     df4:	d137      	bne.n	e66 <prefix_print+0x92>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
     df6:	461a      	mov	r2, r3
     df8:	4932      	ldr	r1, [pc, #200]	; (ec4 <prefix_print+0xf0>)
     dfa:	f7ff ffd9 	bl	db0 <print_formatted>
		length += timestamp_print(log_output, flags, timestamp);
     dfe:	4604      	mov	r4, r0
	if (color) {
     e00:	f1b9 0f00 	cmp.w	r9, #0
     e04:	d00a      	beq.n	e1c <prefix_print+0x48>
		const char *color = start && (colors[level] != NULL) ?
     e06:	4b30      	ldr	r3, [pc, #192]	; (ec8 <prefix_print+0xf4>)
		print_formatted(log_output, "%s", color);
     e08:	4930      	ldr	r1, [pc, #192]	; (ecc <prefix_print+0xf8>)
		const char *color = start && (colors[level] != NULL) ?
     e0a:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", color);
     e0e:	4b30      	ldr	r3, [pc, #192]	; (ed0 <prefix_print+0xfc>)
     e10:	4630      	mov	r0, r6
     e12:	2a00      	cmp	r2, #0
     e14:	bf08      	it	eq
     e16:	461a      	moveq	r2, r3
     e18:	f7ff ffca 	bl	db0 <print_formatted>
	if (level_on) {
     e1c:	b13d      	cbz	r5, e2e <prefix_print+0x5a>
		total += print_formatted(log_output, "<%s> ", severity[level]);
     e1e:	4b2d      	ldr	r3, [pc, #180]	; (ed4 <prefix_print+0x100>)
     e20:	492d      	ldr	r1, [pc, #180]	; (ed8 <prefix_print+0x104>)
     e22:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
     e26:	4630      	mov	r0, r6
     e28:	f7ff ffc2 	bl	db0 <print_formatted>
     e2c:	4605      	mov	r5, r0
	total += print_formatted(log_output,
     e2e:	f1b8 0f00 	cmp.w	r8, #0
     e32:	d044      	beq.n	ebe <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
     e34:	2301      	movs	r3, #1
     e36:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
     e3a:	4b28      	ldr	r3, [pc, #160]	; (edc <prefix_print+0x108>)
     e3c:	f017 0f10 	tst.w	r7, #16
     e40:	4f27      	ldr	r7, [pc, #156]	; (ee0 <prefix_print+0x10c>)
     e42:	bf18      	it	ne
     e44:	461f      	movne	r7, r3
     e46:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
     e4a:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
     e4e:	f7ff fd33 	bl	8b8 <log_source_name_get>
     e52:	4639      	mov	r1, r7
     e54:	4602      	mov	r2, r0
     e56:	4630      	mov	r0, r6
     e58:	f7ff ffaa 	bl	db0 <print_formatted>
     e5c:	4428      	add	r0, r5
		length += ids_print(log_output, level_on, func_on,
				    domain_id, source_id, level);
	}

	return length;
}
     e5e:	4420      	add	r0, r4
     e60:	b005      	add	sp, #20
     e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
     e66:	4a1f      	ldr	r2, [pc, #124]	; (ee4 <prefix_print+0x110>)
     e68:	6811      	ldr	r1, [r2, #0]
     e6a:	b331      	cbz	r1, eba <prefix_print+0xe6>
		timestamp /= timestamp_div;
     e6c:	4a1e      	ldr	r2, [pc, #120]	; (ee8 <prefix_print+0x114>)
     e6e:	f44f 6e61 	mov.w	lr, #3600	; 0xe10
     e72:	6814      	ldr	r4, [r2, #0]
     e74:	fbb3 f3f4 	udiv	r3, r3, r4
		ms = (remainder * 1000U) / freq;
     e78:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
		seconds = timestamp / freq;
     e7c:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
     e80:	fbb4 f2fe 	udiv	r2, r4, lr
     e84:	fb0e 4e12 	mls	lr, lr, r2, r4
		remainder = timestamp % freq;
     e88:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
     e8c:	fb0c f404 	mul.w	r4, ip, r4
		mins = seconds / 60U;
     e90:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
     e94:	fbb4 fbf1 	udiv	fp, r4, r1
     e98:	fb01 441b 	mls	r4, r1, fp, r4
		mins = seconds / 60U;
     e9c:	fbbe f3fa 	udiv	r3, lr, sl
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
     ea0:	fb0c f404 	mul.w	r4, ip, r4
     ea4:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
     ea8:	e9cd b101 	strd	fp, r1, [sp, #4]
     eac:	fb0a e113 	mls	r1, sl, r3, lr
     eb0:	9100      	str	r1, [sp, #0]
     eb2:	490e      	ldr	r1, [pc, #56]	; (eec <prefix_print+0x118>)
     eb4:	f7ff ff7c 	bl	db0 <print_formatted>
     eb8:	e7a1      	b.n	dfe <prefix_print+0x2a>
		length = 0;
     eba:	4608      	mov	r0, r1
     ebc:	e79f      	b.n	dfe <prefix_print+0x2a>
	total += print_formatted(log_output,
     ebe:	4f08      	ldr	r7, [pc, #32]	; (ee0 <prefix_print+0x10c>)
     ec0:	e7c1      	b.n	e46 <prefix_print+0x72>
     ec2:	bf00      	nop
     ec4:	00005d2e 	.word	0x00005d2e
     ec8:	00005940 	.word	0x00005940
     ecc:	0000621c 	.word	0x0000621c
     ed0:	00005d20 	.word	0x00005d20
     ed4:	00005954 	.word	0x00005954
     ed8:	00005d53 	.word	0x00005d53
     edc:	00005d2a 	.word	0x00005d2a
     ee0:	00005d25 	.word	0x00005d25
     ee4:	20000268 	.word	0x20000268
     ee8:	2000026c 	.word	0x2000026c
     eec:	00005d37 	.word	0x00005d37

00000ef0 <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  u32_t flags, u8_t level)
{
     ef0:	b538      	push	{r3, r4, r5, lr}
     ef2:	460c      	mov	r4, r1
	if (color) {
     ef4:	07e1      	lsls	r1, r4, #31
{
     ef6:	4605      	mov	r5, r0
	if (color) {
     ef8:	d503      	bpl.n	f02 <postfix_print+0x12>
		print_formatted(log_output, "%s", color);
     efa:	4a08      	ldr	r2, [pc, #32]	; (f1c <postfix_print+0x2c>)
     efc:	4908      	ldr	r1, [pc, #32]	; (f20 <postfix_print+0x30>)
     efe:	f7ff ff57 	bl	db0 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
     f02:	06e2      	lsls	r2, r4, #27
     f04:	d408      	bmi.n	f18 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
     f06:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
     f08:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
     f0a:	bf4c      	ite	mi
     f0c:	4905      	ldrmi	r1, [pc, #20]	; (f24 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
     f0e:	4906      	ldrpl	r1, [pc, #24]	; (f28 <postfix_print+0x38>)
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
     f10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
     f14:	f7ff bf4c 	b.w	db0 <print_formatted>
}
     f18:	bd38      	pop	{r3, r4, r5, pc}
     f1a:	bf00      	nop
     f1c:	00005d20 	.word	0x00005d20
     f20:	0000621c 	.word	0x0000621c
     f24:	00005d12 	.word	0x00005d12
     f28:	00005d11 	.word	0x00005d11

00000f2c <hexdump_line_print>:
{
     f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     f30:	4698      	mov	r8, r3
     f32:	9b08      	ldr	r3, [sp, #32]
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
     f34:	06dd      	lsls	r5, r3, #27
{
     f36:	4604      	mov	r4, r0
     f38:	460e      	mov	r6, r1
     f3a:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
     f3c:	d405      	bmi.n	f4a <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
     f3e:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
     f40:	bf4c      	ite	mi
     f42:	4929      	ldrmi	r1, [pc, #164]	; (fe8 <hexdump_line_print+0xbc>)
		print_formatted(ctx, "\r\n");
     f44:	4929      	ldrpl	r1, [pc, #164]	; (fec <hexdump_line_print+0xc0>)
     f46:	f7ff ff33 	bl	db0 <print_formatted>
		print_formatted(log_output, " ");
     f4a:	f8df 90a8 	ldr.w	r9, [pc, #168]	; ff4 <hexdump_line_print+0xc8>
{
     f4e:	2500      	movs	r5, #0
	for (int i = 0; i < prefix_offset; i++) {
     f50:	4545      	cmp	r5, r8
     f52:	db2a      	blt.n	faa <hexdump_line_print+0x7e>
			print_formatted(log_output, "   ");
     f54:	f8df 80a0 	ldr.w	r8, [pc, #160]	; ff8 <hexdump_line_print+0xcc>
			print_formatted(log_output, "%02x ", data[i]);
     f58:	f8df 90a0 	ldr.w	r9, [pc, #160]	; ffc <hexdump_line_print+0xd0>
			print_formatted(log_output, " ");
     f5c:	f8df a094 	ldr.w	sl, [pc, #148]	; ff4 <hexdump_line_print+0xc8>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
     f60:	2500      	movs	r5, #0
		if (i < length) {
     f62:	42af      	cmp	r7, r5
     f64:	d92e      	bls.n	fc4 <hexdump_line_print+0x98>
			print_formatted(log_output, "%02x ", data[i]);
     f66:	5d72      	ldrb	r2, [r6, r5]
     f68:	4649      	mov	r1, r9
     f6a:	4620      	mov	r0, r4
     f6c:	f7ff ff20 	bl	db0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
     f70:	3501      	adds	r5, #1
     f72:	2d10      	cmp	r5, #16
     f74:	d11f      	bne.n	fb6 <hexdump_line_print+0x8a>
	print_formatted(log_output, "|");
     f76:	491e      	ldr	r1, [pc, #120]	; (ff0 <hexdump_line_print+0xc4>)
			print_formatted(log_output, " ");
     f78:	f8df 8078 	ldr.w	r8, [pc, #120]	; ff4 <hexdump_line_print+0xc8>
			print_formatted(log_output, "%c",
     f7c:	f8df 9080 	ldr.w	r9, [pc, #128]	; 1000 <hexdump_line_print+0xd4>
	print_formatted(log_output, "|");
     f80:	4620      	mov	r0, r4
     f82:	f7ff ff15 	bl	db0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
     f86:	2500      	movs	r5, #0
		if (i < length) {
     f88:	42af      	cmp	r7, r5
     f8a:	d927      	bls.n	fdc <hexdump_line_print+0xb0>
			      isprint((int)c) ? c : '.');
     f8c:	5d72      	ldrb	r2, [r6, r5]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
     f8e:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(log_output, "%c",
     f92:	2b5f      	cmp	r3, #95	; 0x5f
     f94:	bf28      	it	cs
     f96:	222e      	movcs	r2, #46	; 0x2e
     f98:	4649      	mov	r1, r9
     f9a:	4620      	mov	r0, r4
     f9c:	f7ff ff08 	bl	db0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
     fa0:	3501      	adds	r5, #1
     fa2:	2d10      	cmp	r5, #16
     fa4:	d113      	bne.n	fce <hexdump_line_print+0xa2>
}
     fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
     faa:	4649      	mov	r1, r9
     fac:	4620      	mov	r0, r4
     fae:	f7ff feff 	bl	db0 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
     fb2:	3501      	adds	r5, #1
     fb4:	e7cc      	b.n	f50 <hexdump_line_print+0x24>
		if (i > 0 && !(i % 8)) {
     fb6:	076a      	lsls	r2, r5, #29
     fb8:	d1d3      	bne.n	f62 <hexdump_line_print+0x36>
			print_formatted(log_output, " ");
     fba:	4651      	mov	r1, sl
     fbc:	4620      	mov	r0, r4
     fbe:	f7ff fef7 	bl	db0 <print_formatted>
     fc2:	e7ce      	b.n	f62 <hexdump_line_print+0x36>
			print_formatted(log_output, "   ");
     fc4:	4641      	mov	r1, r8
     fc6:	4620      	mov	r0, r4
     fc8:	f7ff fef2 	bl	db0 <print_formatted>
     fcc:	e7d0      	b.n	f70 <hexdump_line_print+0x44>
		if (i > 0 && !(i % 8)) {
     fce:	076b      	lsls	r3, r5, #29
     fd0:	d1da      	bne.n	f88 <hexdump_line_print+0x5c>
			print_formatted(log_output, " ");
     fd2:	4641      	mov	r1, r8
     fd4:	4620      	mov	r0, r4
     fd6:	f7ff feeb 	bl	db0 <print_formatted>
     fda:	e7d5      	b.n	f88 <hexdump_line_print+0x5c>
			print_formatted(log_output, " ");
     fdc:	4641      	mov	r1, r8
     fde:	4620      	mov	r0, r4
     fe0:	f7ff fee6 	bl	db0 <print_formatted>
     fe4:	e7dc      	b.n	fa0 <hexdump_line_print+0x74>
     fe6:	bf00      	nop
     fe8:	00005d12 	.word	0x00005d12
     fec:	00005d11 	.word	0x00005d11
     ff0:	00005cee 	.word	0x00005cee
     ff4:	00005cec 	.word	0x00005cec
     ff8:	00005cea 	.word	0x00005cea
     ffc:	00005ce4 	.word	0x00005ce4
    1000:	00005cf0 	.word	0x00005cf0

00001004 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    u32_t flags)
{
    1004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
    1008:	7a8b      	ldrb	r3, [r1, #10]
		log_output_msg_syst_process(log_output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    100a:	f013 0407 	ands.w	r4, r3, #7
{
    100e:	4617      	mov	r7, r2
    1010:	b08a      	sub	sp, #40	; 0x28
    1012:	4605      	mov	r5, r0
    1014:	460e      	mov	r6, r1
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    1016:	7a0a      	ldrb	r2, [r1, #8]
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    1018:	d01c      	beq.n	1054 <log_output_msg_process+0x50>
	return msg->hdr.ids.source_id;
    101a:	8949      	ldrh	r1, [r1, #10]
    101c:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    1020:	0989      	lsrs	r1, r1, #6
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    1022:	43d2      	mvns	r2, r2
    1024:	9102      	str	r1, [sp, #8]
    1026:	e9cd 4300 	strd	r4, r3, [sp]
    102a:	f002 0201 	and.w	r2, r2, #1
    102e:	68f3      	ldr	r3, [r6, #12]
    1030:	4639      	mov	r1, r7
    1032:	f7ff fecf 	bl	dd4 <prefix_print>
    1036:	4681      	mov	r9, r0
    1038:	7a33      	ldrb	r3, [r6, #8]
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    103a:	07da      	lsls	r2, r3, #31
    103c:	d40c      	bmi.n	1058 <log_output_msg_process+0x54>
		std_print(msg, log_output);
    103e:	4629      	mov	r1, r5
    1040:	4630      	mov	r0, r6
    1042:	f003 fcf1 	bl	4a28 <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
    1046:	b34c      	cbz	r4, 109c <log_output_msg_process+0x98>
		postfix_print(log_output, flags, level);
    1048:	4622      	mov	r2, r4
    104a:	4639      	mov	r1, r7
    104c:	4628      	mov	r0, r5
    104e:	f7ff ff4f 	bl	ef0 <postfix_print>
    1052:	e023      	b.n	109c <log_output_msg_process+0x98>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    1054:	46a1      	mov	r9, r4
    1056:	e7ef      	b.n	1038 <log_output_msg_process+0x34>
	} else if (raw_string) {
    1058:	bb34      	cbnz	r4, 10a8 <log_output_msg_process+0xa4>
	size_t offset = 0;
    105a:	4627      	mov	r7, r4
		length = log_output->size;
    105c:	68eb      	ldr	r3, [r5, #12]
    105e:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    1060:	aa06      	add	r2, sp, #24
    1062:	463b      	mov	r3, r7
    1064:	68a9      	ldr	r1, [r5, #8]
    1066:	4630      	mov	r0, r6
    1068:	f003 fcca 	bl	4a00 <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
    106c:	9a06      	ldr	r2, [sp, #24]
    106e:	686b      	ldr	r3, [r5, #4]
    1070:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    1072:	b13a      	cbz	r2, 1084 <log_output_msg_process+0x80>
			eol = (log_output->buf[length - 1] == '\n');
    1074:	68ab      	ldr	r3, [r5, #8]
    1076:	4413      	add	r3, r2
    1078:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    107c:	f1a4 030a 	sub.w	r3, r4, #10
    1080:	425c      	negs	r4, r3
    1082:	415c      	adcs	r4, r3
		log_output_flush(log_output);
    1084:	4628      	mov	r0, r5
    1086:	f003 fe2c 	bl	4ce2 <log_output_flush>
		offset += length;
    108a:	9b06      	ldr	r3, [sp, #24]
    108c:	441f      	add	r7, r3
	} while (length > 0);
    108e:	2b00      	cmp	r3, #0
    1090:	d1e4      	bne.n	105c <log_output_msg_process+0x58>
	if (eol) {
    1092:	b11c      	cbz	r4, 109c <log_output_msg_process+0x98>
		print_formatted(log_output, "\r");
    1094:	4914      	ldr	r1, [pc, #80]	; (10e8 <log_output_msg_process+0xe4>)
    1096:	4628      	mov	r0, r5
    1098:	f7ff fe8a 	bl	db0 <print_formatted>
	}

	log_output_flush(log_output);
    109c:	4628      	mov	r0, r5
    109e:	f003 fe20 	bl	4ce2 <log_output_flush>
}
    10a2:	b00a      	add	sp, #40	; 0x28
    10a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(log_output, "%s", log_msg_str_get(msg));
    10a8:	4630      	mov	r0, r6
    10aa:	f003 fc53 	bl	4954 <log_msg_str_get>
    10ae:	490f      	ldr	r1, [pc, #60]	; (10ec <log_output_msg_process+0xe8>)
    10b0:	4602      	mov	r2, r0
    10b2:	4628      	mov	r0, r5
    10b4:	f7ff fe7c 	bl	db0 <print_formatted>
	u32_t offset = 0U;
    10b8:	f04f 0800 	mov.w	r8, #0
		length = sizeof(buf);
    10bc:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    10c0:	aa05      	add	r2, sp, #20
    10c2:	4643      	mov	r3, r8
    10c4:	a906      	add	r1, sp, #24
    10c6:	4630      	mov	r0, r6
		length = sizeof(buf);
    10c8:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    10cc:	f003 fc98 	bl	4a00 <log_msg_hexdump_data_get>
		if (length) {
    10d0:	9a05      	ldr	r2, [sp, #20]
    10d2:	2a00      	cmp	r2, #0
    10d4:	d0b8      	beq.n	1048 <log_output_msg_process+0x44>
			hexdump_line_print(log_output, buf, length,
    10d6:	464b      	mov	r3, r9
    10d8:	9700      	str	r7, [sp, #0]
    10da:	a906      	add	r1, sp, #24
    10dc:	4628      	mov	r0, r5
    10de:	f7ff ff25 	bl	f2c <hexdump_line_print>
			offset += length;
    10e2:	9b05      	ldr	r3, [sp, #20]
    10e4:	4498      	add	r8, r3
    10e6:	e7eb      	b.n	10c0 <log_output_msg_process+0xbc>
    10e8:	00005cf3 	.word	0x00005cf3
    10ec:	0000621c 	.word	0x0000621c

000010f0 <log_output_dropped_process>:
	postfix_print(log_output, flags, level);
	log_output_flush(log_output);
}

void log_output_dropped_process(const struct log_output *log_output, u32_t cnt)
{
    10f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;
	struct device *dev = (struct device *)log_output->control_block->ctx;
    10f2:	e9d0 4300 	ldrd	r4, r3, [r0]
    10f6:	685d      	ldr	r5, [r3, #4]

	cnt = MIN(cnt, 9999);
	len = snprintf(buf, sizeof(buf), "%d", cnt);
    10f8:	4a0f      	ldr	r2, [pc, #60]	; (1138 <log_output_dropped_process+0x48>)
    10fa:	f242 730f 	movw	r3, #9999	; 0x270f
    10fe:	428b      	cmp	r3, r1
    1100:	bf28      	it	cs
    1102:	460b      	movcs	r3, r1
    1104:	4668      	mov	r0, sp
    1106:	2105      	movs	r1, #5
    1108:	f001 fb94 	bl	2834 <snprintf>

	buffer_write(outf, (u8_t *)prefix, sizeof(prefix) - 1, dev);
    110c:	462b      	mov	r3, r5
	len = snprintf(buf, sizeof(buf), "%d", cnt);
    110e:	4606      	mov	r6, r0
	buffer_write(outf, (u8_t *)prefix, sizeof(prefix) - 1, dev);
    1110:	220b      	movs	r2, #11
    1112:	4620      	mov	r0, r4
    1114:	4909      	ldr	r1, [pc, #36]	; (113c <log_output_dropped_process+0x4c>)
    1116:	f003 fc7a 	bl	4a0e <buffer_write>
	buffer_write(outf, buf, len, dev);
    111a:	462b      	mov	r3, r5
    111c:	4632      	mov	r2, r6
    111e:	4669      	mov	r1, sp
    1120:	4620      	mov	r0, r4
    1122:	f003 fc74 	bl	4a0e <buffer_write>
	buffer_write(outf, (u8_t *)postfix, sizeof(postfix) - 1, dev);
    1126:	462b      	mov	r3, r5
    1128:	221b      	movs	r2, #27
    112a:	4905      	ldr	r1, [pc, #20]	; (1140 <log_output_dropped_process+0x50>)
    112c:	4620      	mov	r0, r4
    112e:	f003 fc6e 	bl	4a0e <buffer_write>
}
    1132:	b002      	add	sp, #8
    1134:	bd70      	pop	{r4, r5, r6, pc}
    1136:	bf00      	nop
    1138:	00006366 	.word	0x00006366
    113c:	00005d14 	.word	0x00005d14
    1140:	00005cf5 	.word	0x00005cf5

00001144 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(u32_t frequency)
{
	timestamp_div = 1U;
    1144:	4a08      	ldr	r2, [pc, #32]	; (1168 <log_output_timestamp_freq_set+0x24>)
{
    1146:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    1148:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    114a:	4c08      	ldr	r4, [pc, #32]	; (116c <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    114c:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    114e:	2100      	movs	r1, #0
    1150:	42a0      	cmp	r0, r4
    1152:	d804      	bhi.n	115e <log_output_timestamp_freq_set+0x1a>
    1154:	b101      	cbz	r1, 1158 <log_output_timestamp_freq_set+0x14>
    1156:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    1158:	4b05      	ldr	r3, [pc, #20]	; (1170 <log_output_timestamp_freq_set+0x2c>)
    115a:	6018      	str	r0, [r3, #0]
}
    115c:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    115e:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    1160:	005b      	lsls	r3, r3, #1
    1162:	2101      	movs	r1, #1
    1164:	e7f4      	b.n	1150 <log_output_timestamp_freq_set+0xc>
    1166:	bf00      	nop
    1168:	2000026c 	.word	0x2000026c
    116c:	000f4240 	.word	0x000f4240
    1170:	20000268 	.word	0x20000268

00001174 <panic>:
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
    1174:	4801      	ldr	r0, [pc, #4]	; (117c <panic+0x8>)
    1176:	f003 bdb4 	b.w	4ce2 <log_output_flush>
    117a:	bf00      	nop
    117c:	00005980 	.word	0x00005980

00001180 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const log_output, u32_t cnt)
{
	log_output_dropped_process(log_output, cnt);
    1180:	4801      	ldr	r0, [pc, #4]	; (1188 <dropped+0x8>)
    1182:	f7ff bfb5 	b.w	10f0 <log_output_dropped_process>
    1186:	bf00      	nop
    1188:	00005980 	.word	0x00005980

0000118c <log_backend_uart_init>:

	log_backend_std_put(&log_output, flag, msg);
}

static void log_backend_uart_init(void)
{
    118c:	b508      	push	{r3, lr}
    118e:	4803      	ldr	r0, [pc, #12]	; (119c <log_backend_uart_init+0x10>)
    1190:	f002 f982 	bl	3498 <z_impl_device_get_binding>
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *log_output,
				      void *ctx)
{
	log_output->control_block->ctx = ctx;
    1194:	4b02      	ldr	r3, [pc, #8]	; (11a0 <log_backend_uart_init+0x14>)
    1196:	6058      	str	r0, [r3, #4]

	dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
	assert(dev);

	log_output_ctx_set(&log_output, dev);
}
    1198:	bd08      	pop	{r3, pc}
    119a:	bf00      	nop
    119c:	00005d79 	.word	0x00005d79
    11a0:	20000278 	.word	0x20000278

000011a4 <put>:
{
    11a4:	b510      	push	{r4, lr}
	log_msg_get(msg);
    11a6:	4608      	mov	r0, r1
    11a8:	460c      	mov	r4, r1
    11aa:	f003 fb93 	bl	48d4 <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
    11ae:	4621      	mov	r1, r4
    11b0:	4804      	ldr	r0, [pc, #16]	; (11c4 <put+0x20>)
    11b2:	220f      	movs	r2, #15
    11b4:	f7ff ff26 	bl	1004 <log_output_msg_process>
	log_msg_put(msg);
    11b8:	4620      	mov	r0, r4
}
    11ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    11be:	f003 bbb6 	b.w	492e <log_msg_put>
    11c2:	bf00      	nop
    11c4:	00005980 	.word	0x00005980

000011c8 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    11c8:	280a      	cmp	r0, #10
{
    11ca:	b538      	push	{r3, r4, r5, lr}
    11cc:	4604      	mov	r4, r0
    11ce:	4d07      	ldr	r5, [pc, #28]	; (11ec <console_out+0x24>)
	if ('\n' == c) {
    11d0:	d104      	bne.n	11dc <console_out+0x14>
    11d2:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
    11d4:	6843      	ldr	r3, [r0, #4]
    11d6:	210d      	movs	r1, #13
    11d8:	685b      	ldr	r3, [r3, #4]
    11da:	4798      	blx	r3
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    11dc:	6828      	ldr	r0, [r5, #0]
    11de:	6843      	ldr	r3, [r0, #4]
    11e0:	b2e1      	uxtb	r1, r4
    11e2:	685b      	ldr	r3, [r3, #4]
    11e4:	4798      	blx	r3

	return c;
}
    11e6:	4620      	mov	r0, r4
    11e8:	bd38      	pop	{r3, r4, r5, pc}
    11ea:	bf00      	nop
    11ec:	20000284 	.word	0x20000284

000011f0 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
    11f0:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
    11f2:	4c04      	ldr	r4, [pc, #16]	; (1204 <uart_console_hook_install+0x14>)
    11f4:	4620      	mov	r0, r4
    11f6:	f001 fb17 	bl	2828 <__stdout_hook_install>
	__printk_hook_install(console_out);
    11fa:	4620      	mov	r0, r4
}
    11fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__printk_hook_install(console_out);
    1200:	f7ff bac0 	b.w	784 <__printk_hook_install>
    1204:	000011c9 	.word	0x000011c9

00001208 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    1208:	b508      	push	{r3, lr}
    120a:	4804      	ldr	r0, [pc, #16]	; (121c <uart_console_init+0x14>)
    120c:	f002 f944 	bl	3498 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    1210:	4b03      	ldr	r3, [pc, #12]	; (1220 <uart_console_init+0x18>)
    1212:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    1214:	f7ff ffec 	bl	11f0 <uart_console_hook_install>

	return 0;
}
    1218:	2000      	movs	r0, #0
    121a:	bd08      	pop	{r3, pc}
    121c:	00005d79 	.word	0x00005d79
    1220:	20000284 	.word	0x20000284

00001224 <nrf_power_clock_isr>:
#endif
}

NRF_STATIC_INLINE bool nrf_clock_event_check(NRF_CLOCK_Type const * p_reg, nrf_clock_event_t event)
{
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    1224:	4b15      	ldr	r3, [pc, #84]	; (127c <nrf_power_clock_isr+0x58>)
	}
#endif
}

void nrf_power_clock_isr(void *arg)
{
    1226:	b507      	push	{r0, r1, r2, lr}
    1228:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    122a:	b182      	cbz	r2, 124e <nrf_power_clock_isr+0x2a>
    return p_reg->INTENSET & mask;
    122c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1230:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    1234:	07d1      	lsls	r1, r2, #31
    1236:	d50a      	bpl.n	124e <nrf_power_clock_isr+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1238:	2200      	movs	r2, #0
    123a:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    123c:	681b      	ldr	r3, [r3, #0]
	ARG_UNUSED(arg);

	if (clock_event_check_and_clean(NRF_CLOCK_EVENT_HFCLKSTARTED,
					NRF_CLOCK_INT_HF_STARTED_MASK)) {
		struct device *hfclk_dev = DEVICE_GET(clock_nrf5_m16src);
		struct nrf_clock_control *data = hfclk_dev->driver_data;
    123e:	4810      	ldr	r0, [pc, #64]	; (1280 <nrf_power_clock_isr+0x5c>)
    1240:	9300      	str	r3, [sp, #0]
    (void)dummy;
    1242:	9b00      	ldr	r3, [sp, #0]

		/* Check needed due to anomaly 201:
		 * HFCLKSTARTED may be generated twice.
		 */
		if (!data->started) {
    1244:	6883      	ldr	r3, [r0, #8]
    1246:	7a5b      	ldrb	r3, [r3, #9]
    1248:	b90b      	cbnz	r3, 124e <nrf_power_clock_isr+0x2a>
			clkstarted_handle(hfclk_dev);
    124a:	f003 fd87 	bl	4d5c <clkstarted_handle>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    124e:	4b0d      	ldr	r3, [pc, #52]	; (1284 <nrf_power_clock_isr+0x60>)
    1250:	681a      	ldr	r2, [r3, #0]
	bool ret = nrf_clock_event_check(NRF_CLOCK, evt) &&
    1252:	b182      	cbz	r2, 1276 <nrf_power_clock_isr+0x52>
    return p_reg->INTENSET & mask;
    1254:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1258:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
	if (ret) {
    125c:	0792      	lsls	r2, r2, #30
    125e:	d50a      	bpl.n	1276 <nrf_power_clock_isr+0x52>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1260:	2200      	movs	r2, #0
    1262:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    1264:	681b      	ldr	r3, [r3, #0]
    1266:	9301      	str	r3, [sp, #4]
    (void)dummy;
    1268:	9b01      	ldr	r3, [sp, #4]

		if (IS_ENABLED(
			CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
			z_nrf_clock_calibration_lfclk_started(lfclk_dev);
		}
		clkstarted_handle(lfclk_dev);
    126a:	4807      	ldr	r0, [pc, #28]	; (1288 <nrf_power_clock_isr+0x64>)
	usb_power_isr();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_K32SRC_RC_CALIBRATION)) {
		z_nrf_clock_calibration_isr();
	}
}
    126c:	b003      	add	sp, #12
    126e:	f85d eb04 	ldr.w	lr, [sp], #4
		clkstarted_handle(lfclk_dev);
    1272:	f003 bd73 	b.w	4d5c <clkstarted_handle>
}
    1276:	b003      	add	sp, #12
    1278:	f85d fb04 	ldr.w	pc, [sp], #4
    127c:	40000100 	.word	0x40000100
    1280:	20002564 	.word	0x20002564
    1284:	40000104 	.word	0x40000104
    1288:	20002570 	.word	0x20002570

0000128c <rtc1_nrf_isr>:
 * symbol.
 */
void rtc1_nrf_isr(void *arg)
{
	ARG_UNUSED(arg);
	RTC->EVENTS_COMPARE[0] = 0;
    128c:	4b0d      	ldr	r3, [pc, #52]	; (12c4 <rtc1_nrf_isr+0x38>)
    128e:	2200      	movs	r2, #0
    1290:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	__asm__ volatile(
    1294:	f04f 0220 	mov.w	r2, #32
    1298:	f3ef 8111 	mrs	r1, BASEPRI
    129c:	f382 8811 	msr	BASEPRI, r2
    12a0:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t t = counter();
	u32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    12a4:	4a08      	ldr	r2, [pc, #32]	; (12c8 <rtc1_nrf_isr+0x3c>)
#endif
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    12a6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
    12aa:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    12ac:	1ac0      	subs	r0, r0, r3
    12ae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    12b2:	4403      	add	r3, r0
    12b4:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    12b6:	f381 8811 	msr	BASEPRI, r1
    12ba:	f3bf 8f6f 	isb	sy
		}
		set_comparator(next);
	}

	k_spin_unlock(&lock, key);
	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : 1);
    12be:	f002 bf41 	b.w	4144 <z_clock_announce>
    12c2:	bf00      	nop
    12c4:	40011000 	.word	0x40011000
    12c8:	200002a0 	.word	0x200002a0

000012cc <z_clock_driver_init>:
}

int z_clock_driver_init(struct device *device)
{
    12cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    12ce:	481c      	ldr	r0, [pc, #112]	; (1340 <z_clock_driver_init+0x74>)
    12d0:	f002 f8e2 	bl	3498 <z_impl_device_get_binding>
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(DT_INST_0_NORDIC_NRF_CLOCK_LABEL "_32K");
	if (!clock) {
    12d4:	b380      	cbz	r0, 1338 <z_clock_driver_init+0x6c>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
    12d6:	6843      	ldr	r3, [r0, #4]
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    12d8:	4d1a      	ldr	r5, [pc, #104]	; (1344 <z_clock_driver_init+0x78>)
    12da:	681b      	ldr	r3, [r3, #0]
    12dc:	2100      	movs	r1, #0
    12de:	4798      	blx	r3
    p_reg->CC[ch] = cc_val;
    12e0:	2601      	movs	r6, #1
    p_reg->PRESCALER = val;
    12e2:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
    12e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
    12e8:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->CC[ch] = cc_val;
    12ec:	f8c5 6540 	str.w	r6, [r5, #1344]	; 0x540
    p_reg->INTENSET = mask;
    12f0:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    12f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    12f8:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    12fc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1300:	601c      	str	r4, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    1302:	681b      	ldr	r3, [r3, #0]
    1304:	9301      	str	r3, [sp, #4]
    (void)dummy;
    1306:	9b01      	ldr	r3, [sp, #4]
    1308:	4b0f      	ldr	r3, [pc, #60]	; (1348 <z_clock_driver_init+0x7c>)

	/* Clear the event flag and possible pending interrupt */
	nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_COMPARE_0);
	NVIC_ClearPendingIRQ(RTC1_IRQn);

	IRQ_CONNECT(RTC1_IRQn, 1, rtc1_nrf_isr, 0, 0);
    130a:	4631      	mov	r1, r6
    130c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    1310:	2011      	movs	r0, #17
    1312:	4622      	mov	r2, r4
    1314:	f000 f918 	bl	1548 <z_arm_irq_priority_set>
	irq_enable(RTC1_IRQn);
    1318:	2011      	movs	r0, #17
    131a:	f000 f905 	bl	1528 <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    131e:	4b0b      	ldr	r3, [pc, #44]	; (134c <z_clock_driver_init+0x80>)
    1320:	601e      	str	r6, [r3, #0]
    1322:	602e      	str	r6, [r5, #0]
     return p_reg->COUNTER;
    1324:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	if (!IS_ENABLED(TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
    1328:	4433      	add	r3, r6
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    132a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    132e:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	}

	return 0;
    1332:	4620      	mov	r0, r4
}
    1334:	b002      	add	sp, #8
    1336:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    1338:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    133c:	e7fa      	b.n	1334 <z_clock_driver_init+0x68>
    133e:	bf00      	nop
    1340:	00005d97 	.word	0x00005d97
    1344:	40011000 	.word	0x40011000
    1348:	e000e100 	.word	0xe000e100
    134c:	40011008 	.word	0x40011008

00001350 <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
    1350:	b5f0      	push	{r4, r5, r6, r7, lr}
	ARG_UNUSED(idle);

#ifdef CONFIG_TICKLESS_KERNEL
	ticks = (ticks == K_FOREVER) ? MAX_TICKS : ticks;
    1352:	4e25      	ldr	r6, [pc, #148]	; (13e8 <z_clock_set_timeout+0x98>)
    1354:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    1358:	bf08      	it	eq
    135a:	4630      	moveq	r0, r6
	__asm__ volatile(
    135c:	f04f 0320 	mov.w	r3, #32
    1360:	f3ef 8511 	mrs	r5, BASEPRI
    1364:	f383 8811 	msr	BASEPRI, r3
    1368:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    136c:	491f      	ldr	r1, [pc, #124]	; (13ec <z_clock_set_timeout+0x9c>)
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc, dt, t = counter();
	u32_t unannounced = counter_sub(t, last_count);
    136e:	4b20      	ldr	r3, [pc, #128]	; (13f0 <z_clock_set_timeout+0xa0>)
    1370:	f8d1 4504 	ldr.w	r4, [r1, #1284]	; 0x504
    1374:	681b      	ldr	r3, [r3, #0]
	return (a - b) & COUNTER_MAX;
    1376:	1ae2      	subs	r2, r4, r3
    1378:	f022 477f 	bic.w	r7, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    137c:	0212      	lsls	r2, r2, #8
    137e:	d419      	bmi.n	13b4 <z_clock_set_timeout+0x64>
	ticks = MAX(MIN(ticks - 1, (s32_t)MAX_TICKS), 0);
    1380:	1e42      	subs	r2, r0, #1
    1382:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    1386:	42b2      	cmp	r2, r6
    1388:	bfa8      	it	ge
    138a:	4632      	movge	r2, r6
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    138c:	1c78      	adds	r0, r7, #1
    138e:	4410      	add	r0, r2
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
    1390:	42b0      	cmp	r0, r6
    1392:	bf94      	ite	ls
    1394:	1818      	addls	r0, r3, r0
    1396:	1998      	addhi	r0, r3, r6
	return (a - b) & COUNTER_MAX;
    1398:	1b04      	subs	r4, r0, r4
    139a:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    139e:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
	 * least on nRF52.  Some experimentation on nrf52840 shows
	 * that you need to be early by about 400 processor cycles
	 * (about 1/5th of a RTC cycle) in order to reliably get the
	 * interrupt.  The docs say two cycles, they mean two cycles.
	 */
	if (counter_sub(cyc, t) > 2) {
    13a2:	2c02      	cmp	r4, #2
    p_reg->CC[ch] = cc_val;
    13a4:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
    13a8:	d906      	bls.n	13b8 <z_clock_set_timeout+0x68>
	__asm__ volatile(
    13aa:	f385 8811 	msr	BASEPRI, r5
    13ae:	f3bf 8f6f 	isb	sy
	}
#endif

	k_spin_unlock(&lock, key);
#endif /* CONFIG_TICKLESS_KERNEL */
}
    13b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ticks = 0;
    13b4:	2200      	movs	r2, #0
    13b6:	e7e9      	b.n	138c <z_clock_set_timeout+0x3c>
     return p_reg->COUNTER;
    13b8:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
		if (dt == 0 || dt > 0x7fffff) {
    13bc:	4a0d      	ldr	r2, [pc, #52]	; (13f4 <z_clock_set_timeout+0xa4>)
	return (a - b) & COUNTER_MAX;
    13be:	1ac3      	subs	r3, r0, r3
    13c0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		if (dt == 0 || dt > 0x7fffff) {
    13c4:	1e5c      	subs	r4, r3, #1
    13c6:	4294      	cmp	r4, r2
    13c8:	d905      	bls.n	13d6 <z_clock_set_timeout+0x86>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    13ca:	4b0b      	ldr	r3, [pc, #44]	; (13f8 <z_clock_set_timeout+0xa8>)
    13cc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    13d0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    13d4:	e7e9      	b.n	13aa <z_clock_set_timeout+0x5a>
		} else if (dt == 1) {
    13d6:	2b01      	cmp	r3, #1
			set_comparator(cyc + 2);
    13d8:	bf02      	ittt	eq
    13da:	3002      	addeq	r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    13dc:	f020 407f 	biceq.w	r0, r0, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    13e0:	f8c1 0540 	streq.w	r0, [r1, #1344]	; 0x540
    13e4:	e7e1      	b.n	13aa <z_clock_set_timeout+0x5a>
    13e6:	bf00      	nop
    13e8:	00fffffe 	.word	0x00fffffe
    13ec:	40011000 	.word	0x40011000
    13f0:	200002a0 	.word	0x200002a0
    13f4:	007ffffe 	.word	0x007ffffe
    13f8:	e000e100 	.word	0xe000e100

000013fc <z_clock_elapsed>:
	__asm__ volatile(
    13fc:	f04f 0220 	mov.w	r2, #32
    1400:	f3ef 8311 	mrs	r3, BASEPRI
    1404:	f382 8811 	msr	BASEPRI, r2
    1408:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    140c:	4a06      	ldr	r2, [pc, #24]	; (1428 <z_clock_elapsed+0x2c>)
    140e:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    1412:	4a06      	ldr	r2, [pc, #24]	; (142c <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    1414:	6812      	ldr	r2, [r2, #0]
    1416:	1a80      	subs	r0, r0, r2
    1418:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    141c:	f383 8811 	msr	BASEPRI, r3
    1420:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    1424:	4770      	bx	lr
    1426:	bf00      	nop
    1428:	40011000 	.word	0x40011000
    142c:	200002a0 	.word	0x200002a0

00001430 <z_timer_cycle_get_32>:
	__asm__ volatile(
    1430:	f04f 0320 	mov.w	r3, #32
    1434:	f3ef 8211 	mrs	r2, BASEPRI
    1438:	f383 8811 	msr	BASEPRI, r3
    143c:	f3bf 8f6f 	isb	sy

u32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = counter_sub(counter(), last_count) + last_count;
    1440:	4906      	ldr	r1, [pc, #24]	; (145c <z_timer_cycle_get_32+0x2c>)
    1442:	4b07      	ldr	r3, [pc, #28]	; (1460 <z_timer_cycle_get_32+0x30>)
    1444:	6808      	ldr	r0, [r1, #0]
    1446:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    144a:	f382 8811 	msr	BASEPRI, r2
    144e:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    1452:	1a1b      	subs	r3, r3, r0
    1454:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    1458:	4418      	add	r0, r3
    145a:	4770      	bx	lr
    145c:	200002a0 	.word	0x200002a0
    1460:	40011000 	.word	0x40011000

00001464 <z_arm_exc_exit>:
    /* r0 contains the caller mode */
    push {r0, lr}
#endif

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
    1464:	4804      	ldr	r0, [pc, #16]	; (1478 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
    1466:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
    1468:	6a40      	ldr	r0, [r0, #36]	; 0x24
    cmp r0, r1
    146a:	4288      	cmp	r0, r1
    beq _EXIT_EXC
    146c:	d003      	beq.n	1476 <_EXIT_EXC>

#if defined(CONFIG_CPU_CORTEX_M)
    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    146e:	4903      	ldr	r1, [pc, #12]	; (147c <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
    1470:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    1474:	600a      	str	r2, [r1, #0]

00001476 <_EXIT_EXC>:
    bl z_check_stack_sentinel
#endif /* CONFIG_CPU_CORTEX_M */
#endif /* CONFIG_STACK_SENTINEL */

#if defined(CONFIG_CPU_CORTEX_M)
    bx lr
    1476:	4770      	bx	lr
    ldr r0, =_kernel
    1478:	200003a8 	.word	0x200003a8
    ldr r1, =_SCS_ICSR
    147c:	e000ed04 	.word	0xe000ed04

00001480 <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
    1480:	4a09      	ldr	r2, [pc, #36]	; (14a8 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    1482:	490a      	ldr	r1, [pc, #40]	; (14ac <arch_swap+0x2c>)
	_current->arch.basepri = key;
    1484:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    1486:	6809      	ldr	r1, [r1, #0]
    1488:	6699      	str	r1, [r3, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    148a:	4909      	ldr	r1, [pc, #36]	; (14b0 <arch_swap+0x30>)
	_current->arch.basepri = key;
    148c:	6658      	str	r0, [r3, #100]	; 0x64
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    148e:	684b      	ldr	r3, [r1, #4]
    1490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1494:	604b      	str	r3, [r1, #4]
    1496:	2300      	movs	r3, #0
    1498:	f383 8811 	msr	BASEPRI, r3
    149c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    14a0:	6893      	ldr	r3, [r2, #8]
}
    14a2:	6e98      	ldr	r0, [r3, #104]	; 0x68
    14a4:	4770      	bx	lr
    14a6:	bf00      	nop
    14a8:	200003a8 	.word	0x200003a8
    14ac:	00005a54 	.word	0x00005a54
    14b0:	e000ed00 	.word	0xe000ed00

000014b4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    14b4:	4912      	ldr	r1, [pc, #72]	; (1500 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    14b6:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    14b8:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
    14bc:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    14be:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    14c2:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    14c6:	2020      	movs	r0, #32
    msr BASEPRI, r0
    14c8:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    14cc:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    14d0:	4f0c      	ldr	r7, [pc, #48]	; (1504 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    14d2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    14d6:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    14d8:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    14da:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    14dc:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs r3, #0
    14de:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    14e0:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    14e2:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
    14e6:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    14e8:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    14ea:	f003 fd0d 	bl	4f08 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    14ee:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    14f2:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
    14f6:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    14fa:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    14fe:	4770      	bx	lr
    ldr r1, =_kernel
    1500:	200003a8 	.word	0x200003a8
    ldr v4, =_SCS_ICSR
    1504:	e000ed04 	.word	0xe000ed04

00001508 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    1508:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    150c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    150e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    1512:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    1516:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    1518:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    151c:	2902      	cmp	r1, #2
    beq _oops
    151e:	d0ff      	beq.n	1520 <_oops>

00001520 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    1520:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    1522:	f003 fce6 	bl	4ef2 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    1526:	bd01      	pop	{r0, pc}

00001528 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1528:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    152a:	2b00      	cmp	r3, #0
    152c:	db08      	blt.n	1540 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    152e:	2201      	movs	r2, #1
    1530:	f000 001f 	and.w	r0, r0, #31
    1534:	fa02 f000 	lsl.w	r0, r2, r0
    1538:	095b      	lsrs	r3, r3, #5
    153a:	4a02      	ldr	r2, [pc, #8]	; (1544 <arch_irq_enable+0x1c>)
    153c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    1540:	4770      	bx	lr
    1542:	bf00      	nop
    1544:	e000e100 	.word	0xe000e100

00001548 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1548:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    154a:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    154c:	bfa8      	it	ge
    154e:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    1552:	f101 0101 	add.w	r1, r1, #1
    1556:	ea4f 1141 	mov.w	r1, r1, lsl #5
    155a:	bfae      	itee	ge
    155c:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1560:	f000 000f 	andlt.w	r0, r0, #15
    1564:	4b03      	ldrlt	r3, [pc, #12]	; (1574 <z_arm_irq_priority_set+0x2c>)
    1566:	b2c9      	uxtb	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1568:	bfac      	ite	ge
    156a:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    156e:	5419      	strblt	r1, [r3, r0]
}
    1570:	4770      	bx	lr
    1572:	bf00      	nop
    1574:	e000ed14 	.word	0xe000ed14

00001578 <arch_new_thread>:
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     size_t stackSize, k_thread_entry_t pEntry,
		     void *parameter1, void *parameter2, void *parameter3,
		     int priority, unsigned int options)
{
    1578:	b573      	push	{r0, r1, r4, r5, r6, lr}
    157a:	461e      	mov	r6, r3
#endif
	stackEnd = pStackMem + stackSize;

	struct __esf *pInitCtx;

	z_new_thread_init(thread, pStackMem, stackSize, priority,
    157c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    157e:	9300      	str	r3, [sp, #0]
	stackEnd = pStackMem + stackSize;
    1580:	188c      	adds	r4, r1, r2
	z_new_thread_init(thread, pStackMem, stackSize, priority,
    1582:	9b09      	ldr	r3, [sp, #36]	; 0x24
{
    1584:	4605      	mov	r5, r0
	z_new_thread_init(thread, pStackMem, stackSize, priority,
    1586:	f004 f828 	bl	55da <z_new_thread_init>
	 *
	 * The initial carved stack frame only needs to contain the basic
	 * stack frame (state context), because no FP operations have been
	 * performed yet for this thread.
	 */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    158a:	f1a4 0320 	sub.w	r3, r4, #32
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
    158e:	4a0a      	ldr	r2, [pc, #40]	; (15b8 <arch_new_thread+0x40>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
    1590:	f023 0307 	bic.w	r3, r3, #7
	pInitCtx->basic.pc &= 0xfffffffe;
    1594:	f022 0201 	bic.w	r2, r2, #1
    1598:	619a      	str	r2, [r3, #24]
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
    159a:	9a06      	ldr	r2, [sp, #24]
    159c:	605a      	str	r2, [r3, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
    159e:	9a07      	ldr	r2, [sp, #28]
    15a0:	609a      	str	r2, [r3, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
    15a2:	9a08      	ldr	r2, [sp, #32]
    15a4:	60da      	str	r2, [r3, #12]
	pInitCtx->basic.xpsr =
    15a6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
	pInitCtx->basic.a1 = (u32_t)pEntry;
    15aa:	601e      	str	r6, [r3, #0]
	pInitCtx->basic.xpsr =
    15ac:	61da      	str	r2, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
    15ae:	64ab      	str	r3, [r5, #72]	; 0x48
#if defined(CONFIG_CPU_CORTEX_R)
	pInitCtx->basic.lr = (u32_t)pInitCtx->basic.pc;
	thread->callee_saved.spsr = A_BIT | T_BIT | MODE_SYS;
	thread->callee_saved.lr = (u32_t)pInitCtx->basic.pc;
#endif
	thread->arch.basepri = 0;
    15b0:	2300      	movs	r3, #0
    15b2:	666b      	str	r3, [r5, #100]	; 0x64

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    15b4:	b002      	add	sp, #8
    15b6:	bd70      	pop	{r4, r5, r6, pc}
    15b8:	000043fd 	.word	0x000043fd

000015bc <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
    15bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    15be:	4605      	mov	r5, r0
    15c0:	460c      	mov	r4, r1
    15c2:	4617      	mov	r7, r2
    15c4:	461e      	mov	r6, r3
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    15c6:	f000 fb93 	bl	1cf0 <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
    15ca:	4b0a      	ldr	r3, [pc, #40]	; (15f4 <arch_switch_to_main_thread+0x38>)
	start_of_main_stack =
    15cc:	443c      	add	r4, r7
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    15ce:	4628      	mov	r0, r5
	_current = main_thread;
    15d0:	609d      	str	r5, [r3, #8]
	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);
    15d2:	f024 0407 	bic.w	r4, r4, #7
	z_arm_configure_dynamic_mpu_regions(main_thread);
    15d6:	f003 fc97 	bl	4f08 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    15da:	4630      	mov	r0, r6
    15dc:	f384 8809 	msr	PSP, r4
    15e0:	2100      	movs	r1, #0
    15e2:	b663      	cpsie	if
    15e4:	f381 8811 	msr	BASEPRI, r1
    15e8:	f3bf 8f6f 	isb	sy
    15ec:	2200      	movs	r2, #0
    15ee:	2300      	movs	r3, #0
    15f0:	f002 ff04 	bl	43fc <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    15f4:	200003a8 	.word	0x200003a8

000015f8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr r1, =_SCB_SCR
    15f8:	4901      	ldr	r1, [pc, #4]	; (1600 <z_arm_cpu_idle_init+0x8>)
	movs.n r2, #_SCR_INIT_BITS
    15fa:	2210      	movs	r2, #16
	str r2, [r1]
    15fc:	600a      	str	r2, [r1, #0]
#endif
	bx lr
    15fe:	4770      	bx	lr
	ldr r1, =_SCB_SCR
    1600:	e000ed10 	.word	0xe000ed10

00001604 <arch_cpu_idle>:
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
    1604:	4040      	eors	r0, r0
	msr BASEPRI, r0
    1606:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
    160a:	bf30      	wfi

	bx lr
    160c:	4770      	bx	lr
    160e:	bf00      	nop

00001610 <z_arm_bus_fault>:
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_reserved)

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) || \
	defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	mrs r0, MSP
    1610:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    1614:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
    1618:	4672      	mov	r2, lr

	push {r0, lr}
    161a:	b501      	push	{r0, lr}
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE || CONFIG_ARMv7_M_ARMV8_M_MAINLINE */

	bl z_arm_fault
    161c:	f000 fa46 	bl	1aac <z_arm_fault>

#if defined(CONFIG_CPU_CORTEX_M)
	pop {r0, pc}
    1620:	bd01      	pop	{r0, pc}
    1622:	bf00      	nop

00001624 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    1624:	b573      	push	{r0, r1, r4, r5, r6, lr}
    1626:	4606      	mov	r6, r0

	if (esf != NULL) {
    1628:	460c      	mov	r4, r1
    162a:	2900      	cmp	r1, #0
    162c:	d038      	beq.n	16a0 <z_arm_fatal_error+0x7c>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    162e:	2201      	movs	r2, #1
    1630:	f04f 0300 	mov.w	r3, #0
    1634:	f362 0307 	bfi	r3, r2, #0, #8
    1638:	4d1d      	ldr	r5, [pc, #116]	; (16b0 <z_arm_fatal_error+0x8c>)
    163a:	4a1e      	ldr	r2, [pc, #120]	; (16b4 <z_arm_fatal_error+0x90>)
    163c:	481e      	ldr	r0, [pc, #120]	; (16b8 <z_arm_fatal_error+0x94>)
    163e:	1aad      	subs	r5, r5, r2
    1640:	f3c5 05c9 	ubfx	r5, r5, #3, #10
    1644:	f365 138f 	bfi	r3, r5, #6, #10
    1648:	f8ad 3000 	strh.w	r3, [sp]
    164c:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    1650:	6809      	ldr	r1, [r1, #0]
    1652:	f003 f8c7 	bl	47e4 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    1656:	2201      	movs	r2, #1
    1658:	f04f 0300 	mov.w	r3, #0
    165c:	f362 0307 	bfi	r3, r2, #0, #8
    1660:	f365 138f 	bfi	r3, r5, #6, #10
    1664:	f8ad 3000 	strh.w	r3, [sp]
    1668:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    166c:	68e1      	ldr	r1, [r4, #12]
    166e:	4813      	ldr	r0, [pc, #76]	; (16bc <z_arm_fatal_error+0x98>)
    1670:	f003 f8b8 	bl	47e4 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    1674:	2301      	movs	r3, #1
    1676:	f04f 0200 	mov.w	r2, #0
    167a:	f363 0207 	bfi	r2, r3, #0, #8
    167e:	f365 128f 	bfi	r2, r5, #6, #10
    1682:	69e1      	ldr	r1, [r4, #28]
    1684:	480e      	ldr	r0, [pc, #56]	; (16c0 <z_arm_fatal_error+0x9c>)
    1686:	f003 f881 	bl	478c <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    168a:	f04f 0200 	mov.w	r2, #0
    168e:	2301      	movs	r3, #1
    1690:	f363 0207 	bfi	r2, r3, #0, #8
    1694:	f365 128f 	bfi	r2, r5, #6, #10
    1698:	69a1      	ldr	r1, [r4, #24]
    169a:	480a      	ldr	r0, [pc, #40]	; (16c4 <z_arm_fatal_error+0xa0>)
    169c:	f003 f876 	bl	478c <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    16a0:	4621      	mov	r1, r4
    16a2:	4630      	mov	r0, r6
}
    16a4:	b002      	add	sp, #8
    16a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    16aa:	f001 bf37 	b.w	351c <z_fatal_error>
    16ae:	bf00      	nop
    16b0:	00005910 	.word	0x00005910
    16b4:	000058f8 	.word	0x000058f8
    16b8:	00005dc3 	.word	0x00005dc3
    16bc:	00005df2 	.word	0x00005df2
    16c0:	00005e21 	.word	0x00005e21
    16c4:	00005e30 	.word	0x00005e30

000016c8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    16c8:	bf30      	wfi
    b z_SysNmiOnReset
    16ca:	f7ff bffd 	b.w	16c8 <z_SysNmiOnReset>
    16ce:	bf00      	nop

000016d0 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    16d0:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    16d2:	4b08      	ldr	r3, [pc, #32]	; (16f4 <z_arm_prep_c+0x24>)
    16d4:	4a08      	ldr	r2, [pc, #32]	; (16f8 <z_arm_prep_c+0x28>)
    16d6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    16da:	6093      	str	r3, [r2, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    16dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    16e0:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
    16e4:	f001 ff98 	bl	3618 <z_bss_zero>
	z_data_copy();
    16e8:	f001 ffa0 	bl	362c <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_int_lib_init();
    16ec:	f000 face 	bl	1c8c <z_arm_int_lib_init>
	z_cstart();
    16f0:	f001 ffd4 	bl	369c <z_cstart>
    16f4:	00000000 	.word	0x00000000
    16f8:	e000ed00 	.word	0xe000ed00

000016fc <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    16fc:	b501      	push	{r0, lr}
	 * device for the next timer deadline is not interrupted.  For
	 * non-tickless idle, this ensures that the clearing of the kernel idle
	 * state is not interrupted.  In each case, z_sys_power_save_idle_exit
	 * is called with interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
    16fe:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1700:	4a0b      	ldr	r2, [pc, #44]	; (1730 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1702:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    1704:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1706:	bf1e      	ittt	ne
	movne	r1, #0
    1708:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    170a:	6211      	strne	r1, [r2, #32]
		blne	z_sys_power_save_idle_exit
    170c:	f003 fe8c 	blne	5428 <z_sys_power_save_idle_exit>
_idle_state_cleared:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1710:	b662      	cpsie	i
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    1712:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1716:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    171a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 */
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
    171e:	4905      	ldr	r1, [pc, #20]	; (1734 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1720:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1722:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
    1724:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    1726:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    172a:	4903      	ldr	r1, [pc, #12]	; (1738 <_isr_wrapper+0x3c>)
	bx r1
    172c:	4708      	bx	r1
    172e:	0000      	.short	0x0000
	ldr r2, =_kernel
    1730:	200003a8 	.word	0x200003a8
	ldr r1, =_sw_isr_table
    1734:	00005730 	.word	0x00005730
	ldr r1, =z_arm_int_exit
    1738:	00001465 	.word	0x00001465

0000173c <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    173c:	f003 fcec 	bl	5118 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    1740:	2020      	movs	r0, #32
    msr BASEPRI, r0
    1742:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
    1746:	4808      	ldr	r0, [pc, #32]	; (1768 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
    1748:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    174c:	1840      	adds	r0, r0, r1
    msr PSP, r0
    174e:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    1752:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    1756:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    1758:	4308      	orrs	r0, r1
    msr CONTROL, r0
    175a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    175e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    1762:	f7ff ffb5 	bl	16d0 <z_arm_prep_c>
    1766:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
    1768:	20001838 	.word	0x20001838

0000176c <usage_fault.isra.2>:
 */
static u32_t usage_fault(const z_arch_esf_t *esf)
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    176c:	2301      	movs	r3, #1
    176e:	f04f 0100 	mov.w	r1, #0
static u32_t usage_fault(const z_arch_esf_t *esf)
    1772:	b510      	push	{r4, lr}
	PR_FAULT_INFO("***** USAGE FAULT *****");
    1774:	f363 0107 	bfi	r1, r3, #0, #8
    1778:	4c33      	ldr	r4, [pc, #204]	; (1848 <usage_fault.isra.2+0xdc>)
    177a:	4b34      	ldr	r3, [pc, #208]	; (184c <usage_fault.isra.2+0xe0>)
    177c:	4834      	ldr	r0, [pc, #208]	; (1850 <usage_fault.isra.2+0xe4>)
    177e:	1ae4      	subs	r4, r4, r3
    1780:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    1784:	f364 118f 	bfi	r1, r4, #6, #10
    1788:	f002 fff3 	bl	4772 <log_0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    178c:	4b31      	ldr	r3, [pc, #196]	; (1854 <usage_fault.isra.2+0xe8>)
    178e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1790:	019a      	lsls	r2, r3, #6
    1792:	d509      	bpl.n	17a8 <usage_fault.isra.2+0x3c>
		PR_FAULT_INFO("  Division by zero");
    1794:	f04f 0100 	mov.w	r1, #0
    1798:	2301      	movs	r3, #1
    179a:	f363 0107 	bfi	r1, r3, #0, #8
    179e:	f364 118f 	bfi	r1, r4, #6, #10
    17a2:	482d      	ldr	r0, [pc, #180]	; (1858 <usage_fault.isra.2+0xec>)
    17a4:	f002 ffe5 	bl	4772 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    17a8:	4b2a      	ldr	r3, [pc, #168]	; (1854 <usage_fault.isra.2+0xe8>)
    17aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    17ac:	01db      	lsls	r3, r3, #7
    17ae:	d509      	bpl.n	17c4 <usage_fault.isra.2+0x58>
		PR_FAULT_INFO("  Unaligned memory access");
    17b0:	f04f 0100 	mov.w	r1, #0
    17b4:	2301      	movs	r3, #1
    17b6:	f363 0107 	bfi	r1, r3, #0, #8
    17ba:	f364 118f 	bfi	r1, r4, #6, #10
    17be:	4827      	ldr	r0, [pc, #156]	; (185c <usage_fault.isra.2+0xf0>)
    17c0:	f002 ffd7 	bl	4772 <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    17c4:	4b23      	ldr	r3, [pc, #140]	; (1854 <usage_fault.isra.2+0xe8>)
    17c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    17c8:	0318      	lsls	r0, r3, #12
    17ca:	d509      	bpl.n	17e0 <usage_fault.isra.2+0x74>
		PR_FAULT_INFO("  No coprocessor instructions");
    17cc:	f04f 0100 	mov.w	r1, #0
    17d0:	2301      	movs	r3, #1
    17d2:	f363 0107 	bfi	r1, r3, #0, #8
    17d6:	f364 118f 	bfi	r1, r4, #6, #10
    17da:	4821      	ldr	r0, [pc, #132]	; (1860 <usage_fault.isra.2+0xf4>)
    17dc:	f002 ffc9 	bl	4772 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    17e0:	4b1c      	ldr	r3, [pc, #112]	; (1854 <usage_fault.isra.2+0xe8>)
    17e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    17e4:	0359      	lsls	r1, r3, #13
    17e6:	d509      	bpl.n	17fc <usage_fault.isra.2+0x90>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    17e8:	f04f 0100 	mov.w	r1, #0
    17ec:	2301      	movs	r3, #1
    17ee:	f363 0107 	bfi	r1, r3, #0, #8
    17f2:	f364 118f 	bfi	r1, r4, #6, #10
    17f6:	481b      	ldr	r0, [pc, #108]	; (1864 <usage_fault.isra.2+0xf8>)
    17f8:	f002 ffbb 	bl	4772 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    17fc:	4b15      	ldr	r3, [pc, #84]	; (1854 <usage_fault.isra.2+0xe8>)
    17fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1800:	039a      	lsls	r2, r3, #14
    1802:	d509      	bpl.n	1818 <usage_fault.isra.2+0xac>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    1804:	f04f 0100 	mov.w	r1, #0
    1808:	2301      	movs	r3, #1
    180a:	f363 0107 	bfi	r1, r3, #0, #8
    180e:	f364 118f 	bfi	r1, r4, #6, #10
    1812:	4815      	ldr	r0, [pc, #84]	; (1868 <usage_fault.isra.2+0xfc>)
    1814:	f002 ffad 	bl	4772 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1818:	4b0e      	ldr	r3, [pc, #56]	; (1854 <usage_fault.isra.2+0xe8>)
    181a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    181c:	03db      	lsls	r3, r3, #15
    181e:	d509      	bpl.n	1834 <usage_fault.isra.2+0xc8>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    1820:	f04f 0100 	mov.w	r1, #0
    1824:	2301      	movs	r3, #1
    1826:	f363 0107 	bfi	r1, r3, #0, #8
    182a:	f364 118f 	bfi	r1, r4, #6, #10
    182e:	480f      	ldr	r0, [pc, #60]	; (186c <usage_fault.isra.2+0x100>)
    1830:	f002 ff9f 	bl	4772 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1834:	4a07      	ldr	r2, [pc, #28]	; (1854 <usage_fault.isra.2+0xe8>)
    1836:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1838:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    183c:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    1840:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    1842:	2000      	movs	r0, #0
    1844:	bd10      	pop	{r4, pc}
    1846:	bf00      	nop
    1848:	00005910 	.word	0x00005910
    184c:	000058f8 	.word	0x000058f8
    1850:	00005fbe 	.word	0x00005fbe
    1854:	e000ed00 	.word	0xe000ed00
    1858:	00005fd6 	.word	0x00005fd6
    185c:	00005fe9 	.word	0x00005fe9
    1860:	00006003 	.word	0x00006003
    1864:	00006021 	.word	0x00006021
    1868:	00006046 	.word	0x00006046
    186c:	00006060 	.word	0x00006060

00001870 <mem_manage_fault.isra.4>:
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    1870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	PR_FAULT_INFO("***** MPU FAULT *****");
    1872:	2301      	movs	r3, #1
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    1874:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    1876:	f04f 0100 	mov.w	r1, #0
    187a:	f363 0107 	bfi	r1, r3, #0, #8
    187e:	4c36      	ldr	r4, [pc, #216]	; (1958 <mem_manage_fault.isra.4+0xe8>)
    1880:	4b36      	ldr	r3, [pc, #216]	; (195c <mem_manage_fault.isra.4+0xec>)
    1882:	1ae4      	subs	r4, r4, r3
    1884:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    1888:	f364 118f 	bfi	r1, r4, #6, #10
static u32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
    188c:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** MPU FAULT *****");
    188e:	4834      	ldr	r0, [pc, #208]	; (1960 <mem_manage_fault.isra.4+0xf0>)
    1890:	f002 ff6f 	bl	4772 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1894:	4b33      	ldr	r3, [pc, #204]	; (1964 <mem_manage_fault.isra.4+0xf4>)
    1896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1898:	06d9      	lsls	r1, r3, #27
    189a:	d509      	bpl.n	18b0 <mem_manage_fault.isra.4+0x40>
		PR_FAULT_INFO("  Stacking error (context area might be"
    189c:	f04f 0100 	mov.w	r1, #0
    18a0:	2301      	movs	r3, #1
    18a2:	f363 0107 	bfi	r1, r3, #0, #8
    18a6:	f364 118f 	bfi	r1, r4, #6, #10
    18aa:	482f      	ldr	r0, [pc, #188]	; (1968 <mem_manage_fault.isra.4+0xf8>)
    18ac:	f002 ff61 	bl	4772 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    18b0:	4b2c      	ldr	r3, [pc, #176]	; (1964 <mem_manage_fault.isra.4+0xf4>)
    18b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    18b4:	071a      	lsls	r2, r3, #28
    18b6:	d509      	bpl.n	18cc <mem_manage_fault.isra.4+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    18b8:	f04f 0100 	mov.w	r1, #0
    18bc:	2301      	movs	r3, #1
    18be:	f363 0107 	bfi	r1, r3, #0, #8
    18c2:	f364 118f 	bfi	r1, r4, #6, #10
    18c6:	4829      	ldr	r0, [pc, #164]	; (196c <mem_manage_fault.isra.4+0xfc>)
    18c8:	f002 ff53 	bl	4772 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    18cc:	4d25      	ldr	r5, [pc, #148]	; (1964 <mem_manage_fault.isra.4+0xf4>)
    18ce:	6aab      	ldr	r3, [r5, #40]	; 0x28
    18d0:	079b      	lsls	r3, r3, #30
    18d2:	d51c      	bpl.n	190e <mem_manage_fault.isra.4+0x9e>
		PR_FAULT_INFO("  Data Access Violation");
    18d4:	2301      	movs	r3, #1
    18d6:	f04f 0100 	mov.w	r1, #0
    18da:	f363 0107 	bfi	r1, r3, #0, #8
    18de:	f364 118f 	bfi	r1, r4, #6, #10
    18e2:	4823      	ldr	r0, [pc, #140]	; (1970 <mem_manage_fault.isra.4+0x100>)
    18e4:	f002 ff45 	bl	4772 <log_0>
		mmfar = SCB->MMFAR;
    18e8:	6b69      	ldr	r1, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    18ea:	6aab      	ldr	r3, [r5, #40]	; 0x28
    18ec:	0618      	lsls	r0, r3, #24
    18ee:	d50e      	bpl.n	190e <mem_manage_fault.isra.4+0x9e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    18f0:	f04f 0200 	mov.w	r2, #0
    18f4:	2301      	movs	r3, #1
    18f6:	f363 0207 	bfi	r2, r3, #0, #8
    18fa:	f364 128f 	bfi	r2, r4, #6, #10
    18fe:	481d      	ldr	r0, [pc, #116]	; (1974 <mem_manage_fault.isra.4+0x104>)
    1900:	f002 ff44 	bl	478c <log_1>
			if (from_hard_fault) {
    1904:	b11f      	cbz	r7, 190e <mem_manage_fault.isra.4+0x9e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1906:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1908:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    190c:	62ab      	str	r3, [r5, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    190e:	4b15      	ldr	r3, [pc, #84]	; (1964 <mem_manage_fault.isra.4+0xf4>)
    1910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1912:	07da      	lsls	r2, r3, #31
    1914:	d509      	bpl.n	192a <mem_manage_fault.isra.4+0xba>
		PR_FAULT_INFO("  Instruction Access Violation");
    1916:	f04f 0100 	mov.w	r1, #0
    191a:	2301      	movs	r3, #1
    191c:	f363 0107 	bfi	r1, r3, #0, #8
    1920:	f364 118f 	bfi	r1, r4, #6, #10
    1924:	4814      	ldr	r0, [pc, #80]	; (1978 <mem_manage_fault.isra.4+0x108>)
    1926:	f002 ff24 	bl	4772 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    192a:	4b0e      	ldr	r3, [pc, #56]	; (1964 <mem_manage_fault.isra.4+0xf4>)
    192c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    192e:	069b      	lsls	r3, r3, #26
    1930:	d509      	bpl.n	1946 <mem_manage_fault.isra.4+0xd6>
		PR_FAULT_INFO(
    1932:	f04f 0100 	mov.w	r1, #0
    1936:	2301      	movs	r3, #1
    1938:	f363 0107 	bfi	r1, r3, #0, #8
    193c:	f364 118f 	bfi	r1, r4, #6, #10
    1940:	480e      	ldr	r0, [pc, #56]	; (197c <mem_manage_fault.isra.4+0x10c>)
    1942:	f002 ff16 	bl	4772 <log_0>
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    1946:	4b07      	ldr	r3, [pc, #28]	; (1964 <mem_manage_fault.isra.4+0xf4>)
    1948:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    194a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    194c:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    194e:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    1952:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    1954:	7030      	strb	r0, [r6, #0]
}
    1956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1958:	00005910 	.word	0x00005910
    195c:	000058f8 	.word	0x000058f8
    1960:	00005ee6 	.word	0x00005ee6
    1964:	e000ed00 	.word	0xe000ed00
    1968:	00005efc 	.word	0x00005efc
    196c:	00005f2f 	.word	0x00005f2f
    1970:	00005f42 	.word	0x00005f42
    1974:	00005f5a 	.word	0x00005f5a
    1978:	00005f70 	.word	0x00005f70
    197c:	00005f8f 	.word	0x00005f8f

00001980 <bus_fault.isra.5>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    1980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	PR_FAULT_INFO("***** BUS FAULT *****");
    1982:	2301      	movs	r3, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    1984:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    1986:	f04f 0100 	mov.w	r1, #0
    198a:	f363 0107 	bfi	r1, r3, #0, #8
    198e:	4c3c      	ldr	r4, [pc, #240]	; (1a80 <bus_fault.isra.5+0x100>)
    1990:	4b3c      	ldr	r3, [pc, #240]	; (1a84 <bus_fault.isra.5+0x104>)
    1992:	1ae4      	subs	r4, r4, r3
    1994:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    1998:	f364 118f 	bfi	r1, r4, #6, #10
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    199c:	4607      	mov	r7, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
    199e:	483a      	ldr	r0, [pc, #232]	; (1a88 <bus_fault.isra.5+0x108>)
    19a0:	f002 fee7 	bl	4772 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    19a4:	4b39      	ldr	r3, [pc, #228]	; (1a8c <bus_fault.isra.5+0x10c>)
    19a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    19a8:	04d9      	lsls	r1, r3, #19
    19aa:	d509      	bpl.n	19c0 <bus_fault.isra.5+0x40>
		PR_FAULT_INFO("  Stacking error");
    19ac:	f04f 0100 	mov.w	r1, #0
    19b0:	2301      	movs	r3, #1
    19b2:	f363 0107 	bfi	r1, r3, #0, #8
    19b6:	f364 118f 	bfi	r1, r4, #6, #10
    19ba:	4835      	ldr	r0, [pc, #212]	; (1a90 <bus_fault.isra.5+0x110>)
    19bc:	f002 fed9 	bl	4772 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    19c0:	4b32      	ldr	r3, [pc, #200]	; (1a8c <bus_fault.isra.5+0x10c>)
    19c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    19c4:	051a      	lsls	r2, r3, #20
    19c6:	d509      	bpl.n	19dc <bus_fault.isra.5+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    19c8:	f04f 0100 	mov.w	r1, #0
    19cc:	2301      	movs	r3, #1
    19ce:	f363 0107 	bfi	r1, r3, #0, #8
    19d2:	f364 118f 	bfi	r1, r4, #6, #10
    19d6:	482f      	ldr	r0, [pc, #188]	; (1a94 <bus_fault.isra.5+0x114>)
    19d8:	f002 fecb 	bl	4772 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    19dc:	4d2b      	ldr	r5, [pc, #172]	; (1a8c <bus_fault.isra.5+0x10c>)
    19de:	6aab      	ldr	r3, [r5, #40]	; 0x28
    19e0:	059b      	lsls	r3, r3, #22
    19e2:	d51c      	bpl.n	1a1e <bus_fault.isra.5+0x9e>
		PR_FAULT_INFO("  Precise data bus error");
    19e4:	2301      	movs	r3, #1
    19e6:	f04f 0100 	mov.w	r1, #0
    19ea:	f363 0107 	bfi	r1, r3, #0, #8
    19ee:	f364 118f 	bfi	r1, r4, #6, #10
    19f2:	4829      	ldr	r0, [pc, #164]	; (1a98 <bus_fault.isra.5+0x118>)
    19f4:	f002 febd 	bl	4772 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    19f8:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    19fa:	6aab      	ldr	r3, [r5, #40]	; 0x28
    19fc:	0418      	lsls	r0, r3, #16
    19fe:	d50e      	bpl.n	1a1e <bus_fault.isra.5+0x9e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    1a00:	f04f 0200 	mov.w	r2, #0
    1a04:	2301      	movs	r3, #1
    1a06:	f363 0207 	bfi	r2, r3, #0, #8
    1a0a:	f364 128f 	bfi	r2, r4, #6, #10
    1a0e:	4823      	ldr	r0, [pc, #140]	; (1a9c <bus_fault.isra.5+0x11c>)
    1a10:	f002 febc 	bl	478c <log_1>
			if (from_hard_fault) {
    1a14:	b11f      	cbz	r7, 1a1e <bus_fault.isra.5+0x9e>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1a16:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1a18:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    1a1c:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1a1e:	4b1b      	ldr	r3, [pc, #108]	; (1a8c <bus_fault.isra.5+0x10c>)
    1a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1a22:	0559      	lsls	r1, r3, #21
    1a24:	d509      	bpl.n	1a3a <bus_fault.isra.5+0xba>
		PR_FAULT_INFO("  Imprecise data bus error");
    1a26:	f04f 0100 	mov.w	r1, #0
    1a2a:	2301      	movs	r3, #1
    1a2c:	f363 0107 	bfi	r1, r3, #0, #8
    1a30:	f364 118f 	bfi	r1, r4, #6, #10
    1a34:	481a      	ldr	r0, [pc, #104]	; (1aa0 <bus_fault.isra.5+0x120>)
    1a36:	f002 fe9c 	bl	4772 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1a3a:	4b14      	ldr	r3, [pc, #80]	; (1a8c <bus_fault.isra.5+0x10c>)
    1a3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1a3e:	05d2      	lsls	r2, r2, #23
    1a40:	d511      	bpl.n	1a66 <bus_fault.isra.5+0xe6>
		PR_FAULT_INFO("  Instruction bus error");
    1a42:	f04f 0100 	mov.w	r1, #0
    1a46:	2301      	movs	r3, #1
    1a48:	f363 0107 	bfi	r1, r3, #0, #8
    1a4c:	4815      	ldr	r0, [pc, #84]	; (1aa4 <bus_fault.isra.5+0x124>)
    1a4e:	f364 118f 	bfi	r1, r4, #6, #10
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    1a52:	f002 fe8e 	bl	4772 <log_0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1a56:	4a0d      	ldr	r2, [pc, #52]	; (1a8c <bus_fault.isra.5+0x10c>)
    1a58:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    1a5a:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1a5c:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    1a60:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    1a62:	7030      	strb	r0, [r6, #0]
}
    1a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1a68:	049b      	lsls	r3, r3, #18
    1a6a:	d5f4      	bpl.n	1a56 <bus_fault.isra.5+0xd6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    1a6c:	f04f 0100 	mov.w	r1, #0
    1a70:	2301      	movs	r3, #1
    1a72:	f363 0107 	bfi	r1, r3, #0, #8
    1a76:	f364 118f 	bfi	r1, r4, #6, #10
    1a7a:	480b      	ldr	r0, [pc, #44]	; (1aa8 <bus_fault.isra.5+0x128>)
    1a7c:	e7e9      	b.n	1a52 <bus_fault.isra.5+0xd2>
    1a7e:	bf00      	nop
    1a80:	00005910 	.word	0x00005910
    1a84:	000058f8 	.word	0x000058f8
    1a88:	00005e5e 	.word	0x00005e5e
    1a8c:	e000ed00 	.word	0xe000ed00
    1a90:	00005e74 	.word	0x00005e74
    1a94:	00005f2f 	.word	0x00005f2f
    1a98:	00005e85 	.word	0x00005e85
    1a9c:	00005e9e 	.word	0x00005e9e
    1aa0:	00005eb3 	.word	0x00005eb3
    1aa4:	00005ece 	.word	0x00005ece
    1aa8:	00005f8f 	.word	0x00005f8f

00001aac <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
    1aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1ab0:	4b64      	ldr	r3, [pc, #400]	; (1c44 <z_arm_fault+0x198>)
    1ab2:	685e      	ldr	r6, [r3, #4]
{
    1ab4:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1ab6:	f3c6 0408 	ubfx	r4, r6, #0, #9
    1aba:	2500      	movs	r5, #0
    1abc:	f385 8811 	msr	BASEPRI, r5
    1ac0:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    1ac4:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    1ac8:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    1acc:	d111      	bne.n	1af2 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    1ace:	f002 030c 	and.w	r3, r2, #12
    1ad2:	2b08      	cmp	r3, #8
    1ad4:	d10f      	bne.n	1af6 <z_arm_fault+0x4a>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    1ad6:	2301      	movs	r3, #1
    1ad8:	f04f 0100 	mov.w	r1, #0
    1adc:	f363 0107 	bfi	r1, r3, #0, #8
    1ae0:	4a59      	ldr	r2, [pc, #356]	; (1c48 <z_arm_fault+0x19c>)
    1ae2:	4b5a      	ldr	r3, [pc, #360]	; (1c4c <z_arm_fault+0x1a0>)
    1ae4:	485a      	ldr	r0, [pc, #360]	; (1c50 <z_arm_fault+0x1a4>)
    1ae6:	1a9b      	subs	r3, r3, r2
    1ae8:	08db      	lsrs	r3, r3, #3
    1aea:	f363 118f 	bfi	r1, r3, #6, #10
    1aee:	f002 fe40 	bl	4772 <log_0>
		return NULL;
    1af2:	462f      	mov	r7, r5
    1af4:	e004      	b.n	1b00 <z_arm_fault+0x54>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    1af6:	0712      	lsls	r2, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    1af8:	bf4e      	itee	mi
    1afa:	460f      	movmi	r7, r1
			ptr_esf = (z_arch_esf_t *)msp;
    1afc:	4607      	movpl	r7, r0
			*nested_exc = true;
    1afe:	2501      	movpl	r5, #1
	*recoverable = false;
    1b00:	2300      	movs	r3, #0
    1b02:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    1b06:	1ee3      	subs	r3, r4, #3
    1b08:	2b09      	cmp	r3, #9
    1b0a:	d87f      	bhi.n	1c0c <z_arm_fault+0x160>
    1b0c:	e8df f003 	tbb	[pc, r3]
    1b10:	4c6d6905 	.word	0x4c6d6905
    1b14:	7e7e7e7e 	.word	0x7e7e7e7e
    1b18:	717e      	.short	0x717e
	PR_FAULT_INFO("***** HARD FAULT *****");
    1b1a:	2301      	movs	r3, #1
    1b1c:	f04f 0100 	mov.w	r1, #0
    1b20:	f363 0107 	bfi	r1, r3, #0, #8
    1b24:	4e49      	ldr	r6, [pc, #292]	; (1c4c <z_arm_fault+0x1a0>)
    1b26:	4b48      	ldr	r3, [pc, #288]	; (1c48 <z_arm_fault+0x19c>)
    1b28:	484a      	ldr	r0, [pc, #296]	; (1c54 <z_arm_fault+0x1a8>)
    1b2a:	1af6      	subs	r6, r6, r3
    1b2c:	f3c6 06c9 	ubfx	r6, r6, #3, #10
    1b30:	f366 118f 	bfi	r1, r6, #6, #10
    1b34:	f002 fe1d 	bl	4772 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1b38:	4b42      	ldr	r3, [pc, #264]	; (1c44 <z_arm_fault+0x198>)
    1b3a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
	*recoverable = false;
    1b3c:	f04f 0800 	mov.w	r8, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1b40:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
    1b44:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1b48:	d00b      	beq.n	1b62 <z_arm_fault+0xb6>
		PR_EXC("  Bus fault on vector table read");
    1b4a:	f04f 0100 	mov.w	r1, #0
    1b4e:	2301      	movs	r3, #1
    1b50:	f363 0107 	bfi	r1, r3, #0, #8
    1b54:	4840      	ldr	r0, [pc, #256]	; (1c58 <z_arm_fault+0x1ac>)
    1b56:	f366 118f 	bfi	r1, r6, #6, #10
	PR_FAULT_INFO(
    1b5a:	f002 fe0a 	bl	4772 <log_0>
	u32_t reason = K_ERR_CPU_EXCEPTION;
    1b5e:	2400      	movs	r4, #0
    1b60:	e025      	b.n	1bae <z_arm_fault+0x102>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    1b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1b64:	005b      	lsls	r3, r3, #1
    1b66:	d522      	bpl.n	1bae <z_arm_fault+0x102>
		PR_EXC("  Fault escalation (see below)");
    1b68:	2301      	movs	r3, #1
    1b6a:	f04f 0100 	mov.w	r1, #0
    1b6e:	f363 0107 	bfi	r1, r3, #0, #8
    1b72:	f366 118f 	bfi	r1, r6, #6, #10
    1b76:	4839      	ldr	r0, [pc, #228]	; (1c5c <z_arm_fault+0x1b0>)
    1b78:	f002 fdfb 	bl	4772 <log_0>
		if (SCB_MMFSR != 0) {
    1b7c:	4b38      	ldr	r3, [pc, #224]	; (1c60 <z_arm_fault+0x1b4>)
    1b7e:	781b      	ldrb	r3, [r3, #0]
    1b80:	b12b      	cbz	r3, 1b8e <z_arm_fault+0xe2>
			reason = mem_manage_fault(esf, 1, recoverable);
    1b82:	f10d 0107 	add.w	r1, sp, #7
    1b86:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    1b88:	f7ff fe72 	bl	1870 <mem_manage_fault.isra.4>
    1b8c:	e00e      	b.n	1bac <z_arm_fault+0x100>
		} else if (SCB_BFSR != 0) {
    1b8e:	4b35      	ldr	r3, [pc, #212]	; (1c64 <z_arm_fault+0x1b8>)
    1b90:	781b      	ldrb	r3, [r3, #0]
    1b92:	b12b      	cbz	r3, 1ba0 <z_arm_fault+0xf4>
			reason = bus_fault(esf, 1, recoverable);
    1b94:	f10d 0107 	add.w	r1, sp, #7
    1b98:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    1b9a:	f7ff fef1 	bl	1980 <bus_fault.isra.5>
    1b9e:	e005      	b.n	1bac <z_arm_fault+0x100>
		} else if (SCB_UFSR != 0) {
    1ba0:	4b31      	ldr	r3, [pc, #196]	; (1c68 <z_arm_fault+0x1bc>)
    1ba2:	881b      	ldrh	r3, [r3, #0]
    1ba4:	b29b      	uxth	r3, r3
    1ba6:	b113      	cbz	r3, 1bae <z_arm_fault+0x102>
			reason = usage_fault(esf);
    1ba8:	f7ff fde0 	bl	176c <usage_fault.isra.2>
    1bac:	4604      	mov	r4, r0
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    1bae:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1bb2:	b99b      	cbnz	r3, 1bdc <z_arm_fault+0x130>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    1bb4:	2220      	movs	r2, #32
    1bb6:	4639      	mov	r1, r7
    1bb8:	a802      	add	r0, sp, #8
    1bba:	f003 f9da 	bl	4f72 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    1bbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1bc0:	2d00      	cmp	r5, #0
    1bc2:	d03a      	beq.n	1c3a <z_arm_fault+0x18e>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    1bc4:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1bc8:	b922      	cbnz	r2, 1bd4 <z_arm_fault+0x128>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1bca:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    1bce:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1bd2:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    1bd4:	a902      	add	r1, sp, #8
    1bd6:	4620      	mov	r0, r4
    1bd8:	f7ff fd24 	bl	1624 <z_arm_fatal_error>
}
    1bdc:	b00a      	add	sp, #40	; 0x28
    1bde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    1be2:	f10d 0107 	add.w	r1, sp, #7
    1be6:	2000      	movs	r0, #0
    1be8:	e7ce      	b.n	1b88 <z_arm_fault+0xdc>
		reason = bus_fault(esf, 0, recoverable);
    1bea:	f10d 0107 	add.w	r1, sp, #7
    1bee:	2000      	movs	r0, #0
    1bf0:	e7d3      	b.n	1b9a <z_arm_fault+0xee>
	PR_FAULT_INFO(
    1bf2:	2301      	movs	r3, #1
    1bf4:	f04f 0100 	mov.w	r1, #0
    1bf8:	f363 0107 	bfi	r1, r3, #0, #8
    1bfc:	4a12      	ldr	r2, [pc, #72]	; (1c48 <z_arm_fault+0x19c>)
    1bfe:	4b13      	ldr	r3, [pc, #76]	; (1c4c <z_arm_fault+0x1a0>)
    1c00:	481a      	ldr	r0, [pc, #104]	; (1c6c <z_arm_fault+0x1c0>)
    1c02:	1a9b      	subs	r3, r3, r2
    1c04:	08db      	lsrs	r3, r3, #3
    1c06:	f363 118f 	bfi	r1, r3, #6, #10
    1c0a:	e7a6      	b.n	1b5a <z_arm_fault+0xae>
	PR_FAULT_INFO("***** %s %d) *****",
    1c0c:	2201      	movs	r2, #1
    1c0e:	f04f 0300 	mov.w	r3, #0
    1c12:	f362 0307 	bfi	r3, r2, #0, #8
    1c16:	490d      	ldr	r1, [pc, #52]	; (1c4c <z_arm_fault+0x1a0>)
    1c18:	4a0b      	ldr	r2, [pc, #44]	; (1c48 <z_arm_fault+0x19c>)
    1c1a:	4815      	ldr	r0, [pc, #84]	; (1c70 <z_arm_fault+0x1c4>)
    1c1c:	1a89      	subs	r1, r1, r2
    1c1e:	08c9      	lsrs	r1, r1, #3
    1c20:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
    1c24:	f361 138f 	bfi	r3, r1, #6, #10
    1c28:	f1a4 0210 	sub.w	r2, r4, #16
    1c2c:	4911      	ldr	r1, [pc, #68]	; (1c74 <z_arm_fault+0x1c8>)
    1c2e:	bf18      	it	ne
    1c30:	4601      	movne	r1, r0
    1c32:	4811      	ldr	r0, [pc, #68]	; (1c78 <z_arm_fault+0x1cc>)
    1c34:	f002 fdbe 	bl	47b4 <log_2>
    1c38:	e791      	b.n	1b5e <z_arm_fault+0xb2>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1c3a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    1c3e:	f023 0301 	bic.w	r3, r3, #1
    1c42:	e7c6      	b.n	1bd2 <z_arm_fault+0x126>
    1c44:	e000ed00 	.word	0xe000ed00
    1c48:	000058f8 	.word	0x000058f8
    1c4c:	00005910 	.word	0x00005910
    1c50:	0000608b 	.word	0x0000608b
    1c54:	000060b6 	.word	0x000060b6
    1c58:	000060cd 	.word	0x000060cd
    1c5c:	000060ee 	.word	0x000060ee
    1c60:	e000ed28 	.word	0xe000ed28
    1c64:	e000ed29 	.word	0xe000ed29
    1c68:	e000ed2a 	.word	0xe000ed2a
    1c6c:	0000610d 	.word	0x0000610d
    1c70:	00006158 	.word	0x00006158
    1c74:	00006143 	.word	0x00006143
    1c78:	00006171 	.word	0x00006171

00001c7c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1c7c:	4a02      	ldr	r2, [pc, #8]	; (1c88 <z_arm_fault_init+0xc>)
    1c7e:	6953      	ldr	r3, [r2, #20]
    1c80:	f043 0310 	orr.w	r3, r3, #16
    1c84:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    1c86:	4770      	bx	lr
    1c88:	e000ed00 	.word	0xe000ed00

00001c8c <z_arm_int_lib_init>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1c8c:	4804      	ldr	r0, [pc, #16]	; (1ca0 <z_arm_int_lib_init+0x14>)
 * @return N/A
 */

void z_arm_int_lib_init(void)
{
	int irq = 0;
    1c8e:	2300      	movs	r3, #0
    1c90:	2120      	movs	r1, #32
    1c92:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    1c94:	3301      	adds	r3, #1
    1c96:	2b27      	cmp	r3, #39	; 0x27
    1c98:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1c9c:	d1f9      	bne.n	1c92 <z_arm_int_lib_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    1c9e:	4770      	bx	lr
    1ca0:	e000e100 	.word	0xe000e100

00001ca4 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
    1ca4:	b538      	push	{r3, r4, r5, lr}
    1ca6:	4605      	mov	r5, r0
	__asm__ volatile(
    1ca8:	f04f 0320 	mov.w	r3, #32
    1cac:	f3ef 8411 	mrs	r4, BASEPRI
    1cb0:	f383 8811 	msr	BASEPRI, r3
    1cb4:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
    1cb8:	f003 fc9e 	bl	55f8 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
    1cbc:	4b0a      	ldr	r3, [pc, #40]	; (1ce8 <z_impl_k_thread_abort+0x44>)
    1cbe:	689b      	ldr	r3, [r3, #8]
    1cc0:	42ab      	cmp	r3, r5
    1cc2:	d10b      	bne.n	1cdc <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
    1cc4:	4b09      	ldr	r3, [pc, #36]	; (1cec <z_impl_k_thread_abort+0x48>)
    1cc6:	685a      	ldr	r2, [r3, #4]
    1cc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
    1ccc:	b912      	cbnz	r2, 1cd4 <z_impl_k_thread_abort+0x30>
	z_check_stack_sentinel();

#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
    1cce:	4620      	mov	r0, r4
    1cd0:	f7ff fbd6 	bl	1480 <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1cd4:	685a      	ldr	r2, [r3, #4]
    1cd6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    1cda:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
    1cdc:	4620      	mov	r0, r4
}
    1cde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
    1ce2:	f003 bbf2 	b.w	54ca <z_reschedule_irqlock>
    1ce6:	bf00      	nop
    1ce8:	200003a8 	.word	0x200003a8
    1cec:	e000ed00 	.word	0xe000ed00

00001cf0 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    1cf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    1cf2:	4b08      	ldr	r3, [pc, #32]	; (1d14 <z_arm_configure_static_mpu_regions+0x24>)
    1cf4:	9301      	str	r3, [sp, #4]
    1cf6:	4b08      	ldr	r3, [pc, #32]	; (1d18 <z_arm_configure_static_mpu_regions+0x28>)
    1cf8:	9302      	str	r3, [sp, #8]
    1cfa:	4b08      	ldr	r3, [pc, #32]	; (1d1c <z_arm_configure_static_mpu_regions+0x2c>)
    1cfc:	9303      	str	r3, [sp, #12]

	/* Define a constant array of k_mem_partition objects
	 * to hold the configuration of the respective static
	 * MPU regions.
	 */
	const struct k_mem_partition *static_regions[] = {
    1cfe:	ab01      	add	r3, sp, #4
    1d00:	9300      	str	r3, [sp, #0]
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    1d02:	4a07      	ldr	r2, [pc, #28]	; (1d20 <z_arm_configure_static_mpu_regions+0x30>)
    1d04:	4b07      	ldr	r3, [pc, #28]	; (1d24 <z_arm_configure_static_mpu_regions+0x34>)
    1d06:	2101      	movs	r1, #1
    1d08:	4668      	mov	r0, sp
    1d0a:	f000 f8b5 	bl	1e78 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    1d0e:	b005      	add	sp, #20
    1d10:	f85d fb04 	ldr.w	pc, [sp], #4
    1d14:	20000000 	.word	0x20000000
    1d18:	00000000 	.word	0x00000000
    1d1c:	060b0000 	.word	0x060b0000
    1d20:	20000000 	.word	0x20000000
    1d24:	20010000 	.word	0x20010000

00001d28 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct k_mem_partition
	*regions[], u8_t regions_num, u8_t start_reg_index,
	bool do_sanity_check)
{
    1d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    1d2a:	4f2e      	ldr	r7, [pc, #184]	; (1de4 <mpu_configure_regions+0xbc>)
    1d2c:	460e      	mov	r6, r1
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    1d2e:	2100      	movs	r1, #0
    1d30:	42b1      	cmp	r1, r6
    1d32:	da22      	bge.n	1d7a <mpu_configure_regions+0x52>
		if (regions[i]->size == 0U) {
    1d34:	f850 c021 	ldr.w	ip, [r0, r1, lsl #2]
    1d38:	f8dc 4004 	ldr.w	r4, [ip, #4]
    1d3c:	2c00      	cmp	r4, #0
    1d3e:	d04f      	beq.n	1de0 <mpu_configure_regions+0xb8>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    1d40:	b1eb      	cbz	r3, 1d7e <mpu_configure_regions+0x56>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1)) == 0U)
    1d42:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    1d46:	ea14 0f0e 	tst.w	r4, lr
    1d4a:	d106      	bne.n	1d5a <mpu_configure_regions+0x32>
		&&
    1d4c:	2c1f      	cmp	r4, #31
    1d4e:	d904      	bls.n	1d5a <mpu_configure_regions+0x32>
		((part->start & (part->size - 1)) == 0U);
    1d50:	f8dc 5000 	ldr.w	r5, [ip]
		&&
    1d54:	ea1e 0f05 	tst.w	lr, r5
    1d58:	d011      	beq.n	1d7e <mpu_configure_regions+0x56>
				(!mpu_partition_is_valid(regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    1d5a:	2301      	movs	r3, #1
    1d5c:	f04f 0200 	mov.w	r2, #0
    1d60:	f363 0207 	bfi	r2, r3, #0, #8
    1d64:	4820      	ldr	r0, [pc, #128]	; (1de8 <mpu_configure_regions+0xc0>)
    1d66:	4b21      	ldr	r3, [pc, #132]	; (1dec <mpu_configure_regions+0xc4>)
    1d68:	1a1b      	subs	r3, r3, r0
    1d6a:	08db      	lsrs	r3, r3, #3
    1d6c:	4820      	ldr	r0, [pc, #128]	; (1df0 <mpu_configure_regions+0xc8>)
    1d6e:	f363 128f 	bfi	r2, r3, #6, #10
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    1d72:	f002 fd0b 	bl	478c <log_1>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, regions[i]);
    1d76:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    1d7a:	4610      	mov	r0, r2
    1d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 * to that power-of-two value.
 */
static inline u32_t size_to_mpu_rasr_size(u32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    1d7e:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, regions[i]);
    1d80:	b2d5      	uxtb	r5, r2
	region_conf.base = new_region->start;
    1d82:	f8dc 2000 	ldr.w	r2, [ip]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
    1d86:	f8dc c008 	ldr.w	ip, [ip, #8]
    1d8a:	d91a      	bls.n	1dc2 <mpu_configure_regions+0x9a>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    1d8c:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    1d90:	d819      	bhi.n	1dc6 <mpu_configure_regions+0x9e>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    1d92:	3c01      	subs	r4, #1
    1d94:	fab4 f484 	clz	r4, r4
    1d98:	f1c4 041f 	rsb	r4, r4, #31
    1d9c:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1)) {
    1d9e:	2d07      	cmp	r5, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    1da0:	ea4c 0404 	orr.w	r4, ip, r4
    1da4:	d911      	bls.n	1dca <mpu_configure_regions+0xa2>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    1da6:	2301      	movs	r3, #1
    1da8:	f04f 0200 	mov.w	r2, #0
    1dac:	f363 0207 	bfi	r2, r3, #0, #8
    1db0:	490d      	ldr	r1, [pc, #52]	; (1de8 <mpu_configure_regions+0xc0>)
    1db2:	4b0e      	ldr	r3, [pc, #56]	; (1dec <mpu_configure_regions+0xc4>)
    1db4:	480f      	ldr	r0, [pc, #60]	; (1df4 <mpu_configure_regions+0xcc>)
    1db6:	1a5b      	subs	r3, r3, r1
    1db8:	08db      	lsrs	r3, r3, #3
    1dba:	f363 128f 	bfi	r2, r3, #6, #10
    1dbe:	4629      	mov	r1, r5
    1dc0:	e7d7      	b.n	1d72 <mpu_configure_regions+0x4a>
		return REGION_32B;
    1dc2:	2408      	movs	r4, #8
    1dc4:	e7eb      	b.n	1d9e <mpu_configure_regions+0x76>
		return REGION_4G;
    1dc6:	243e      	movs	r4, #62	; 0x3e
    1dc8:	e7e9      	b.n	1d9e <mpu_configure_regions+0x76>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1dca:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    1dce:	432a      	orrs	r2, r5
    1dd0:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1dd4:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    1dd8:	60bd      	str	r5, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1dda:	60fa      	str	r2, [r7, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1ddc:	613c      	str	r4, [r7, #16]
		reg_index++;
    1dde:	1c6a      	adds	r2, r5, #1
	for (i = 0; i < regions_num; i++) {
    1de0:	3101      	adds	r1, #1
    1de2:	e7a5      	b.n	1d30 <mpu_configure_regions+0x8>
    1de4:	e000ed90 	.word	0xe000ed90
    1de8:	000058f8 	.word	0x000058f8
    1dec:	00005908 	.word	0x00005908
    1df0:	00006188 	.word	0x00006188
    1df4:	000061ab 	.word	0x000061ab

00001df8 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    1df8:	4b03      	ldr	r3, [pc, #12]	; (1e08 <arm_core_mpu_enable+0x10>)
    1dfa:	2205      	movs	r2, #5
    1dfc:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    1dfe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1e02:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    1e06:	4770      	bx	lr
    1e08:	e000ed90 	.word	0xe000ed90

00001e0c <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    1e0c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    1e10:	4b01      	ldr	r3, [pc, #4]	; (1e18 <arm_core_mpu_disable+0xc>)
    1e12:	2200      	movs	r2, #0
    1e14:	605a      	str	r2, [r3, #4]
}
    1e16:	4770      	bx	lr
    1e18:	e000ed90 	.word	0xe000ed90

00001e1c <arm_mpu_init>:
 */
static int arm_mpu_init(struct device *arg)
{
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    1e1c:	4913      	ldr	r1, [pc, #76]	; (1e6c <arm_mpu_init+0x50>)
    1e1e:	6808      	ldr	r0, [r1, #0]
    1e20:	2808      	cmp	r0, #8
{
    1e22:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    1e24:	d81e      	bhi.n	1e64 <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    1e26:	f7ff fff1 	bl	1e0c <arm_core_mpu_disable>
	MPU->RNR = index;
    1e2a:	4c11      	ldr	r4, [pc, #68]	; (1e70 <arm_mpu_init+0x54>)
    1e2c:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1e2e:	2200      	movs	r2, #0
    1e30:	4290      	cmp	r0, r2
    1e32:	f101 010c 	add.w	r1, r1, #12
    1e36:	d105      	bne.n	1e44 <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    1e38:	4b0e      	ldr	r3, [pc, #56]	; (1e74 <arm_mpu_init+0x58>)
    1e3a:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    1e3c:	f7ff ffdc 	bl	1df8 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    1e40:	2000      	movs	r0, #0
}
    1e42:	bd10      	pop	{r4, pc}
    1e44:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1e46:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    1e4a:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    1e4e:	4313      	orrs	r3, r2
    1e50:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1e54:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1e56:	f851 3c04 	ldr.w	r3, [r1, #-4]
    1e5a:	f043 0301 	orr.w	r3, r3, #1
    1e5e:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1e60:	3201      	adds	r2, #1
    1e62:	e7e5      	b.n	1e30 <arm_mpu_init+0x14>
		return -1;
    1e64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1e68:	e7eb      	b.n	1e42 <arm_mpu_init+0x26>
    1e6a:	bf00      	nop
    1e6c:	000059bc 	.word	0x000059bc
    1e70:	e000ed90 	.word	0xe000ed90
    1e74:	200003ee 	.word	0x200003ee

00001e78 <arm_core_mpu_configure_static_mpu_regions>:
{
    1e78:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    1e7a:	4c03      	ldr	r4, [pc, #12]	; (1e88 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    1e7c:	2301      	movs	r3, #1
    1e7e:	7822      	ldrb	r2, [r4, #0]
    1e80:	f7ff ff52 	bl	1d28 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    1e84:	7020      	strb	r0, [r4, #0]
}
    1e86:	bd10      	pop	{r4, pc}
    1e88:	200003ee 	.word	0x200003ee

00001e8c <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    1e8c:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    1e8e:	4a08      	ldr	r2, [pc, #32]	; (1eb0 <arm_core_mpu_configure_dynamic_mpu_regions+0x24>)
    1e90:	2300      	movs	r3, #0
    1e92:	7812      	ldrb	r2, [r2, #0]
    1e94:	f7ff ff48 	bl	1d28 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    1e98:	f110 0f16 	cmn.w	r0, #22
    1e9c:	d003      	beq.n	1ea6 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    1e9e:	4b05      	ldr	r3, [pc, #20]	; (1eb4 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
  MPU->RASR = 0U;
    1ea0:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    1ea2:	2807      	cmp	r0, #7
    1ea4:	dd00      	ble.n	1ea8 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
}
    1ea6:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    1ea8:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
    1eaa:	611a      	str	r2, [r3, #16]
    1eac:	3001      	adds	r0, #1
    1eae:	e7f8      	b.n	1ea2 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    1eb0:	200003ee 	.word	0x200003ee
    1eb4:	e000ed90 	.word	0xe000ed90

00001eb8 <z_prf>:
	*sptr = p;
	return i;
}

int z_prf(int (*func)(), void *dest, const char *format, va_list vargs)
{
    1eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1ebc:	b09f      	sub	sp, #124	; 0x7c
    1ebe:	461e      	mov	r6, r3
	struct zero_padding zero;
	VALTYPE val;

#define PUTC(c)	do { if ((*func)(c, dest) == EOF) return EOF; } while (false)

	count = 0;
    1ec0:	2300      	movs	r3, #0
{
    1ec2:	9001      	str	r0, [sp, #4]
    1ec4:	9104      	str	r1, [sp, #16]
	count = 0;
    1ec6:	9300      	str	r3, [sp, #0]

	while ((c = *format++)) {
    1ec8:	4613      	mov	r3, r2
    1eca:	f813 0b01 	ldrb.w	r0, [r3], #1
    1ece:	9305      	str	r3, [sp, #20]
    1ed0:	b158      	cbz	r0, 1eea <z_prf+0x32>
		if (c != '%') {
    1ed2:	2825      	cmp	r0, #37	; 0x25
    1ed4:	f000 8085 	beq.w	1fe2 <z_prf+0x12a>
			PUTC(c);
    1ed8:	9904      	ldr	r1, [sp, #16]
    1eda:	9b01      	ldr	r3, [sp, #4]
    1edc:	4798      	blx	r3
    1ede:	3001      	adds	r0, #1
    1ee0:	f040 840d 	bne.w	26fe <z_prf+0x846>
    1ee4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1ee8:	9300      	str	r3, [sp, #0]
		}
	}
	return count;

#undef PUTC
}
    1eea:	9800      	ldr	r0, [sp, #0]
    1eec:	b01f      	add	sp, #124	; 0x7c
    1eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				switch (c) {
    1ef2:	2c23      	cmp	r4, #35	; 0x23
    1ef4:	d06c      	beq.n	1fd0 <z_prf+0x118>
    1ef6:	d861      	bhi.n	1fbc <z_prf+0x104>
    1ef8:	2c00      	cmp	r4, #0
    1efa:	d0f6      	beq.n	1eea <z_prf+0x32>
					fspace = true;
    1efc:	2c20      	cmp	r4, #32
    1efe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1f00:	bf08      	it	eq
    1f02:	2301      	moveq	r3, #1
    1f04:	930a      	str	r3, [sp, #40]	; 0x28
					fminus = true;
    1f06:	f8cd 8014 	str.w	r8, [sp, #20]
			while (strchr("-+ #0", (c = *format++)) != NULL) {
    1f0a:	f8dd 8014 	ldr.w	r8, [sp, #20]
    1f0e:	48b9      	ldr	r0, [pc, #740]	; (21f4 <z_prf+0x33c>)
    1f10:	f818 4b01 	ldrb.w	r4, [r8], #1
    1f14:	4621      	mov	r1, r4
    1f16:	f003 f812 	bl	4f3e <strchr>
    1f1a:	2800      	cmp	r0, #0
    1f1c:	d1e9      	bne.n	1ef2 <z_prf+0x3a>
			if (c == '*') {
    1f1e:	2c2a      	cmp	r4, #42	; 0x2a
    1f20:	d166      	bne.n	1ff0 <z_prf+0x138>
				width = va_arg(vargs, int);
    1f22:	f856 3b04 	ldr.w	r3, [r6], #4
    1f26:	9307      	str	r3, [sp, #28]
				if (width < 0) {
    1f28:	2b00      	cmp	r3, #0
					width = -width;
    1f2a:	bfbf      	itttt	lt
    1f2c:	425b      	neglt	r3, r3
    1f2e:	9307      	strlt	r3, [sp, #28]
					fminus = true;
    1f30:	2301      	movlt	r3, #1
    1f32:	930b      	strlt	r3, [sp, #44]	; 0x2c
				c = *format++;
    1f34:	9b05      	ldr	r3, [sp, #20]
    1f36:	f898 4000 	ldrb.w	r4, [r8]
    1f3a:	f103 0802 	add.w	r8, r3, #2
			if (c == '.') {
    1f3e:	2c2e      	cmp	r4, #46	; 0x2e
    1f40:	d17c      	bne.n	203c <z_prf+0x184>
				if (c == '*') {
    1f42:	f898 3000 	ldrb.w	r3, [r8]
    1f46:	2b2a      	cmp	r3, #42	; 0x2a
    1f48:	d175      	bne.n	2036 <z_prf+0x17e>
					precision = va_arg(vargs, int);
    1f4a:	f856 5b04 	ldr.w	r5, [r6], #4
				c = *format++;
    1f4e:	f108 0801 	add.w	r8, r8, #1
				c = *format++;
    1f52:	f818 4b01 	ldrb.w	r4, [r8], #1
			if (strchr("hlz", c) != NULL) {
    1f56:	48a8      	ldr	r0, [pc, #672]	; (21f8 <z_prf+0x340>)
    1f58:	4621      	mov	r1, r4
    1f5a:	4627      	mov	r7, r4
    1f5c:	f002 ffef 	bl	4f3e <strchr>
    1f60:	2800      	cmp	r0, #0
    1f62:	d06e      	beq.n	2042 <z_prf+0x18a>
				c = *format++;
    1f64:	4643      	mov	r3, r8
				} else if (i == 'h' && c == 'h') {
    1f66:	2f68      	cmp	r7, #104	; 0x68
				c = *format++;
    1f68:	f813 4b01 	ldrb.w	r4, [r3], #1
    1f6c:	9305      	str	r3, [sp, #20]
				} else if (i == 'h' && c == 'h') {
    1f6e:	d107      	bne.n	1f80 <z_prf+0xc8>
    1f70:	2c68      	cmp	r4, #104	; 0x68
    1f72:	d105      	bne.n	1f80 <z_prf+0xc8>
					c = *format++;
    1f74:	f108 0302 	add.w	r3, r8, #2
    1f78:	f898 4001 	ldrb.w	r4, [r8, #1]
    1f7c:	9305      	str	r3, [sp, #20]
					i = 'H';
    1f7e:	2748      	movs	r7, #72	; 0x48
			switch (c) {
    1f80:	2c67      	cmp	r4, #103	; 0x67
    1f82:	d87c      	bhi.n	207e <z_prf+0x1c6>
    1f84:	2c65      	cmp	r4, #101	; 0x65
    1f86:	f080 8139 	bcs.w	21fc <z_prf+0x344>
    1f8a:	2c47      	cmp	r4, #71	; 0x47
    1f8c:	d85d      	bhi.n	204a <z_prf+0x192>
    1f8e:	2c45      	cmp	r4, #69	; 0x45
    1f90:	f080 8134 	bcs.w	21fc <z_prf+0x344>
    1f94:	2c00      	cmp	r4, #0
    1f96:	d0a8      	beq.n	1eea <z_prf+0x32>
    1f98:	2c25      	cmp	r4, #37	; 0x25
    1f9a:	f000 83ac 	beq.w	26f6 <z_prf+0x83e>
				PUTC('%');
    1f9e:	9904      	ldr	r1, [sp, #16]
    1fa0:	9b01      	ldr	r3, [sp, #4]
    1fa2:	2025      	movs	r0, #37	; 0x25
    1fa4:	4798      	blx	r3
    1fa6:	3001      	adds	r0, #1
    1fa8:	d09c      	beq.n	1ee4 <z_prf+0x2c>
				PUTC(c);
    1faa:	9904      	ldr	r1, [sp, #16]
    1fac:	9b01      	ldr	r3, [sp, #4]
    1fae:	4620      	mov	r0, r4
    1fb0:	4798      	blx	r3
    1fb2:	3001      	adds	r0, #1
    1fb4:	d096      	beq.n	1ee4 <z_prf+0x2c>
				count += 2;
    1fb6:	9b00      	ldr	r3, [sp, #0]
    1fb8:	3302      	adds	r3, #2
    1fba:	e3a2      	b.n	2702 <z_prf+0x84a>
				switch (c) {
    1fbc:	2c2d      	cmp	r4, #45	; 0x2d
    1fbe:	d00a      	beq.n	1fd6 <z_prf+0x11e>
    1fc0:	2c30      	cmp	r4, #48	; 0x30
    1fc2:	d00b      	beq.n	1fdc <z_prf+0x124>
					fplus = true;
    1fc4:	2c2b      	cmp	r4, #43	; 0x2b
    1fc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1fc8:	bf08      	it	eq
    1fca:	2301      	moveq	r3, #1
    1fcc:	9309      	str	r3, [sp, #36]	; 0x24
    1fce:	e79a      	b.n	1f06 <z_prf+0x4e>
					falt = true;
    1fd0:	2301      	movs	r3, #1
    1fd2:	9306      	str	r3, [sp, #24]
    1fd4:	e797      	b.n	1f06 <z_prf+0x4e>
					fminus = true;
    1fd6:	2301      	movs	r3, #1
    1fd8:	930b      	str	r3, [sp, #44]	; 0x2c
    1fda:	e794      	b.n	1f06 <z_prf+0x4e>
					fzero = true;
    1fdc:	2301      	movs	r3, #1
    1fde:	9308      	str	r3, [sp, #32]
    1fe0:	e791      	b.n	1f06 <z_prf+0x4e>
			fminus = fplus = fspace = falt = fzero = false;
    1fe2:	2300      	movs	r3, #0
    1fe4:	9308      	str	r3, [sp, #32]
    1fe6:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
    1fea:	930b      	str	r3, [sp, #44]	; 0x2c
    1fec:	9306      	str	r3, [sp, #24]
    1fee:	e78c      	b.n	1f0a <z_prf+0x52>
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    1ff0:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
			} else if (!isdigit(c)) {
    1ff4:	2b09      	cmp	r3, #9
				width = 0;
    1ff6:	9007      	str	r0, [sp, #28]
			} else if (!isdigit(c)) {
    1ff8:	d8a1      	bhi.n	1f3e <z_prf+0x86>
		i = 10 * i + *p++ - '0';
    1ffa:	220a      	movs	r2, #10
	while (isdigit(*p)) {
    1ffc:	f8dd 8014 	ldr.w	r8, [sp, #20]
    2000:	f818 4b01 	ldrb.w	r4, [r8], #1
    2004:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    2008:	2b09      	cmp	r3, #9
    200a:	d898      	bhi.n	1f3e <z_prf+0x86>
		i = 10 * i + *p++ - '0';
    200c:	9b07      	ldr	r3, [sp, #28]
    200e:	f8cd 8014 	str.w	r8, [sp, #20]
    2012:	fb02 4403 	mla	r4, r2, r3, r4
    2016:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
    201a:	9307      	str	r3, [sp, #28]
    201c:	e7ee      	b.n	1ffc <z_prf+0x144>
    201e:	fb01 3505 	mla	r5, r1, r5, r3
    2022:	3d30      	subs	r5, #48	; 0x30
    2024:	4690      	mov	r8, r2
	while (isdigit(*p)) {
    2026:	4642      	mov	r2, r8
    2028:	f812 3b01 	ldrb.w	r3, [r2], #1
    202c:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    2030:	2809      	cmp	r0, #9
    2032:	d9f4      	bls.n	201e <z_prf+0x166>
    2034:	e78d      	b.n	1f52 <z_prf+0x9a>
	int i = 0;
    2036:	2500      	movs	r5, #0
		i = 10 * i + *p++ - '0';
    2038:	210a      	movs	r1, #10
    203a:	e7f4      	b.n	2026 <z_prf+0x16e>
			precision = -1;
    203c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    2040:	e789      	b.n	1f56 <z_prf+0x9e>
    2042:	f8cd 8014 	str.w	r8, [sp, #20]
			i = 0;
    2046:	4607      	mov	r7, r0
    2048:	e79a      	b.n	1f80 <z_prf+0xc8>
			switch (c) {
    204a:	2c63      	cmp	r4, #99	; 0x63
    204c:	d05a      	beq.n	2104 <z_prf+0x24c>
    204e:	d820      	bhi.n	2092 <z_prf+0x1da>
    2050:	2c58      	cmp	r4, #88	; 0x58
    2052:	d1a4      	bne.n	1f9e <z_prf+0xe6>
				if (c == 'o') {
    2054:	2c6f      	cmp	r4, #111	; 0x6f
    2056:	f106 0904 	add.w	r9, r6, #4
    205a:	6831      	ldr	r1, [r6, #0]
    205c:	f040 831c 	bne.w	2698 <z_prf+0x7e0>
	if (alt_form) {
    2060:	9b06      	ldr	r3, [sp, #24]
    2062:	2b00      	cmp	r3, #0
    2064:	f000 830a 	beq.w	267c <z_prf+0x7c4>
		*buf++ = '0';
    2068:	2330      	movs	r3, #48	; 0x30
    206a:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		if (!value) {
    206e:	2900      	cmp	r1, #0
    2070:	f040 830f 	bne.w	2692 <z_prf+0x7da>
			*buf++ = 0;
    2074:	f88d 105d 	strb.w	r1, [sp, #93]	; 0x5d
			prefix = 0;
    2078:	4688      	mov	r8, r1
			return 1;
    207a:	2601      	movs	r6, #1
    207c:	e026      	b.n	20cc <z_prf+0x214>
			switch (c) {
    207e:	2c70      	cmp	r4, #112	; 0x70
    2080:	f000 82e7 	beq.w	2652 <z_prf+0x79a>
    2084:	d828      	bhi.n	20d8 <z_prf+0x220>
    2086:	2c6e      	cmp	r4, #110	; 0x6e
    2088:	f000 82d0 	beq.w	262c <z_prf+0x774>
    208c:	d8e2      	bhi.n	2054 <z_prf+0x19c>
    208e:	2c69      	cmp	r4, #105	; 0x69
    2090:	d185      	bne.n	1f9e <z_prf+0xe6>
				switch (i) {
    2092:	6834      	ldr	r4, [r6, #0]
	if (value < 0) {
    2094:	2c00      	cmp	r4, #0
    2096:	f106 0904 	add.w	r9, r6, #4
    209a:	f280 809c 	bge.w	21d6 <z_prf+0x31e>
		*buf++ = '-';
    209e:	232d      	movs	r3, #45	; 0x2d
    20a0:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
		value = -value;
    20a4:	4261      	negs	r1, r4
		*buf++ = ' ';
    20a6:	f10d 065d 	add.w	r6, sp, #93	; 0x5d
	return _to_x(buf, value, 10);
    20aa:	4630      	mov	r0, r6
    20ac:	220a      	movs	r2, #10
    20ae:	f002 ffac 	bl	500a <_to_x>
				if (fplus || fspace || val < 0) {
    20b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
	return (buf + _to_udec(buf, value)) - start;
    20b4:	4406      	add	r6, r0
    20b6:	a817      	add	r0, sp, #92	; 0x5c
    20b8:	1a36      	subs	r6, r6, r0
				if (fplus || fspace || val < 0) {
    20ba:	2b00      	cmp	r3, #0
    20bc:	f040 8324 	bne.w	2708 <z_prf+0x850>
    20c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    20c2:	2b00      	cmp	r3, #0
    20c4:	f040 8320 	bne.w	2708 <z_prf+0x850>
    20c8:	ea4f 78d4 	mov.w	r8, r4, lsr #31
			if (precision >= 0) {
    20cc:	2d00      	cmp	r5, #0
    20ce:	da22      	bge.n	2116 <z_prf+0x25e>
			zero.predot = zero.postdot = zero.trail = 0;
    20d0:	2500      	movs	r5, #0
    20d2:	462f      	mov	r7, r5
    20d4:	46aa      	mov	sl, r5
    20d6:	e0e5      	b.n	22a4 <z_prf+0x3ec>
			switch (c) {
    20d8:	2c75      	cmp	r4, #117	; 0x75
    20da:	d0bb      	beq.n	2054 <z_prf+0x19c>
    20dc:	2c78      	cmp	r4, #120	; 0x78
    20de:	d0b9      	beq.n	2054 <z_prf+0x19c>
    20e0:	2c73      	cmp	r4, #115	; 0x73
    20e2:	f47f af5c 	bne.w	1f9e <z_prf+0xe6>
				cptr = va_arg(vargs, char *);
    20e6:	46b1      	mov	r9, r6
					precision = INT_MAX;
    20e8:	2d00      	cmp	r5, #0
				cptr = va_arg(vargs, char *);
    20ea:	f859 3b04 	ldr.w	r3, [r9], #4
					precision = INT_MAX;
    20ee:	bfb8      	it	lt
    20f0:	f06f 4500 	mvnlt.w	r5, #2147483648	; 0x80000000
				for (clen = 0; clen < precision; clen++) {
    20f4:	2600      	movs	r6, #0
    20f6:	42b5      	cmp	r5, r6
    20f8:	f040 82bb 	bne.w	2672 <z_prf+0x7ba>
    20fc:	462e      	mov	r6, r5
    20fe:	2500      	movs	r5, #0
    2100:	46a8      	mov	r8, r5
    2102:	e009      	b.n	2118 <z_prf+0x260>
				buf[0] = va_arg(vargs, int);
    2104:	46b1      	mov	r9, r6
				break;
    2106:	f04f 0800 	mov.w	r8, #0
				buf[0] = va_arg(vargs, int);
    210a:	f859 3b04 	ldr.w	r3, [r9], #4
    210e:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
				clen = 1;
    2112:	2601      	movs	r6, #1
				break;
    2114:	4645      	mov	r5, r8
    2116:	ab17      	add	r3, sp, #92	; 0x5c
				zero_head = precision - clen + prefix;
    2118:	eb05 0208 	add.w	r2, r5, r8
			zero.predot = zero.postdot = zero.trail = 0;
    211c:	2500      	movs	r5, #0
				zero_head = precision - clen + prefix;
    211e:	1b92      	subs	r2, r2, r6
			zero.predot = zero.postdot = zero.trail = 0;
    2120:	462f      	mov	r7, r5
    2122:	46aa      	mov	sl, r5
			if (zero_head < 0) {
    2124:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
			width -= clen + zero_head;
    2128:	1991      	adds	r1, r2, r6
    212a:	9106      	str	r1, [sp, #24]
    212c:	9907      	ldr	r1, [sp, #28]
    212e:	1990      	adds	r0, r2, r6
    2130:	1a0c      	subs	r4, r1, r0
			if (!fminus && width > 0) {
    2132:	990b      	ldr	r1, [sp, #44]	; 0x2c
    2134:	b911      	cbnz	r1, 213c <z_prf+0x284>
    2136:	2c00      	cmp	r4, #0
    2138:	f300 8304 	bgt.w	2744 <z_prf+0x88c>
			while (prefix-- > 0) {
    213c:	eb03 0b08 	add.w	fp, r3, r8
    2140:	455b      	cmp	r3, fp
    2142:	f040 8301 	bne.w	2748 <z_prf+0x890>
			while (zero_head-- > 0) {
    2146:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
    214a:	f080 830d 	bcs.w	2768 <z_prf+0x8b0>
			clen -= prefix;
    214e:	eba6 0608 	sub.w	r6, r6, r8
			if (zero.predot) {
    2152:	f1ba 0f00 	cmp.w	sl, #0
    2156:	d011      	beq.n	217c <z_prf+0x2c4>
				c = *cptr;
    2158:	f89b 0000 	ldrb.w	r0, [fp]
				while (isdigit(c)) {
    215c:	eb0b 0806 	add.w	r8, fp, r6
    2160:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    2164:	2b09      	cmp	r3, #9
    2166:	eba8 060b 	sub.w	r6, r8, fp
    216a:	f240 8308 	bls.w	277e <z_prf+0x8c6>
    216e:	46d0      	mov	r8, sl
				while (zero.predot-- > 0) {
    2170:	f118 38ff 	adds.w	r8, r8, #4294967295	; 0xffffffff
    2174:	f080 830c 	bcs.w	2790 <z_prf+0x8d8>
				clen -= zero.predot;
    2178:	eba6 060a 	sub.w	r6, r6, sl
			if (zero.postdot) {
    217c:	b1af      	cbz	r7, 21aa <z_prf+0x2f2>
    217e:	eb0b 0806 	add.w	r8, fp, r6
					c = *cptr++;
    2182:	f81b ab01 	ldrb.w	sl, [fp], #1
					PUTC(c);
    2186:	9904      	ldr	r1, [sp, #16]
    2188:	9b01      	ldr	r3, [sp, #4]
    218a:	4650      	mov	r0, sl
    218c:	4798      	blx	r3
    218e:	3001      	adds	r0, #1
    2190:	f43f aea8 	beq.w	1ee4 <z_prf+0x2c>
				} while (c != '.');
    2194:	f1ba 0f2e 	cmp.w	sl, #46	; 0x2e
    2198:	eba8 060b 	sub.w	r6, r8, fp
    219c:	d1f1      	bne.n	2182 <z_prf+0x2ca>
				while (zero.postdot-- > 0) {
    219e:	46b8      	mov	r8, r7
    21a0:	f1b8 0f00 	cmp.w	r8, #0
    21a4:	f300 82fd 	bgt.w	27a2 <z_prf+0x8ea>
				clen -= zero.postdot;
    21a8:	1bf6      	subs	r6, r6, r7
			if (zero.trail) {
    21aa:	b195      	cbz	r5, 21d2 <z_prf+0x31a>
				c = *cptr;
    21ac:	f89b 0000 	ldrb.w	r0, [fp]
				while (isdigit(c) || c == '.') {
    21b0:	eb0b 0806 	add.w	r8, fp, r6
    21b4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    21b8:	2b09      	cmp	r3, #9
    21ba:	eba8 060b 	sub.w	r6, r8, fp
    21be:	f240 82fb 	bls.w	27b8 <z_prf+0x900>
    21c2:	282e      	cmp	r0, #46	; 0x2e
    21c4:	f000 82f8 	beq.w	27b8 <z_prf+0x900>
				while (zero.trail-- > 0) {
    21c8:	462f      	mov	r7, r5
    21ca:	2f00      	cmp	r7, #0
    21cc:	f300 82fd 	bgt.w	27ca <z_prf+0x912>
				clen -= zero.trail;
    21d0:	1b76      	subs	r6, r6, r5
    21d2:	445e      	add	r6, fp
    21d4:	e30c      	b.n	27f0 <z_prf+0x938>
	} else if (fplus) {
    21d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    21d8:	b123      	cbz	r3, 21e4 <z_prf+0x32c>
		*buf++ = '+';
    21da:	232b      	movs	r3, #43	; 0x2b
		*buf++ = ' ';
    21dc:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
    21e0:	4621      	mov	r1, r4
    21e2:	e760      	b.n	20a6 <z_prf+0x1ee>
	} else if (fspace) {
    21e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    21e6:	b10b      	cbz	r3, 21ec <z_prf+0x334>
		*buf++ = ' ';
    21e8:	2320      	movs	r3, #32
    21ea:	e7f7      	b.n	21dc <z_prf+0x324>
	} else if (fspace) {
    21ec:	4621      	mov	r1, r4
    21ee:	ae17      	add	r6, sp, #92	; 0x5c
    21f0:	e75b      	b.n	20aa <z_prf+0x1f2>
    21f2:	bf00      	nop
    21f4:	000061d1 	.word	0x000061d1
    21f8:	000061d7 	.word	0x000061d7
				u.d = va_arg(vargs, double);
    21fc:	f106 0907 	add.w	r9, r6, #7
    2200:	f029 0907 	bic.w	r9, r9, #7
    2204:	e8f9 2302 	ldrd	r2, r3, [r9], #8
	fract = (double_temp << 11) & ~HIGHBIT64;
    2208:	02d8      	lsls	r0, r3, #11
    220a:	ea40 5052 	orr.w	r0, r0, r2, lsr #21
    220e:	02d6      	lsls	r6, r2, #11
    2210:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
    2214:	9602      	str	r6, [sp, #8]
    2216:	9003      	str	r0, [sp, #12]
    2218:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
	if (sign) {
    221c:	2a00      	cmp	r2, #0
	exp = double_temp >> 52 & 0x7ff;
    221e:	f3c3 510a 	ubfx	r1, r3, #20, #11
	if (sign) {
    2222:	f173 0300 	sbcs.w	r3, r3, #0
	fract = (double_temp << 11) & ~HIGHBIT64;
    2226:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
	if (sign) {
    222a:	da43      	bge.n	22b4 <z_prf+0x3fc>
		*buf++ = '-';
    222c:	232d      	movs	r3, #45	; 0x2d
		*buf++ = ' ';
    222e:	f88d 305c 	strb.w	r3, [sp, #92]	; 0x5c
    2232:	f10d 075d 	add.w	r7, sp, #93	; 0x5d
	if (exp == 0x7ff) {
    2236:	f240 73ff 	movw	r3, #2047	; 0x7ff
    223a:	4299      	cmp	r1, r3
    223c:	d155      	bne.n	22ea <z_prf+0x432>
		if (!fract) {
    223e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    2242:	4313      	orrs	r3, r2
    2244:	f1a4 0441 	sub.w	r4, r4, #65	; 0x41
    2248:	f107 0b03 	add.w	fp, r7, #3
    224c:	d142      	bne.n	22d4 <z_prf+0x41c>
			if (isupper(c)) {
    224e:	2c19      	cmp	r4, #25
    2250:	d83a      	bhi.n	22c8 <z_prf+0x410>
				*buf++ = 'I';
    2252:	2349      	movs	r3, #73	; 0x49
    2254:	703b      	strb	r3, [r7, #0]
				*buf++ = 'N';
    2256:	234e      	movs	r3, #78	; 0x4e
    2258:	707b      	strb	r3, [r7, #1]
				*buf++ = 'F';
    225a:	2346      	movs	r3, #70	; 0x46
		*buf = 0;
    225c:	2500      	movs	r5, #0
		return buf - start;
    225e:	ae17      	add	r6, sp, #92	; 0x5c
				*buf++ = 'n';
    2260:	70bb      	strb	r3, [r7, #2]
		*buf = 0;
    2262:	70fd      	strb	r5, [r7, #3]
		return buf - start;
    2264:	ebab 0b06 	sub.w	fp, fp, r6
			zero.predot = zero.postdot = zero.trail = 0;
    2268:	462f      	mov	r7, r5
    226a:	46aa      	mov	sl, r5
				if (fplus || fspace || (buf[0] == '-')) {
    226c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    226e:	2b00      	cmp	r3, #0
    2270:	f040 81d9 	bne.w	2626 <z_prf+0x76e>
    2274:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    2276:	2b00      	cmp	r3, #0
    2278:	f040 81d5 	bne.w	2626 <z_prf+0x76e>
    227c:	f89d 805c 	ldrb.w	r8, [sp, #92]	; 0x5c
    2280:	f1a8 032d 	sub.w	r3, r8, #45	; 0x2d
    2284:	f1d3 0800 	rsbs	r8, r3, #0
    2288:	eb48 0803 	adc.w	r8, r8, r3
				if (!isdigit(buf[prefix])) {
    228c:	ab1e      	add	r3, sp, #120	; 0x78
    228e:	4443      	add	r3, r8
				clen += zero.predot + zero.postdot + zero.trail;
    2290:	44bb      	add	fp, r7
    2292:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
    2296:	3b30      	subs	r3, #48	; 0x30
    2298:	eb0b 060a 	add.w	r6, fp, sl
				if (!isdigit(buf[prefix])) {
    229c:	2b09      	cmp	r3, #9
				clen += zero.predot + zero.postdot + zero.trail;
    229e:	442e      	add	r6, r5
				if (!isdigit(buf[prefix])) {
    22a0:	f200 8237 	bhi.w	2712 <z_prf+0x85a>
			} else if (fzero) {
    22a4:	9b08      	ldr	r3, [sp, #32]
    22a6:	2b00      	cmp	r3, #0
    22a8:	f000 8236 	beq.w	2718 <z_prf+0x860>
    22ac:	9b07      	ldr	r3, [sp, #28]
    22ae:	1b9a      	subs	r2, r3, r6
    22b0:	ab17      	add	r3, sp, #92	; 0x5c
    22b2:	e737      	b.n	2124 <z_prf+0x26c>
	} else if (fplus) {
    22b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    22b6:	b10b      	cbz	r3, 22bc <z_prf+0x404>
		*buf++ = '+';
    22b8:	232b      	movs	r3, #43	; 0x2b
    22ba:	e7b8      	b.n	222e <z_prf+0x376>
	} else if (fspace) {
    22bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    22be:	b10b      	cbz	r3, 22c4 <z_prf+0x40c>
		*buf++ = ' ';
    22c0:	2320      	movs	r3, #32
    22c2:	e7b4      	b.n	222e <z_prf+0x376>
	} else if (fspace) {
    22c4:	af17      	add	r7, sp, #92	; 0x5c
    22c6:	e7b6      	b.n	2236 <z_prf+0x37e>
				*buf++ = 'i';
    22c8:	2369      	movs	r3, #105	; 0x69
    22ca:	703b      	strb	r3, [r7, #0]
				*buf++ = 'n';
    22cc:	236e      	movs	r3, #110	; 0x6e
    22ce:	707b      	strb	r3, [r7, #1]
				*buf++ = 'f';
    22d0:	2366      	movs	r3, #102	; 0x66
    22d2:	e7c3      	b.n	225c <z_prf+0x3a4>
			if (isupper(c)) {
    22d4:	2c19      	cmp	r4, #25
				*buf++ = 'N';
    22d6:	bf99      	ittee	ls
    22d8:	234e      	movls	r3, #78	; 0x4e
				*buf++ = 'A';
    22da:	2241      	movls	r2, #65	; 0x41
				*buf++ = 'n';
    22dc:	236e      	movhi	r3, #110	; 0x6e
				*buf++ = 'a';
    22de:	2261      	movhi	r2, #97	; 0x61
				*buf++ = 'N';
    22e0:	bf94      	ite	ls
    22e2:	703b      	strbls	r3, [r7, #0]
				*buf++ = 'n';
    22e4:	703b      	strbhi	r3, [r7, #0]
				*buf++ = 'a';
    22e6:	707a      	strb	r2, [r7, #1]
    22e8:	e7b8      	b.n	225c <z_prf+0x3a4>
	if ((exp | fract) != 0) {
    22ea:	9b02      	ldr	r3, [sp, #8]
    22ec:	9803      	ldr	r0, [sp, #12]
    22ee:	430b      	orrs	r3, r1
    22f0:	930c      	str	r3, [sp, #48]	; 0x30
    22f2:	17cb      	asrs	r3, r1, #31
    22f4:	4303      	orrs	r3, r0
    22f6:	930d      	str	r3, [sp, #52]	; 0x34
    22f8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
		c = 'f';
    22fc:	2c46      	cmp	r4, #70	; 0x46
    22fe:	bf08      	it	eq
    2300:	2466      	moveq	r4, #102	; 0x66
	if ((exp | fract) != 0) {
    2302:	4313      	orrs	r3, r2
    2304:	f000 80ff 	beq.w	2506 <z_prf+0x64e>
		if (exp == 0) {
    2308:	2900      	cmp	r1, #0
    230a:	f000 809f 	beq.w	244c <z_prf+0x594>
		fract |= HIGHBIT64;
    230e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    2310:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
    2314:	f2a1 38fe 	subw	r8, r1, #1022	; 0x3fe
		fract |= HIGHBIT64;
    2318:	9313      	str	r3, [sp, #76]	; 0x4c
    231a:	2600      	movs	r6, #0
	while (exp <= -3) {
    231c:	f118 0f02 	cmn.w	r8, #2
    2320:	f2c0 80a8 	blt.w	2474 <z_prf+0x5bc>
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    2324:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
    2328:	f04f 0b00 	mov.w	fp, #0
	while (exp > 0) {
    232c:	f1b8 0f00 	cmp.w	r8, #0
    2330:	f300 80cc 	bgt.w	24cc <z_prf+0x614>
		_rlrshift(&fract);
    2334:	a812      	add	r0, sp, #72	; 0x48
		exp++;
    2336:	f108 0801 	add.w	r8, r8, #1
		_rlrshift(&fract);
    233a:	f002 fe88 	bl	504e <_rlrshift>
	while (exp < (0 + 4)) {
    233e:	f1b8 0f04 	cmp.w	r8, #4
    2342:	d1f7      	bne.n	2334 <z_prf+0x47c>
		precision = 6;		/* Default precision if none given */
    2344:	2d00      	cmp	r5, #0
	if ((c == 'g') || (c == 'G')) {
    2346:	f004 03df 	and.w	r3, r4, #223	; 0xdf
		precision = 6;		/* Default precision if none given */
    234a:	bfb8      	it	lt
    234c:	2506      	movlt	r5, #6
	if ((c == 'g') || (c == 'G')) {
    234e:	2b47      	cmp	r3, #71	; 0x47
    2350:	f040 80e1 	bne.w	2516 <z_prf+0x65e>
		if (decexp < (-4 + 1) || decexp > precision) {
    2354:	1cf2      	adds	r2, r6, #3
    2356:	db02      	blt.n	235e <z_prf+0x4a6>
    2358:	42ae      	cmp	r6, r5
    235a:	f340 80d7 	ble.w	250c <z_prf+0x654>
			c += 'e' - 'g';
    235e:	3c02      	subs	r4, #2
    2360:	b2e4      	uxtb	r4, r4
			if (precision > 0) {
    2362:	2d00      	cmp	r5, #0
    2364:	f000 80dd 	beq.w	2522 <z_prf+0x66a>
		if (!falt && (precision > 0)) {
    2368:	9b06      	ldr	r3, [sp, #24]
				precision--;
    236a:	3d01      	subs	r5, #1
		if (!falt && (precision > 0)) {
    236c:	2b00      	cmp	r3, #0
    236e:	f040 80d8 	bne.w	2522 <z_prf+0x66a>
    2372:	2d00      	cmp	r5, #0
    2374:	bfd4      	ite	le
    2376:	f04f 0800 	movle.w	r8, #0
    237a:	f04f 0801 	movgt.w	r8, #1
	if (c == 'f') {
    237e:	2c66      	cmp	r4, #102	; 0x66
    2380:	f040 80d1 	bne.w	2526 <z_prf+0x66e>
		if (exp < 0) {
    2384:	eb16 0a05 	adds.w	sl, r6, r5
    2388:	f140 80d5 	bpl.w	2536 <z_prf+0x67e>
	digit_count = 16;
    238c:	2310      	movs	r3, #16
    238e:	9311      	str	r3, [sp, #68]	; 0x44
    2390:	2466      	movs	r4, #102	; 0x66
			exp = 0;
    2392:	f04f 0a00 	mov.w	sl, #0
	ltemp = 0x0800000000000000;
    2396:	2200      	movs	r2, #0
    2398:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    239c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
	while (exp--) {
    23a0:	f11a 3aff 	adds.w	sl, sl, #4294967295	; 0xffffffff
    23a4:	f080 80c9 	bcs.w	253a <z_prf+0x682>
	fract += ltemp;
    23a8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    23aa:	9a14      	ldr	r2, [sp, #80]	; 0x50
    23ac:	9915      	ldr	r1, [sp, #84]	; 0x54
    23ae:	189b      	adds	r3, r3, r2
    23b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    23b2:	eb41 0202 	adc.w	r2, r1, r2
    23b6:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
	if ((fract >> 32) & 0xF0000000) {
    23ba:	f002 4370 	and.w	r3, r2, #4026531840	; 0xf0000000
    23be:	930e      	str	r3, [sp, #56]	; 0x38
    23c0:	2300      	movs	r3, #0
    23c2:	930f      	str	r3, [sp, #60]	; 0x3c
    23c4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
    23c8:	4313      	orrs	r3, r2
    23ca:	d006      	beq.n	23da <z_prf+0x522>
		_ldiv5(&fract);
    23cc:	a812      	add	r0, sp, #72	; 0x48
    23ce:	f002 fe50 	bl	5072 <_ldiv5>
		_rlrshift(&fract);
    23d2:	a812      	add	r0, sp, #72	; 0x48
    23d4:	f002 fe3b 	bl	504e <_rlrshift>
		decexp++;
    23d8:	3601      	adds	r6, #1
	if (c == 'f') {
    23da:	2c66      	cmp	r4, #102	; 0x66
    23dc:	f040 80c7 	bne.w	256e <z_prf+0x6b6>
		if (decexp > 0) {
    23e0:	2e00      	cmp	r6, #0
    23e2:	f340 80b1 	ble.w	2548 <z_prf+0x690>
			while (decexp > 0 && digit_count > 0) {
    23e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
    23e8:	2b00      	cmp	r3, #0
    23ea:	dd07      	ble.n	23fc <z_prf+0x544>
				*buf++ = _get_digit(&fract, &digit_count);
    23ec:	a911      	add	r1, sp, #68	; 0x44
    23ee:	a812      	add	r0, sp, #72	; 0x48
    23f0:	f002 fe6b 	bl	50ca <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    23f4:	3e01      	subs	r6, #1
				*buf++ = _get_digit(&fract, &digit_count);
    23f6:	f807 0b01 	strb.w	r0, [r7], #1
			while (decexp > 0 && digit_count > 0) {
    23fa:	d1f4      	bne.n	23e6 <z_prf+0x52e>
			zp->predot = decexp;
    23fc:	46b2      	mov	sl, r6
    23fe:	46bb      	mov	fp, r7
			decexp = 0;
    2400:	2600      	movs	r6, #0
		if (falt || (precision > 0)) {
    2402:	9b06      	ldr	r3, [sp, #24]
    2404:	b913      	cbnz	r3, 240c <z_prf+0x554>
    2406:	2d00      	cmp	r5, #0
    2408:	f340 80af 	ble.w	256a <z_prf+0x6b2>
			*buf++ = '.';
    240c:	232e      	movs	r3, #46	; 0x2e
    240e:	f80b 3b01 	strb.w	r3, [fp], #1
		if (decexp < 0 && precision > 0) {
    2412:	2e00      	cmp	r6, #0
    2414:	f000 80a7 	beq.w	2566 <z_prf+0x6ae>
    2418:	2d00      	cmp	r5, #0
    241a:	f340 80a6 	ble.w	256a <z_prf+0x6b2>
			zp->postdot = -decexp;
    241e:	4277      	negs	r7, r6
    2420:	42af      	cmp	r7, r5
    2422:	bfa8      	it	ge
    2424:	462f      	movge	r7, r5
			precision -= zp->postdot;
    2426:	1bed      	subs	r5, r5, r7
		while (precision > 0 && digit_count > 0) {
    2428:	2d00      	cmp	r5, #0
    242a:	dd03      	ble.n	2434 <z_prf+0x57c>
    242c:	9b11      	ldr	r3, [sp, #68]	; 0x44
    242e:	2b00      	cmp	r3, #0
    2430:	f300 8091 	bgt.w	2556 <z_prf+0x69e>
	if (prune_zero) {
    2434:	f1b8 0f00 	cmp.w	r8, #0
    2438:	f040 80af 	bne.w	259a <z_prf+0x6e2>
	*buf = 0;
    243c:	2300      	movs	r3, #0
	return buf - start;
    243e:	ae17      	add	r6, sp, #92	; 0x5c
	*buf = 0;
    2440:	f88b 3000 	strb.w	r3, [fp]
	return buf - start;
    2444:	ebab 0b06 	sub.w	fp, fp, r6
    2448:	e710      	b.n	226c <z_prf+0x3b4>
				exp--;
    244a:	3901      	subs	r1, #1
			while (((fract <<= 1) & HIGHBIT64) == 0) {
    244c:	9b02      	ldr	r3, [sp, #8]
    244e:	18db      	adds	r3, r3, r3
    2450:	9302      	str	r3, [sp, #8]
    2452:	9b03      	ldr	r3, [sp, #12]
    2454:	415b      	adcs	r3, r3
    2456:	9303      	str	r3, [sp, #12]
    2458:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    245c:	2a00      	cmp	r2, #0
    245e:	f173 0300 	sbcs.w	r3, r3, #0
    2462:	daf2      	bge.n	244a <z_prf+0x592>
    2464:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    2468:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
    246c:	e74f      	b.n	230e <z_prf+0x456>
			_rlrshift(&fract);
    246e:	a812      	add	r0, sp, #72	; 0x48
    2470:	f002 fded 	bl	504e <_rlrshift>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
    2474:	e9dd 2c12 	ldrd	r2, ip, [sp, #72]	; 0x48
    2478:	f04f 0b00 	mov.w	fp, #0
    247c:	48b9      	ldr	r0, [pc, #740]	; (2764 <z_prf+0x8ac>)
    247e:	2100      	movs	r1, #0
    2480:	4559      	cmp	r1, fp
    2482:	bf08      	it	eq
    2484:	4560      	cmpeq	r0, ip
    2486:	f108 0801 	add.w	r8, r8, #1
    248a:	d3f0      	bcc.n	246e <z_prf+0x5b6>
		fract *= 5U;
    248c:	2005      	movs	r0, #5
    248e:	fba2 2300 	umull	r2, r3, r2, r0
    2492:	fb00 330c 	mla	r3, r0, ip, r3
    2496:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
		decexp--;
    249a:	46dc      	mov	ip, fp
    249c:	3e01      	subs	r6, #1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    249e:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
    24a2:	f04f 0b00 	mov.w	fp, #0
    24a6:	2100      	movs	r1, #0
    24a8:	458b      	cmp	fp, r1
    24aa:	bf08      	it	eq
    24ac:	459a      	cmpeq	sl, r3
    24ae:	d206      	bcs.n	24be <z_prf+0x606>
    24b0:	f1bc 0f00 	cmp.w	ip, #0
    24b4:	f43f af32 	beq.w	231c <z_prf+0x464>
    24b8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
    24bc:	e72e      	b.n	231c <z_prf+0x464>
			fract <<= 1;
    24be:	1892      	adds	r2, r2, r2
    24c0:	415b      	adcs	r3, r3
			exp--;
    24c2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    24c6:	f04f 0c01 	mov.w	ip, #1
    24ca:	e7ec      	b.n	24a6 <z_prf+0x5ee>
		_ldiv5(&fract);
    24cc:	a812      	add	r0, sp, #72	; 0x48
    24ce:	f002 fdd0 	bl	5072 <_ldiv5>
		exp--;
    24d2:	e9dd 1012 	ldrd	r1, r0, [sp, #72]	; 0x48
    24d6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		decexp++;
    24da:	3601      	adds	r6, #1
    24dc:	f04f 0c00 	mov.w	ip, #0
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    24e0:	2300      	movs	r3, #0
    24e2:	459b      	cmp	fp, r3
    24e4:	bf08      	it	eq
    24e6:	4582      	cmpeq	sl, r0
    24e8:	d206      	bcs.n	24f8 <z_prf+0x640>
    24ea:	f1bc 0f00 	cmp.w	ip, #0
    24ee:	f43f af1d 	beq.w	232c <z_prf+0x474>
    24f2:	e9cd 1012 	strd	r1, r0, [sp, #72]	; 0x48
    24f6:	e719      	b.n	232c <z_prf+0x474>
			fract <<= 1;
    24f8:	1849      	adds	r1, r1, r1
    24fa:	4140      	adcs	r0, r0
			exp--;
    24fc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    2500:	f04f 0c01 	mov.w	ip, #1
    2504:	e7ec      	b.n	24e0 <z_prf+0x628>
	if ((exp | fract) != 0) {
    2506:	2600      	movs	r6, #0
    2508:	46b0      	mov	r8, r6
    250a:	e713      	b.n	2334 <z_prf+0x47c>
		if (!falt && (precision > 0)) {
    250c:	9b06      	ldr	r3, [sp, #24]
			precision -= decexp;
    250e:	1bad      	subs	r5, r5, r6
		if (!falt && (precision > 0)) {
    2510:	b923      	cbnz	r3, 251c <z_prf+0x664>
			c = 'f';
    2512:	2466      	movs	r4, #102	; 0x66
    2514:	e72d      	b.n	2372 <z_prf+0x4ba>
	prune_zero = false;		/* Assume trailing 0's allowed     */
    2516:	f04f 0800 	mov.w	r8, #0
    251a:	e730      	b.n	237e <z_prf+0x4c6>
    251c:	f04f 0800 	mov.w	r8, #0
    2520:	e730      	b.n	2384 <z_prf+0x4cc>
    2522:	f04f 0800 	mov.w	r8, #0
		exp = precision + 1;
    2526:	f105 0a01 	add.w	sl, r5, #1
	digit_count = 16;
    252a:	2310      	movs	r3, #16
    252c:	459a      	cmp	sl, r3
    252e:	9311      	str	r3, [sp, #68]	; 0x44
	if (exp > 16) {
    2530:	bfa8      	it	ge
    2532:	469a      	movge	sl, r3
    2534:	e72f      	b.n	2396 <z_prf+0x4de>
		if (exp < 0) {
    2536:	2466      	movs	r4, #102	; 0x66
    2538:	e7f7      	b.n	252a <z_prf+0x672>
		_ldiv5(&ltemp);
    253a:	a814      	add	r0, sp, #80	; 0x50
    253c:	f002 fd99 	bl	5072 <_ldiv5>
		_rlrshift(&ltemp);
    2540:	a814      	add	r0, sp, #80	; 0x50
    2542:	f002 fd84 	bl	504e <_rlrshift>
    2546:	e72b      	b.n	23a0 <z_prf+0x4e8>
			*buf++ = '0';
    2548:	46bb      	mov	fp, r7
    254a:	2330      	movs	r3, #48	; 0x30
    254c:	f80b 3b01 	strb.w	r3, [fp], #1
			zero.predot = zero.postdot = zero.trail = 0;
    2550:	f04f 0a00 	mov.w	sl, #0
    2554:	e755      	b.n	2402 <z_prf+0x54a>
			*buf++ = _get_digit(&fract, &digit_count);
    2556:	a911      	add	r1, sp, #68	; 0x44
    2558:	a812      	add	r0, sp, #72	; 0x48
    255a:	f002 fdb6 	bl	50ca <_get_digit>
			precision--;
    255e:	3d01      	subs	r5, #1
			*buf++ = _get_digit(&fract, &digit_count);
    2560:	f80b 0b01 	strb.w	r0, [fp], #1
			precision--;
    2564:	e760      	b.n	2428 <z_prf+0x570>
			zero.predot = zero.postdot = zero.trail = 0;
    2566:	4637      	mov	r7, r6
    2568:	e75e      	b.n	2428 <z_prf+0x570>
    256a:	2700      	movs	r7, #0
    256c:	e762      	b.n	2434 <z_prf+0x57c>
		*buf = _get_digit(&fract, &digit_count);
    256e:	a911      	add	r1, sp, #68	; 0x44
    2570:	a812      	add	r0, sp, #72	; 0x48
    2572:	f002 fdaa 	bl	50ca <_get_digit>
		if (falt || (precision > 0)) {
    2576:	9b06      	ldr	r3, [sp, #24]
		*buf = _get_digit(&fract, &digit_count);
    2578:	7038      	strb	r0, [r7, #0]
		if (*buf++ != '0') {
    257a:	2830      	cmp	r0, #48	; 0x30
			decexp--;
    257c:	bf18      	it	ne
    257e:	f106 36ff 	addne.w	r6, r6, #4294967295	; 0xffffffff
		if (falt || (precision > 0)) {
    2582:	2b00      	cmp	r3, #0
    2584:	d13b      	bne.n	25fe <z_prf+0x746>
    2586:	2d00      	cmp	r5, #0
    2588:	dc39      	bgt.n	25fe <z_prf+0x746>
		if (*buf++ != '0') {
    258a:	f107 0b01 	add.w	fp, r7, #1
	if (prune_zero) {
    258e:	f1b8 0f00 	cmp.w	r8, #0
    2592:	d045      	beq.n	2620 <z_prf+0x768>
			zero.predot = zero.postdot = zero.trail = 0;
    2594:	f04f 0a00 	mov.w	sl, #0
    2598:	4657      	mov	r7, sl
		while (*--buf == '0')
    259a:	465b      	mov	r3, fp
    259c:	f81b 2d01 	ldrb.w	r2, [fp, #-1]!
    25a0:	2a30      	cmp	r2, #48	; 0x30
    25a2:	d0fa      	beq.n	259a <z_prf+0x6e2>
		if (*buf != '.') {
    25a4:	2a2e      	cmp	r2, #46	; 0x2e
    25a6:	bf18      	it	ne
    25a8:	469b      	movne	fp, r3
    25aa:	2500      	movs	r5, #0
	if ((c == 'e') || (c == 'E')) {
    25ac:	f004 03df 	and.w	r3, r4, #223	; 0xdf
    25b0:	2b45      	cmp	r3, #69	; 0x45
    25b2:	f47f af43 	bne.w	243c <z_prf+0x584>
		if (decexp < 0) {
    25b6:	2e00      	cmp	r6, #0
		*buf++ = c;
    25b8:	465a      	mov	r2, fp
			decexp = -decexp;
    25ba:	bfba      	itte	lt
    25bc:	4276      	neglt	r6, r6
			*buf++ = '-';
    25be:	232d      	movlt	r3, #45	; 0x2d
			*buf++ = '+';
    25c0:	232b      	movge	r3, #43	; 0x2b
		if (decexp >= 100) {
    25c2:	2e63      	cmp	r6, #99	; 0x63
		*buf++ = c;
    25c4:	f802 4b02 	strb.w	r4, [r2], #2
			*buf++ = '-';
    25c8:	f88b 3001 	strb.w	r3, [fp, #1]
		if (decexp >= 100) {
    25cc:	dd0a      	ble.n	25e4 <z_prf+0x72c>
			*buf++ = (decexp / 100) + '0';
    25ce:	2164      	movs	r1, #100	; 0x64
    25d0:	fb96 f3f1 	sdiv	r3, r6, r1
    25d4:	f103 0030 	add.w	r0, r3, #48	; 0x30
    25d8:	f10b 0203 	add.w	r2, fp, #3
    25dc:	f88b 0002 	strb.w	r0, [fp, #2]
			decexp %= 100;
    25e0:	fb01 6613 	mls	r6, r1, r3, r6
		*buf++ = (decexp / 10) + '0';
    25e4:	210a      	movs	r1, #10
    25e6:	4693      	mov	fp, r2
    25e8:	fb96 f3f1 	sdiv	r3, r6, r1
		decexp %= 10;
    25ec:	fb01 6613 	mls	r6, r1, r3, r6
		*buf++ = (decexp / 10) + '0';
    25f0:	f103 0030 	add.w	r0, r3, #48	; 0x30
		*buf++ = decexp + '0';
    25f4:	3630      	adds	r6, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    25f6:	f80b 0b02 	strb.w	r0, [fp], #2
		*buf++ = decexp + '0';
    25fa:	7056      	strb	r6, [r2, #1]
    25fc:	e71e      	b.n	243c <z_prf+0x584>
			*buf++ = '.';
    25fe:	232e      	movs	r3, #46	; 0x2e
    2600:	f107 0b02 	add.w	fp, r7, #2
    2604:	707b      	strb	r3, [r7, #1]
		while (precision > 0 && digit_count > 0) {
    2606:	2d00      	cmp	r5, #0
    2608:	ddc1      	ble.n	258e <z_prf+0x6d6>
    260a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    260c:	2b00      	cmp	r3, #0
    260e:	ddbe      	ble.n	258e <z_prf+0x6d6>
			*buf++ = _get_digit(&fract, &digit_count);
    2610:	a911      	add	r1, sp, #68	; 0x44
    2612:	a812      	add	r0, sp, #72	; 0x48
    2614:	f002 fd59 	bl	50ca <_get_digit>
			precision--;
    2618:	3d01      	subs	r5, #1
			*buf++ = _get_digit(&fract, &digit_count);
    261a:	f80b 0b01 	strb.w	r0, [fp], #1
			precision--;
    261e:	e7f2      	b.n	2606 <z_prf+0x74e>
			zero.predot = zero.postdot = zero.trail = 0;
    2620:	46c2      	mov	sl, r8
    2622:	4647      	mov	r7, r8
    2624:	e7c2      	b.n	25ac <z_prf+0x6f4>
					prefix = 1;
    2626:	f04f 0801 	mov.w	r8, #1
    262a:	e62f      	b.n	228c <z_prf+0x3d4>
				switch (i) {
    262c:	46b1      	mov	r9, r6
    262e:	2f68      	cmp	r7, #104	; 0x68
    2630:	f859 3b04 	ldr.w	r3, [r9], #4
    2634:	d005      	beq.n	2642 <z_prf+0x78a>
    2636:	dc01      	bgt.n	263c <z_prf+0x784>
    2638:	2f48      	cmp	r7, #72	; 0x48
    263a:	d007      	beq.n	264c <z_prf+0x794>
					*va_arg(vargs, int *) = count;
    263c:	9a00      	ldr	r2, [sp, #0]
    263e:	601a      	str	r2, [r3, #0]
					break;
    2640:	e001      	b.n	2646 <z_prf+0x78e>
					*va_arg(vargs, short *) = count;
    2642:	9a00      	ldr	r2, [sp, #0]
    2644:	801a      	strh	r2, [r3, #0]
				continue;
    2646:	464e      	mov	r6, r9
    2648:	9a05      	ldr	r2, [sp, #20]
    264a:	e43d      	b.n	1ec8 <z_prf+0x10>
					*va_arg(vargs, char *) = count;
    264c:	9a00      	ldr	r2, [sp, #0]
    264e:	701a      	strb	r2, [r3, #0]
					break;
    2650:	e7f9      	b.n	2646 <z_prf+0x78e>
				val = (uintptr_t) va_arg(vargs, void *);
    2652:	46b1      	mov	r9, r6
		*buf++ = '0';
    2654:	f647 0330 	movw	r3, #30768	; 0x7830
	len = _to_x(buf, value, 16);
    2658:	2210      	movs	r2, #16
    265a:	f859 1b04 	ldr.w	r1, [r9], #4
		*buf++ = '0';
    265e:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
	len = _to_x(buf, value, 16);
    2662:	f10d 005e 	add.w	r0, sp, #94	; 0x5e
    2666:	f002 fcd0 	bl	500a <_to_x>
				prefix = 2;
    266a:	f04f 0802 	mov.w	r8, #2
	return len + (buf - buf0);
    266e:	1c86      	adds	r6, r0, #2
				break;
    2670:	e52c      	b.n	20cc <z_prf+0x214>
					if (cptr[clen] == '\0') {
    2672:	5d9a      	ldrb	r2, [r3, r6]
    2674:	2a00      	cmp	r2, #0
    2676:	d04a      	beq.n	270e <z_prf+0x856>
				for (clen = 0; clen < precision; clen++) {
    2678:	3601      	adds	r6, #1
    267a:	e53c      	b.n	20f6 <z_prf+0x23e>
	if (alt_form) {
    267c:	ac17      	add	r4, sp, #92	; 0x5c
	return (buf - buf0) + _to_x(buf, value, 8);
    267e:	2208      	movs	r2, #8
    2680:	4620      	mov	r0, r4
    2682:	f002 fcc2 	bl	500a <_to_x>
    2686:	ae17      	add	r6, sp, #92	; 0x5c
    2688:	1ba6      	subs	r6, r4, r6
    268a:	4406      	add	r6, r0
			prefix = 0;
    268c:	f04f 0800 	mov.w	r8, #0
    2690:	e51c      	b.n	20cc <z_prf+0x214>
		*buf++ = '0';
    2692:	f10d 045d 	add.w	r4, sp, #93	; 0x5d
    2696:	e7f2      	b.n	267e <z_prf+0x7c6>
				} else if (c == 'u') {
    2698:	2c75      	cmp	r4, #117	; 0x75
    269a:	d105      	bne.n	26a8 <z_prf+0x7f0>
	return _to_x(buf, value, 10);
    269c:	220a      	movs	r2, #10
    269e:	a817      	add	r0, sp, #92	; 0x5c
    26a0:	f002 fcb3 	bl	500a <_to_x>
    26a4:	4606      	mov	r6, r0
    26a6:	e7f1      	b.n	268c <z_prf+0x7d4>
	if (alt_form) {
    26a8:	9b06      	ldr	r3, [sp, #24]
    26aa:	b193      	cbz	r3, 26d2 <z_prf+0x81a>
		*buf++ = '0';
    26ac:	f647 0330 	movw	r3, #30768	; 0x7830
    26b0:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
		*buf++ = 'x';
    26b4:	f10d 075e 	add.w	r7, sp, #94	; 0x5e
	len = _to_x(buf, value, 16);
    26b8:	2210      	movs	r2, #16
    26ba:	4638      	mov	r0, r7
    26bc:	f002 fca5 	bl	500a <_to_x>
	if (prefix == 'X') {
    26c0:	2c58      	cmp	r4, #88	; 0x58
    26c2:	d008      	beq.n	26d6 <z_prf+0x81e>
	return len + (buf - buf0);
    26c4:	ae17      	add	r6, sp, #92	; 0x5c
						prefix = 2;
    26c6:	9b06      	ldr	r3, [sp, #24]
	return len + (buf - buf0);
    26c8:	1bbe      	subs	r6, r7, r6
    26ca:	4406      	add	r6, r0
						prefix = 2;
    26cc:	ea4f 0843 	mov.w	r8, r3, lsl #1
    26d0:	e4fc      	b.n	20cc <z_prf+0x214>
	if (alt_form) {
    26d2:	af17      	add	r7, sp, #92	; 0x5c
    26d4:	e7f0      	b.n	26b8 <z_prf+0x800>
    26d6:	aa17      	add	r2, sp, #92	; 0x5c
		if (*buf >= 'a' && *buf <= 'z') {
    26d8:	f812 3b01 	ldrb.w	r3, [r2], #1
    26dc:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
    26e0:	2919      	cmp	r1, #25
    26e2:	d803      	bhi.n	26ec <z_prf+0x834>
			*buf += 'A' - 'a';
    26e4:	3b20      	subs	r3, #32
    26e6:	f802 3c01 	strb.w	r3, [r2, #-1]
    26ea:	e7f5      	b.n	26d8 <z_prf+0x820>
	} while (*buf++);
    26ec:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    26f0:	2b00      	cmp	r3, #0
    26f2:	d1f1      	bne.n	26d8 <z_prf+0x820>
    26f4:	e7e6      	b.n	26c4 <z_prf+0x80c>
				PUTC('%');
    26f6:	9904      	ldr	r1, [sp, #16]
    26f8:	4620      	mov	r0, r4
    26fa:	f7ff bbee 	b.w	1eda <z_prf+0x22>
				count++;
    26fe:	9b00      	ldr	r3, [sp, #0]
    2700:	3301      	adds	r3, #1
				count += 2;
    2702:	9300      	str	r3, [sp, #0]
				continue;
    2704:	46b1      	mov	r9, r6
    2706:	e79e      	b.n	2646 <z_prf+0x78e>
					prefix = 1;
    2708:	f04f 0801 	mov.w	r8, #1
    270c:	e4de      	b.n	20cc <z_prf+0x214>
    270e:	4615      	mov	r5, r2
    2710:	e4f6      	b.n	2100 <z_prf+0x248>
			cptr = buf;
    2712:	ab17      	add	r3, sp, #92	; 0x5c
				zero_head = 0;
    2714:	2200      	movs	r2, #0
    2716:	e507      	b.n	2128 <z_prf+0x270>
    2718:	ab17      	add	r3, sp, #92	; 0x5c
    271a:	9a08      	ldr	r2, [sp, #32]
    271c:	e504      	b.n	2128 <z_prf+0x270>
    271e:	e9cd 3207 	strd	r3, r2, [sp, #28]
					PUTC(' ');
    2722:	9904      	ldr	r1, [sp, #16]
    2724:	9b01      	ldr	r3, [sp, #4]
    2726:	2020      	movs	r0, #32
    2728:	4798      	blx	r3
    272a:	3001      	adds	r0, #1
    272c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
    2730:	f43f abd8 	beq.w	1ee4 <z_prf+0x2c>
				while (width-- > 0) {
    2734:	f11b 3bff 	adds.w	fp, fp, #4294967295	; 0xffffffff
    2738:	d2f1      	bcs.n	271e <z_prf+0x866>
				count += width;
    273a:	9900      	ldr	r1, [sp, #0]
    273c:	4421      	add	r1, r4
    273e:	9100      	str	r1, [sp, #0]
				while (width-- > 0) {
    2740:	465c      	mov	r4, fp
    2742:	e4fb      	b.n	213c <z_prf+0x284>
    2744:	46a3      	mov	fp, r4
    2746:	e7f5      	b.n	2734 <z_prf+0x87c>
				PUTC(*cptr++);
    2748:	f813 0b01 	ldrb.w	r0, [r3], #1
    274c:	9307      	str	r3, [sp, #28]
    274e:	9904      	ldr	r1, [sp, #16]
    2750:	9b01      	ldr	r3, [sp, #4]
    2752:	9208      	str	r2, [sp, #32]
    2754:	4798      	blx	r3
    2756:	3001      	adds	r0, #1
    2758:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
    275c:	f47f acf0 	bne.w	2140 <z_prf+0x288>
    2760:	f7ff bbc0 	b.w	1ee4 <z_prf+0x2c>
    2764:	33333332 	.word	0x33333332
				PUTC('0');
    2768:	9904      	ldr	r1, [sp, #16]
    276a:	9b01      	ldr	r3, [sp, #4]
    276c:	9207      	str	r2, [sp, #28]
    276e:	2030      	movs	r0, #48	; 0x30
    2770:	4798      	blx	r3
    2772:	3001      	adds	r0, #1
    2774:	9a07      	ldr	r2, [sp, #28]
    2776:	f47f ace6 	bne.w	2146 <z_prf+0x28e>
    277a:	f7ff bbb3 	b.w	1ee4 <z_prf+0x2c>
					PUTC(c);
    277e:	9904      	ldr	r1, [sp, #16]
    2780:	9b01      	ldr	r3, [sp, #4]
    2782:	4798      	blx	r3
    2784:	3001      	adds	r0, #1
    2786:	f43f abad 	beq.w	1ee4 <z_prf+0x2c>
					c = *++cptr;
    278a:	f81b 0f01 	ldrb.w	r0, [fp, #1]!
    278e:	e4e7      	b.n	2160 <z_prf+0x2a8>
					PUTC('0');
    2790:	9904      	ldr	r1, [sp, #16]
    2792:	9b01      	ldr	r3, [sp, #4]
    2794:	2030      	movs	r0, #48	; 0x30
    2796:	4798      	blx	r3
    2798:	3001      	adds	r0, #1
    279a:	f47f ace9 	bne.w	2170 <z_prf+0x2b8>
    279e:	f7ff bba1 	b.w	1ee4 <z_prf+0x2c>
					PUTC('0');
    27a2:	9904      	ldr	r1, [sp, #16]
    27a4:	9b01      	ldr	r3, [sp, #4]
    27a6:	2030      	movs	r0, #48	; 0x30
    27a8:	4798      	blx	r3
    27aa:	3001      	adds	r0, #1
    27ac:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    27b0:	f47f acf6 	bne.w	21a0 <z_prf+0x2e8>
    27b4:	f7ff bb96 	b.w	1ee4 <z_prf+0x2c>
					PUTC(c);
    27b8:	9904      	ldr	r1, [sp, #16]
    27ba:	9b01      	ldr	r3, [sp, #4]
    27bc:	4798      	blx	r3
    27be:	3001      	adds	r0, #1
    27c0:	f43f ab90 	beq.w	1ee4 <z_prf+0x2c>
					c = *++cptr;
    27c4:	f81b 0f01 	ldrb.w	r0, [fp, #1]!
    27c8:	e4f4      	b.n	21b4 <z_prf+0x2fc>
					PUTC('0');
    27ca:	9904      	ldr	r1, [sp, #16]
    27cc:	9b01      	ldr	r3, [sp, #4]
    27ce:	2030      	movs	r0, #48	; 0x30
    27d0:	4798      	blx	r3
    27d2:	3001      	adds	r0, #1
    27d4:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
    27d8:	f47f acf7 	bne.w	21ca <z_prf+0x312>
    27dc:	f7ff bb82 	b.w	1ee4 <z_prf+0x2c>
				PUTC(*cptr++);
    27e0:	9904      	ldr	r1, [sp, #16]
    27e2:	f81b 0b01 	ldrb.w	r0, [fp], #1
    27e6:	9b01      	ldr	r3, [sp, #4]
    27e8:	4798      	blx	r3
    27ea:	3001      	adds	r0, #1
    27ec:	f43f ab7a 	beq.w	1ee4 <z_prf+0x2c>
    27f0:	eba6 030b 	sub.w	r3, r6, fp
			while (clen-- > 0) {
    27f4:	2b00      	cmp	r3, #0
    27f6:	dcf3      	bgt.n	27e0 <z_prf+0x928>
			count += clen;
    27f8:	9b00      	ldr	r3, [sp, #0]
    27fa:	9a06      	ldr	r2, [sp, #24]
			if (width > 0) {
    27fc:	2c00      	cmp	r4, #0
			count += clen;
    27fe:	4413      	add	r3, r2
    2800:	9300      	str	r3, [sp, #0]
			if (width > 0) {
    2802:	f77f af20 	ble.w	2646 <z_prf+0x78e>
    2806:	4625      	mov	r5, r4
    2808:	e006      	b.n	2818 <z_prf+0x960>
					PUTC(' ');
    280a:	9904      	ldr	r1, [sp, #16]
    280c:	9b01      	ldr	r3, [sp, #4]
    280e:	2020      	movs	r0, #32
    2810:	4798      	blx	r3
    2812:	3001      	adds	r0, #1
    2814:	f43f ab66 	beq.w	1ee4 <z_prf+0x2c>
				while (width-- > 0) {
    2818:	f115 35ff 	adds.w	r5, r5, #4294967295	; 0xffffffff
    281c:	d2f5      	bcs.n	280a <z_prf+0x952>
				count += width;
    281e:	9b00      	ldr	r3, [sp, #0]
    2820:	4423      	add	r3, r4
    2822:	9300      	str	r3, [sp, #0]
    2824:	e70f      	b.n	2646 <z_prf+0x78e>
    2826:	bf00      	nop

00002828 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    2828:	4b01      	ldr	r3, [pc, #4]	; (2830 <__stdout_hook_install+0x8>)
    282a:	6018      	str	r0, [r3, #0]
}
    282c:	4770      	bx	lr
    282e:	bf00      	nop
    2830:	20002508 	.word	0x20002508

00002834 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *_MLIBC_RESTRICT s, size_t len,
	     const char *_MLIBC_RESTRICT format, ...)
{
    2834:	b40c      	push	{r2, r3}
    2836:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
    2838:	b909      	cbnz	r1, 283e <snprintf+0xa>
		s = &dummy; /* write final NUL to dummy, can't change *s */
    283a:	f10d 0003 	add.w	r0, sp, #3
	}

	p.ptr = s;
	p.len = (int) len;
    283e:	e9cd 0102 	strd	r0, r1, [sp, #8]

	va_start(vargs, format);
    2842:	ab07      	add	r3, sp, #28
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
    2844:	9a06      	ldr	r2, [sp, #24]
    2846:	4806      	ldr	r0, [pc, #24]	; (2860 <snprintf+0x2c>)
	va_start(vargs, format);
    2848:	9301      	str	r3, [sp, #4]
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
    284a:	a902      	add	r1, sp, #8
    284c:	f7ff fb34 	bl	1eb8 <z_prf>
	va_end(vargs);

	*(p.ptr) = 0;
    2850:	9b02      	ldr	r3, [sp, #8]
    2852:	2200      	movs	r2, #0
    2854:	701a      	strb	r2, [r3, #0]
	return r;
}
    2856:	b005      	add	sp, #20
    2858:	f85d eb04 	ldr.w	lr, [sp], #4
    285c:	b002      	add	sp, #8
    285e:	4770      	bx	lr
    2860:	000050ff 	.word	0x000050ff

00002864 <nordicsemi_nrf52_init>:
    2864:	f04f 0320 	mov.w	r3, #32
    2868:	f3ef 8211 	mrs	r2, BASEPRI
    286c:	f383 8811 	msr	BASEPRI, r3
    2870:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    2874:	4906      	ldr	r1, [pc, #24]	; (2890 <nordicsemi_nrf52_init+0x2c>)
    2876:	2301      	movs	r3, #1
    2878:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    287c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    2880:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    2884:	f382 8811 	msr	BASEPRI, r2
    2888:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    288c:	2000      	movs	r0, #0
    288e:	4770      	bx	lr
    2890:	4001e000 	.word	0x4001e000

00002894 <gpio_nrfx_init>:
#endif
	}
}

static int gpio_nrfx_init(struct device *port)
{
    2894:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    2896:	4b09      	ldr	r3, [pc, #36]	; (28bc <gpio_nrfx_init+0x28>)
    2898:	781a      	ldrb	r2, [r3, #0]
    289a:	b96a      	cbnz	r2, 28b8 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    289c:	2101      	movs	r1, #1
    289e:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0,
    28a0:	2006      	movs	r0, #6
    28a2:	2105      	movs	r1, #5
    28a4:	f7fe fe50 	bl	1548 <z_arm_irq_priority_set>
			    DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0_PRIORITY,
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_NORDIC_NRF_GPIOTE_GPIOTE_0_IRQ_0);
    28a8:	2006      	movs	r0, #6
    28aa:	f7fe fe3d 	bl	1528 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    28ae:	4b04      	ldr	r3, [pc, #16]	; (28c0 <gpio_nrfx_init+0x2c>)
    28b0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    28b4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    28b8:	2000      	movs	r0, #0
    28ba:	bd08      	pop	{r3, pc}
    28bc:	200003ef 	.word	0x200003ef
    28c0:	40006000 	.word	0x40006000

000028c4 <gpiote_pin_int_cfg>:
{
    28c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	return port->config->config_info;
    28c6:	6803      	ldr	r3, [r0, #0]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    28c8:	4d55      	ldr	r5, [pc, #340]	; (2a20 <gpiote_pin_int_cfg+0x15c>)
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    28ca:	689b      	ldr	r3, [r3, #8]
	struct gpio_nrfx_data *data = get_port_data(port);
    28cc:	6882      	ldr	r2, [r0, #8]
    28ce:	f8d5 4304 	ldr.w	r4, [r5, #772]	; 0x304
	u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    28d2:	7918      	ldrb	r0, [r3, #4]
    28d4:	f001 031f 	and.w	r3, r1, #31
    28d8:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
    28dc:	b2e4      	uxtb	r4, r4
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    28de:	2000      	movs	r0, #0
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    28e0:	f500 76a2 	add.w	r6, r0, #324	; 0x144
    28e4:	f855 6026 	ldr.w	r6, [r5, r6, lsl #2]
    28e8:	f3c6 2604 	ubfx	r6, r6, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    28ec:	42b3      	cmp	r3, r6
    28ee:	d175      	bne.n	29dc <gpiote_pin_int_cfg+0x118>
		    && (intenset & BIT(i))) {
    28f0:	fa24 f600 	lsr.w	r6, r4, r0
    28f4:	07f6      	lsls	r6, r6, #31
    28f6:	d571      	bpl.n	29dc <gpiote_pin_int_cfg+0x118>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    28f8:	0084      	lsls	r4, r0, #2
    28fa:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
    28fe:	f504 44c0 	add.w	r4, r4, #24576	; 0x6000
    2902:	f8d4 6510 	ldr.w	r6, [r4, #1296]	; 0x510
    2906:	f026 0601 	bic.w	r6, r6, #1
    290a:	f8c4 6510 	str.w	r6, [r4, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    290e:	2401      	movs	r4, #1
    2910:	fa04 f000 	lsl.w	r0, r4, r0
    p_reg->INTENCLR = mask;
    2914:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
NRF_STATIC_INLINE void nrf_gpio_cfg_sense_set(uint32_t             pin_number,
                                              nrf_gpio_pin_sense_t sense_config)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    /*lint -e{845} // A zero has been given as right argument to operator '|'" */
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    2918:	009c      	lsls	r4, r3, #2
    291a:	f104 44a0 	add.w	r4, r4, #1342177280	; 0x50000000
    291e:	f8d4 0700 	ldr.w	r0, [r4, #1792]	; 0x700
    2922:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000

    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    2926:	f8c4 0700 	str.w	r0, [r4, #1792]	; 0x700
	if ((data->pin_int_en & BIT(pin)) && (data->int_en & BIT(pin))) {
    292a:	6890      	ldr	r0, [r2, #8]
    292c:	40c8      	lsrs	r0, r1
    292e:	f010 0001 	ands.w	r0, r0, #1
    2932:	d051      	beq.n	29d8 <gpiote_pin_int_cfg+0x114>
    2934:	68d0      	ldr	r0, [r2, #12]
    2936:	40c8      	lsrs	r0, r1
    2938:	f010 0001 	ands.w	r0, r0, #1
    293c:	d04c      	beq.n	29d8 <gpiote_pin_int_cfg+0x114>
		if (data->trig_edge & BIT(pin)) {
    293e:	6950      	ldr	r0, [r2, #20]
    2940:	40c8      	lsrs	r0, r1
    2942:	f010 0001 	ands.w	r0, r0, #1
    2946:	d056      	beq.n	29f6 <gpiote_pin_int_cfg+0x132>
			if (data->double_edge & BIT(pin)) {
    2948:	6990      	ldr	r0, [r2, #24]
    294a:	40c8      	lsrs	r0, r1
    294c:	07c0      	lsls	r0, r0, #31
    294e:	d44a      	bmi.n	29e6 <gpiote_pin_int_cfg+0x122>
			} else if (((data->active_level & BIT(pin)) != 0U)
    2950:	6910      	ldr	r0, [r2, #16]
				   ^ ((BIT(pin) & data->inverted) != 0)) {
    2952:	69d2      	ldr	r2, [r2, #28]
			} else if (((data->active_level & BIT(pin)) != 0U)
    2954:	40c8      	lsrs	r0, r1
				   ^ ((BIT(pin) & data->inverted) != 0)) {
    2956:	fa22 f101 	lsr.w	r1, r2, r1
			} else if (((data->active_level & BIT(pin)) != 0U)
    295a:	f000 0001 	and.w	r0, r0, #1
    295e:	f001 0101 	and.w	r1, r1, #1
				pol = NRF_GPIOTE_POLARITY_HITOLO;
    2962:	4288      	cmp	r0, r1
    2964:	bf14      	ite	ne
    2966:	2101      	movne	r1, #1
    2968:	2102      	moveq	r1, #2
    p_reg->CONFIG[idx] = 0;
}

NRF_STATIC_INLINE bool nrf_gpiote_te_is_enabled(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return (p_reg->CONFIG[idx] & GPIOTE_CONFIG_MODE_Msk) != GPIOTE_CONFIG_MODE_Disabled;
    296a:	4d2d      	ldr	r5, [pc, #180]	; (2a20 <gpiote_pin_int_cfg+0x15c>)
    296c:	2400      	movs	r4, #0
    296e:	f504 72a2 	add.w	r2, r4, #324	; 0x144
    2972:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
		if (!nrf_gpiote_te_is_enabled(NRF_GPIOTE, channel)) {
    2976:	f010 0003 	ands.w	r0, r0, #3
    297a:	d136      	bne.n	29ea <gpiote_pin_int_cfg+0x126>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    297c:	00a2      	lsls	r2, r4, #2
    297e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2982:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    2986:	021b      	lsls	r3, r3, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    2988:	f8d2 6510 	ldr.w	r6, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    298c:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
    2990:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    2994:	f426 3647 	bic.w	r6, r6, #203776	; 0x31c00
			nrf_gpiote_event_t evt =
    2998:	f104 0340 	add.w	r3, r4, #64	; 0x40
    299c:	f426 7640 	bic.w	r6, r6, #768	; 0x300
    29a0:	009b      	lsls	r3, r3, #2
    29a2:	f8c2 6510 	str.w	r6, [r2, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
    29a6:	b29b      	uxth	r3, r3
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    29a8:	f8d2 6510 	ldr.w	r6, [r2, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
    29ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    29b0:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    29b4:	4331      	orrs	r1, r6
    29b6:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    29ba:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
    29bc:	681b      	ldr	r3, [r3, #0]
    29be:	9301      	str	r3, [sp, #4]
    (void)dummy;
    29c0:	9b01      	ldr	r3, [sp, #4]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    29c2:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    29c6:	f043 0301 	orr.w	r3, r3, #1
    29ca:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    29ce:	2301      	movs	r3, #1
    29d0:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->INTENSET = mask;
    29d4:	f8c5 4304 	str.w	r4, [r5, #772]	; 0x304
}
    29d8:	b002      	add	sp, #8
    29da:	bd70      	pop	{r4, r5, r6, pc}
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    29dc:	3001      	adds	r0, #1
    29de:	2808      	cmp	r0, #8
    29e0:	f47f af7e 	bne.w	28e0 <gpiote_pin_int_cfg+0x1c>
    29e4:	e798      	b.n	2918 <gpiote_pin_int_cfg+0x54>
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    29e6:	2103      	movs	r1, #3
    29e8:	e7bf      	b.n	296a <gpiote_pin_int_cfg+0xa6>
    29ea:	3401      	adds	r4, #1
	for (u8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
    29ec:	2c08      	cmp	r4, #8
    29ee:	d1be      	bne.n	296e <gpiote_pin_int_cfg+0xaa>
	return -ENODEV;
    29f0:	f06f 0012 	mvn.w	r0, #18
    29f4:	e7f0      	b.n	29d8 <gpiote_pin_int_cfg+0x114>
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    29f6:	6913      	ldr	r3, [r2, #16]
    29f8:	69d2      	ldr	r2, [r2, #28]
    29fa:	4053      	eors	r3, r2
    29fc:	fa23 f101 	lsr.w	r1, r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    2a00:	f8d4 3700 	ldr.w	r3, [r4, #1792]	; 0x700
		return NRF_GPIO_PIN_SENSE_HIGH;
    2a04:	f011 0f01 	tst.w	r1, #1
    2a08:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    2a0c:	bf14      	ite	ne
    2a0e:	f44f 3200 	movne.w	r2, #131072	; 0x20000
    2a12:	f44f 3240 	moveq.w	r2, #196608	; 0x30000
    2a16:	4313      	orrs	r3, r2
    2a18:	f8c4 3700 	str.w	r3, [r4, #1792]	; 0x700
    2a1c:	e7dc      	b.n	29d8 <gpiote_pin_int_cfg+0x114>
    2a1e:	bf00      	nop
    2a20:	40006000 	.word	0x40006000

00002a24 <gpiote_event_handler>:
{
    2a24:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2a28:	4953      	ldr	r1, [pc, #332]	; (2b78 <gpiote_event_handler+0x154>)
    2a2a:	680d      	ldr	r5, [r1, #0]
	if (port_event) {
    2a2c:	2d00      	cmp	r5, #0
    2a2e:	d067      	beq.n	2b00 <gpiote_event_handler+0xdc>
	struct gpio_nrfx_data *data = get_port_data(port);
    2a30:	4b52      	ldr	r3, [pc, #328]	; (2b7c <gpiote_event_handler+0x158>)
    2a32:	689a      	ldr	r2, [r3, #8]
	return port->config->config_info;
    2a34:	681b      	ldr	r3, [r3, #0]
    2a36:	689e      	ldr	r6, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
    2a38:	e9d2 0302 	ldrd	r0, r3, [r2, #8]
    2a3c:	4003      	ands	r3, r0
	out &= ~data->trig_edge & ~data->double_edge;
    2a3e:	e9d2 0405 	ldrd	r0, r4, [r2, #20]
    2a42:	4320      	orrs	r0, r4
    2a44:	ea23 0300 	bic.w	r3, r3, r0
	u32_t port_in = nrf_gpio_port_in_read(cfg->port);
    2a48:	6830      	ldr	r0, [r6, #0]
	u32_t pin_states = ~(port_in ^ data->inverted ^ data->active_level);
    2a4a:	69d4      	ldr	r4, [r2, #28]
    2a4c:	6912      	ldr	r2, [r2, #16]
}


NRF_STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
    2a4e:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    2a52:	4054      	eors	r4, r2
    2a54:	4044      	eors	r4, r0
	u32_t out = pin_states & level_pins;
    2a56:	ea23 0404 	bic.w	r4, r3, r4
	u32_t bit = 1U << pin;
    2a5a:	2001      	movs	r0, #1
	u32_t pin = 0U;
    2a5c:	2700      	movs	r7, #0
	while (level_pins) {
    2a5e:	2b00      	cmp	r3, #0
    2a60:	d138      	bne.n	2ad4 <gpiote_event_handler+0xb0>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2a62:	600b      	str	r3, [r1, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
    2a64:	680b      	ldr	r3, [r1, #0]
    2a66:	9300      	str	r3, [sp, #0]
    (void)dummy;
    2a68:	9b00      	ldr	r3, [sp, #0]
    return p_reg->INTENSET & mask;
    2a6a:	4845      	ldr	r0, [pc, #276]	; (2b80 <gpiote_event_handler+0x15c>)
	u32_t fired_triggers[GPIO_COUNT] = {0};
    2a6c:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    2a6e:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2a70:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
    2a72:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
    2a76:	fa06 f103 	lsl.w	r1, r6, r3
    2a7a:	4211      	tst	r1, r2
    2a7c:	d013      	beq.n	2aa6 <gpiote_event_handler+0x82>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2a7e:	009a      	lsls	r2, r3, #2
    2a80:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    2a84:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
    2a88:	6811      	ldr	r1, [r2, #0]
    2a8a:	b161      	cbz	r1, 2aa6 <gpiote_event_handler+0x82>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    2a8c:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    2a90:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    2a94:	6017      	str	r7, [r2, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event));
    2a96:	6812      	ldr	r2, [r2, #0]
    2a98:	9201      	str	r2, [sp, #4]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    2a9a:	f3c1 2104 	ubfx	r1, r1, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    2a9e:	fa06 f101 	lsl.w	r1, r6, r1
    (void)dummy;
    2aa2:	9a01      	ldr	r2, [sp, #4]
    2aa4:	430c      	orrs	r4, r1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    2aa6:	3301      	adds	r3, #1
    2aa8:	2b08      	cmp	r3, #8
    2aaa:	d1e2      	bne.n	2a72 <gpiote_event_handler+0x4e>
	if (fired_triggers[0]) {
    2aac:	bb54      	cbnz	r4, 2b04 <gpiote_event_handler+0xe0>
	if (port_event) {
    2aae:	b175      	cbz	r5, 2ace <gpiote_event_handler+0xaa>
	const struct gpio_nrfx_data *data = get_port_data(port);
    2ab0:	4b32      	ldr	r3, [pc, #200]	; (2b7c <gpiote_event_handler+0x158>)
    2ab2:	6899      	ldr	r1, [r3, #8]
	return port->config->config_info;
    2ab4:	681b      	ldr	r3, [r3, #0]
    2ab6:	689e      	ldr	r6, [r3, #8]
	u32_t out = data->int_en & data->pin_int_en;
    2ab8:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    2abc:	4013      	ands	r3, r2
	out &= ~data->trig_edge & ~data->double_edge;
    2abe:	e9d1 2005 	ldrd	r2, r0, [r1, #20]
    2ac2:	4302      	orrs	r2, r0
    2ac4:	ea23 0302 	bic.w	r3, r3, r2
	u32_t bit = 1U << pin;
    2ac8:	2401      	movs	r4, #1
	u32_t pin = 0U;
    2aca:	2500      	movs	r5, #0
	while (level_pins) {
    2acc:	bb8b      	cbnz	r3, 2b32 <gpiote_event_handler+0x10e>
}
    2ace:	b002      	add	sp, #8
    2ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
    2ad4:	4203      	tst	r3, r0
    2ad6:	d010      	beq.n	2afa <gpiote_event_handler+0xd6>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2ad8:	f896 c004 	ldrb.w	ip, [r6, #4]
    2adc:	f007 021f 	and.w	r2, r7, #31
    2ae0:	ea42 124c 	orr.w	r2, r2, ip, lsl #5
    2ae4:	0092      	lsls	r2, r2, #2
    2ae6:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
			level_pins &= ~bit;
    2aea:	ea23 0300 	bic.w	r3, r3, r0
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    2aee:	f8d2 c700 	ldr.w	ip, [r2, #1792]	; 0x700
    2af2:	f42c 3c40 	bic.w	ip, ip, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    2af6:	f8c2 c700 	str.w	ip, [r2, #1792]	; 0x700
		++pin;
    2afa:	3701      	adds	r7, #1
		bit <<= 1;
    2afc:	0040      	lsls	r0, r0, #1
    2afe:	e7ae      	b.n	2a5e <gpiote_event_handler+0x3a>
	u32_t fired_triggers[GPIO_COUNT] = {0};
    2b00:	462c      	mov	r4, r5
    2b02:	e7b2      	b.n	2a6a <gpiote_event_handler+0x46>
	struct gpio_nrfx_data *data = get_port_data(port);
    2b04:	4f1d      	ldr	r7, [pc, #116]	; (2b7c <gpiote_event_handler+0x158>)
    2b06:	f8d7 8008 	ldr.w	r8, [r7, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2b0a:	f8d8 1000 	ldr.w	r1, [r8]
    2b0e:	2900      	cmp	r1, #0
    2b10:	d0cd      	beq.n	2aae <gpiote_event_handler+0x8a>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    2b12:	680e      	ldr	r6, [r1, #0]
		if ((cb->pin_mask & pins) & data->int_en) {
    2b14:	f8d8 300c 	ldr.w	r3, [r8, #12]
    2b18:	688a      	ldr	r2, [r1, #8]
    2b1a:	4023      	ands	r3, r4
    2b1c:	4213      	tst	r3, r2
    2b1e:	d003      	beq.n	2b28 <gpiote_event_handler+0x104>
			cb->handler(port, cb, pins);
    2b20:	684b      	ldr	r3, [r1, #4]
    2b22:	4622      	mov	r2, r4
    2b24:	4638      	mov	r0, r7
    2b26:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    2b28:	2e00      	cmp	r6, #0
    2b2a:	d0c0      	beq.n	2aae <gpiote_event_handler+0x8a>
    2b2c:	4631      	mov	r1, r6
    2b2e:	6836      	ldr	r6, [r6, #0]
    2b30:	e7f0      	b.n	2b14 <gpiote_event_handler+0xf0>
		if (level_pins & bit) {
    2b32:	421c      	tst	r4, r3
    2b34:	d01c      	beq.n	2b70 <gpiote_event_handler+0x14c>
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2b36:	7930      	ldrb	r0, [r6, #4]
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    2b38:	69cf      	ldr	r7, [r1, #28]
			u32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    2b3a:	f005 021f 	and.w	r2, r5, #31
    2b3e:	ea42 1240 	orr.w	r2, r2, r0, lsl #5
	if ((BIT(pin) & (data->active_level ^ data->inverted)) != 0) {
    2b42:	6908      	ldr	r0, [r1, #16]
    2b44:	0092      	lsls	r2, r2, #2
    2b46:	4078      	eors	r0, r7
    2b48:	f102 42a0 	add.w	r2, r2, #1342177280	; 0x50000000
    2b4c:	40e8      	lsrs	r0, r5
		return NRF_GPIO_PIN_SENSE_HIGH;
    2b4e:	f010 0f01 	tst.w	r0, #1
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    2b52:	f8d2 0700 	ldr.w	r0, [r2, #1792]	; 0x700
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    2b56:	bf18      	it	ne
    2b58:	f44f 3700 	movne.w	r7, #131072	; 0x20000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    2b5c:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    2b60:	bf08      	it	eq
    2b62:	f44f 3740 	moveq.w	r7, #196608	; 0x30000
    2b66:	4338      	orrs	r0, r7
    2b68:	f8c2 0700 	str.w	r0, [r2, #1792]	; 0x700
			level_pins &= ~bit;
    2b6c:	ea23 0304 	bic.w	r3, r3, r4
		++pin;
    2b70:	3501      	adds	r5, #1
		bit <<= 1;
    2b72:	0064      	lsls	r4, r4, #1
    2b74:	e7aa      	b.n	2acc <gpiote_event_handler+0xa8>
    2b76:	bf00      	nop
    2b78:	4000617c 	.word	0x4000617c
    2b7c:	200025ac 	.word	0x200025ac
    2b80:	40006000 	.word	0x40006000

00002b84 <pwm_nrfx_get_cycles_per_sec>:
{
	/* TODO: Since this function might be removed, we will always return
	 * 16MHz from this function and handle the conversion with prescaler,
	 * etc, in the pin set function. See issue #6958.
	 */
	*cycles = 16ul * 1000ul * 1000ul;
    2b84:	4802      	ldr	r0, [pc, #8]	; (2b90 <pwm_nrfx_get_cycles_per_sec+0xc>)
    2b86:	2100      	movs	r1, #0
    2b88:	e9c2 0100 	strd	r0, r1, [r2]

	return 0;
}
    2b8c:	2000      	movs	r0, #0
    2b8e:	4770      	bx	lr
    2b90:	00f42400 	.word	0x00f42400

00002b94 <pwm_nrfx_init>:
	.get_cycles_per_sec = pwm_nrfx_get_cycles_per_sec,
};

static int pwm_nrfx_init(struct device *dev)
{
	const struct pwm_nrfx_config *config = dev->config->config_info;
    2b94:	6803      	ldr	r3, [r0, #0]
{
    2b96:	b510      	push	{r4, lr}
    2b98:	4604      	mov	r4, r0
	const struct pwm_nrfx_config *config = dev->config->config_info;
    2b9a:	6898      	ldr	r0, [r3, #8]

	nrfx_err_t result = nrfx_pwm_init(&config->pwm,
    2b9c:	2300      	movs	r3, #0
    2b9e:	461a      	mov	r2, r3
    2ba0:	f100 0108 	add.w	r1, r0, #8
    2ba4:	f000 fb88 	bl	32b8 <nrfx_pwm_init>
					  &config->initial_config,
					  NULL,
					  NULL);
	if (result != NRFX_SUCCESS) {
    2ba8:	4b0b      	ldr	r3, [pc, #44]	; (2bd8 <pwm_nrfx_init+0x44>)
    2baa:	4298      	cmp	r0, r3
    2bac:	d012      	beq.n	2bd4 <pwm_nrfx_init+0x40>
		LOG_ERR("Failed to initialize device: %s", dev->config->name);
    2bae:	2301      	movs	r3, #1
    2bb0:	f04f 0200 	mov.w	r2, #0
    2bb4:	f363 0207 	bfi	r2, r3, #0, #8
    2bb8:	4908      	ldr	r1, [pc, #32]	; (2bdc <pwm_nrfx_init+0x48>)
    2bba:	4b09      	ldr	r3, [pc, #36]	; (2be0 <pwm_nrfx_init+0x4c>)
    2bbc:	4809      	ldr	r0, [pc, #36]	; (2be4 <pwm_nrfx_init+0x50>)
    2bbe:	1a5b      	subs	r3, r3, r1
    2bc0:	08db      	lsrs	r3, r3, #3
    2bc2:	f363 128f 	bfi	r2, r3, #6, #10
    2bc6:	6823      	ldr	r3, [r4, #0]
    2bc8:	6819      	ldr	r1, [r3, #0]
    2bca:	f001 fddf 	bl	478c <log_1>
		return -EBUSY;
    2bce:	f06f 000f 	mvn.w	r0, #15
	}

	return 0;
}
    2bd2:	bd10      	pop	{r4, pc}
	return 0;
    2bd4:	2000      	movs	r0, #0
    2bd6:	e7fc      	b.n	2bd2 <pwm_nrfx_init+0x3e>
    2bd8:	0bad0000 	.word	0x0bad0000
    2bdc:	000058f8 	.word	0x000058f8
    2be0:	00005920 	.word	0x00005920
    2be4:	000061ff 	.word	0x000061ff

00002be8 <pwm_nrfx_pin_set>:
{
    2be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2bec:	4699      	mov	r9, r3
	const struct pwm_nrfx_config *config = dev->config->config_info;
    2bee:	6803      	ldr	r3, [r0, #0]
	struct pwm_nrfx_data *data = dev->driver_data;
    2bf0:	6884      	ldr	r4, [r0, #8]
	const struct pwm_nrfx_config *config = dev->config->config_info;
    2bf2:	689f      	ldr	r7, [r3, #8]
{
    2bf4:	4615      	mov	r5, r2
    2bf6:	b087      	sub	sp, #28
    2bf8:	4688      	mov	r8, r1
	for (i = 0U; i < NRF_PWM_CHANNEL_COUNT; i++) {
    2bfa:	1dfa      	adds	r2, r7, #7
    2bfc:	2600      	movs	r6, #0
		if (output_pins[i] != NRFX_PWM_PIN_NOT_USED
    2bfe:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    2c02:	2bff      	cmp	r3, #255	; 0xff
    2c04:	d004      	beq.n	2c10 <pwm_nrfx_pin_set+0x28>
		    && (pwm == (output_pins[i] & PWM_NRFX_CH_PIN_MASK))) {
    2c06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    2c0a:	4598      	cmp	r8, r3
    2c0c:	f000 809e 	beq.w	2d4c <pwm_nrfx_pin_set+0x164>
	for (i = 0U; i < NRF_PWM_CHANNEL_COUNT; i++) {
    2c10:	3601      	adds	r6, #1
    2c12:	b2f6      	uxtb	r6, r6
    2c14:	2e04      	cmp	r6, #4
    2c16:	d1f2      	bne.n	2bfe <pwm_nrfx_pin_set+0x16>
		LOG_ERR("PWM pin %d not enabled through DTS configuration.",
    2c18:	2301      	movs	r3, #1
    2c1a:	f04f 0200 	mov.w	r2, #0
    2c1e:	f363 0207 	bfi	r2, r3, #0, #8
    2c22:	4966      	ldr	r1, [pc, #408]	; (2dbc <pwm_nrfx_pin_set+0x1d4>)
    2c24:	4b66      	ldr	r3, [pc, #408]	; (2dc0 <pwm_nrfx_pin_set+0x1d8>)
    2c26:	4867      	ldr	r0, [pc, #412]	; (2dc4 <pwm_nrfx_pin_set+0x1dc>)
    2c28:	1a5b      	subs	r3, r3, r1
    2c2a:	08db      	lsrs	r3, r3, #3
    2c2c:	f363 128f 	bfi	r2, r3, #6, #10
    2c30:	4641      	mov	r1, r8
    2c32:	e05c      	b.n	2cee <pwm_nrfx_pin_set+0x106>
    2c34:	3301      	adds	r3, #1
	for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i) {
    2c36:	2b04      	cmp	r3, #4
    2c38:	f040 8094 	bne.w	2d64 <pwm_nrfx_pin_set+0x17c>
    2c3c:	462a      	mov	r2, r5
    2c3e:	2300      	movs	r3, #0
		if (countertop <= PWM_COUNTERTOP_COUNTERTOP_Msk) {
    2c40:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    2c44:	b2d9      	uxtb	r1, r3
    2c46:	d240      	bcs.n	2cca <pwm_nrfx_pin_set+0xe2>
			data->prescaler     = prescaler;
    2c48:	73a1      	strb	r1, [r4, #14]
			nrf_pwm_configure(config->pwm.p_registers,
    2c4a:	6839      	ldr	r1, [r7, #0]
			data->period_cycles = period_cycles;
    2c4c:	6025      	str	r5, [r4, #0]
			data->countertop    = (u16_t)countertop;
    2c4e:	81a2      	strh	r2, [r4, #12]
                                         nrf_pwm_mode_t mode,
                                         uint16_t       top_value)
{
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);

    p_reg->PRESCALER  = base_clock;
    2c50:	f8c1 350c 	str.w	r3, [r1, #1292]	; 0x50c
    p_reg->MODE       = mode;
    2c54:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
    2c58:	f8c1 2508 	str.w	r2, [r1, #1288]	; 0x508
	pulse_cycles = MIN(pulse_cycles, period_cycles);
    2c5c:	eb04 0a46 	add.w	sl, r4, r6, lsl #1
		| (pulse_cycles >> data->prescaler));
    2c60:	7ba1      	ldrb	r1, [r4, #14]
		(data->current[channel] & PWM_NRFX_CH_POLARITY_MASK)
    2c62:	f8ba 3004 	ldrh.w	r3, [sl, #4]
    2c66:	4855      	ldr	r0, [pc, #340]	; (2dbc <pwm_nrfx_pin_set+0x1d4>)
	pulse_cycles = MIN(pulse_cycles, period_cycles);
    2c68:	454d      	cmp	r5, r9
    2c6a:	46ab      	mov	fp, r5
    2c6c:	bf28      	it	cs
    2c6e:	46cb      	movcs	fp, r9
		| (pulse_cycles >> data->prescaler));
    2c70:	fa2b f201 	lsr.w	r2, fp, r1
		(data->current[channel] & PWM_NRFX_CH_POLARITY_MASK)
    2c74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
		| (pulse_cycles >> data->prescaler));
    2c78:	4313      	orrs	r3, r2
	data->current[channel] = (
    2c7a:	f8aa 3004 	strh.w	r3, [sl, #4]
	LOG_DBG("pin %u, pulse %u, period %u, prescaler: %u.",
    2c7e:	2204      	movs	r2, #4
    2c80:	f04f 0300 	mov.w	r3, #0
    2c84:	f362 0307 	bfi	r3, r2, #0, #8
    2c88:	4a4d      	ldr	r2, [pc, #308]	; (2dc0 <pwm_nrfx_pin_set+0x1d8>)
    2c8a:	9105      	str	r1, [sp, #20]
    2c8c:	1a12      	subs	r2, r2, r0
    2c8e:	08d2      	lsrs	r2, r2, #3
    2c90:	f362 138f 	bfi	r3, r2, #6, #10
    2c94:	4a4c      	ldr	r2, [pc, #304]	; (2dc8 <pwm_nrfx_pin_set+0x1e0>)
    2c96:	484d      	ldr	r0, [pc, #308]	; (2dcc <pwm_nrfx_pin_set+0x1e4>)
    2c98:	e9cd 2801 	strd	r2, r8, [sp, #4]
    2c9c:	a901      	add	r1, sp, #4
    2c9e:	2205      	movs	r2, #5
    2ca0:	e9cd b503 	strd	fp, r5, [sp, #12]
    2ca4:	f001 fdb9 	bl	481a <log_n>
	u16_t pulse_cycle =
    2ca8:	f8ba 3004 	ldrh.w	r3, [sl, #4]
    2cac:	f3c3 030e 	ubfx	r3, r3, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
    2cb0:	b303      	cbz	r3, 2cf4 <pwm_nrfx_pin_set+0x10c>
    2cb2:	89a2      	ldrh	r2, [r4, #12]
    2cb4:	429a      	cmp	r2, r3
    2cb6:	d91d      	bls.n	2cf4 <pwm_nrfx_pin_set+0x10c>
		if (nrfx_pwm_is_stopped(&config->pwm)) {
    2cb8:	4638      	mov	r0, r7
    2cba:	f000 fbbf 	bl	343c <nrfx_pwm_is_stopped>
    2cbe:	2800      	cmp	r0, #0
    2cc0:	d13c      	bne.n	2d3c <pwm_nrfx_pin_set+0x154>
	return 0;
    2cc2:	2000      	movs	r0, #0
}
    2cc4:	b007      	add	sp, #28
    2cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		countertop >>= 1;
    2cca:	3301      	adds	r3, #1
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
    2ccc:	2b08      	cmp	r3, #8
		countertop >>= 1;
    2cce:	ea4f 0252 	mov.w	r2, r2, lsr #1
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
    2cd2:	d1b5      	bne.n	2c40 <pwm_nrfx_pin_set+0x58>
	LOG_ERR("Prescaler for period_cycles %u not found.", period_cycles);
    2cd4:	2301      	movs	r3, #1
    2cd6:	f04f 0200 	mov.w	r2, #0
    2cda:	f363 0207 	bfi	r2, r3, #0, #8
    2cde:	4937      	ldr	r1, [pc, #220]	; (2dbc <pwm_nrfx_pin_set+0x1d4>)
    2ce0:	4b37      	ldr	r3, [pc, #220]	; (2dc0 <pwm_nrfx_pin_set+0x1d8>)
    2ce2:	483b      	ldr	r0, [pc, #236]	; (2dd0 <pwm_nrfx_pin_set+0x1e8>)
    2ce4:	1a5b      	subs	r3, r3, r1
    2ce6:	08db      	lsrs	r3, r3, #3
    2ce8:	f363 128f 	bfi	r2, r3, #6, #10
    2cec:	4629      	mov	r1, r5
		LOG_ERR("PWM pin %d not enabled through DTS configuration.",
    2cee:	f001 fd4d 	bl	478c <log_1>
    2cf2:	e050      	b.n	2d96 <pwm_nrfx_pin_set+0x1ae>
			config->initial_config.output_pins[channel]
    2cf4:	19bb      	adds	r3, r7, r6
    2cf6:	f993 3008 	ldrsb.w	r3, [r3, #8]
			&& !channel_inverted_state;
    2cfa:	f1bb 0f00 	cmp.w	fp, #0
    2cfe:	d157      	bne.n	2db0 <pwm_nrfx_pin_set+0x1c8>
			&& channel_inverted_state;
    2d00:	454d      	cmp	r5, r9
    2d02:	d84b      	bhi.n	2d9c <pwm_nrfx_pin_set+0x1b4>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    2d04:	2301      	movs	r3, #1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
    2d06:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    2d0a:	fa03 f308 	lsl.w	r3, r3, r8
    p_reg->OUTCLR = clr_mask;
    2d0e:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
	for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i) {
    2d12:	2300      	movs	r3, #0
		data->current[channel] & PWM_NRFX_CH_PULSE_CYCLES_MASK;
    2d14:	1d21      	adds	r1, r4, #4
		if (i != channel && pwm_channel_is_active(i, data)) {
    2d16:	b2da      	uxtb	r2, r3
    2d18:	42b2      	cmp	r2, r6
    2d1a:	d007      	beq.n	2d2c <pwm_nrfx_pin_set+0x144>
	u16_t pulse_cycle =
    2d1c:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
    2d20:	f3c2 020e 	ubfx	r2, r2, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
    2d24:	b112      	cbz	r2, 2d2c <pwm_nrfx_pin_set+0x144>
    2d26:	89a0      	ldrh	r0, [r4, #12]
    2d28:	4290      	cmp	r0, r2
    2d2a:	d8ca      	bhi.n	2cc2 <pwm_nrfx_pin_set+0xda>
    2d2c:	3301      	adds	r3, #1
	for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i) {
    2d2e:	2b04      	cmp	r3, #4
    2d30:	d1f1      	bne.n	2d16 <pwm_nrfx_pin_set+0x12e>
			nrfx_pwm_stop(&config->pwm, false);
    2d32:	2100      	movs	r1, #0
    2d34:	4638      	mov	r0, r7
    2d36:	f002 fb5b 	bl	53f0 <nrfx_pwm_stop>
    2d3a:	e7c2      	b.n	2cc2 <pwm_nrfx_pin_set+0xda>
			nrfx_pwm_simple_playback(&config->pwm,
    2d3c:	2302      	movs	r3, #2
    2d3e:	2201      	movs	r2, #1
    2d40:	f107 0114 	add.w	r1, r7, #20
    2d44:	4638      	mov	r0, r7
    2d46:	f000 fb3d 	bl	33c4 <nrfx_pwm_simple_playback>
    2d4a:	e7ba      	b.n	2cc2 <pwm_nrfx_pin_set+0xda>
	if (config->initial_config.count_mode == NRF_PWM_MODE_UP_AND_DOWN) {
    2d4c:	7bb8      	ldrb	r0, [r7, #14]
    2d4e:	2801      	cmp	r0, #1
    2d50:	d102      	bne.n	2d58 <pwm_nrfx_pin_set+0x170>
		period_cycles /= 2;
    2d52:	086d      	lsrs	r5, r5, #1
		pulse_cycles /= 2;
    2d54:	ea4f 0959 	mov.w	r9, r9, lsr #1
	if (period_cycles != data->period_cycles) {
    2d58:	6823      	ldr	r3, [r4, #0]
    2d5a:	42ab      	cmp	r3, r5
    2d5c:	f43f af7e 	beq.w	2c5c <pwm_nrfx_pin_set+0x74>
    2d60:	2300      	movs	r3, #0
				data->current[i]
    2d62:	1d21      	adds	r1, r4, #4
		if (i != channel) {
    2d64:	b2da      	uxtb	r2, r3
    2d66:	42b2      	cmp	r2, r6
    2d68:	f43f af64 	beq.w	2c34 <pwm_nrfx_pin_set+0x4c>
			u16_t channel_pulse_cycle =
    2d6c:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
			if (channel_pulse_cycle > 0) {
    2d70:	f3c2 020e 	ubfx	r2, r2, #0, #15
    2d74:	2a00      	cmp	r2, #0
    2d76:	f43f af5d 	beq.w	2c34 <pwm_nrfx_pin_set+0x4c>
				LOG_ERR("Incompatible period.");
    2d7a:	2301      	movs	r3, #1
    2d7c:	f04f 0100 	mov.w	r1, #0
    2d80:	f363 0107 	bfi	r1, r3, #0, #8
    2d84:	4a0d      	ldr	r2, [pc, #52]	; (2dbc <pwm_nrfx_pin_set+0x1d4>)
    2d86:	4b0e      	ldr	r3, [pc, #56]	; (2dc0 <pwm_nrfx_pin_set+0x1d8>)
    2d88:	4812      	ldr	r0, [pc, #72]	; (2dd4 <pwm_nrfx_pin_set+0x1ec>)
    2d8a:	1a9b      	subs	r3, r3, r2
    2d8c:	08db      	lsrs	r3, r3, #3
    2d8e:	f363 118f 	bfi	r1, r3, #6, #10
    2d92:	f001 fcee 	bl	4772 <log_0>
		return -EINVAL;
    2d96:	f06f 0015 	mvn.w	r0, #21
    2d9a:	e793      	b.n	2cc4 <pwm_nrfx_pin_set+0xdc>
		if (pulse_0_and_not_inverted || pulse_100_and_inverted) {
    2d9c:	2b00      	cmp	r3, #0
    2d9e:	dab1      	bge.n	2d04 <pwm_nrfx_pin_set+0x11c>
    p_reg->OUTSET = set_mask;
    2da0:	2301      	movs	r3, #1
    2da2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    2da6:	fa03 f308 	lsl.w	r3, r3, r8
    2daa:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    2dae:	e7b0      	b.n	2d12 <pwm_nrfx_pin_set+0x12a>
			&& channel_inverted_state;
    2db0:	454d      	cmp	r5, r9
    2db2:	d8f5      	bhi.n	2da0 <pwm_nrfx_pin_set+0x1b8>
    2db4:	2b00      	cmp	r3, #0
    2db6:	dba5      	blt.n	2d04 <pwm_nrfx_pin_set+0x11c>
    2db8:	e7f2      	b.n	2da0 <pwm_nrfx_pin_set+0x1b8>
    2dba:	bf00      	nop
    2dbc:	000058f8 	.word	0x000058f8
    2dc0:	00005920 	.word	0x00005920
    2dc4:	0000628e 	.word	0x0000628e
    2dc8:	000061ee 	.word	0x000061ee
    2dcc:	0000625e 	.word	0x0000625e
    2dd0:	00006234 	.word	0x00006234
    2dd4:	0000621f 	.word	0x0000621f

00002dd8 <uart_nrfx_err_check>:
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_uart_errorsrc_get_and_clear(NRF_UART_Type * p_reg)
{
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    2dd8:	4b02      	ldr	r3, [pc, #8]	; (2de4 <uart_nrfx_err_check+0xc>)
    2dda:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    2dde:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
/** Console I/O function */
static int uart_nrfx_err_check(struct device *dev)
{
	/* register bitfields maps to the defines in uart.h */
	return nrf_uart_errorsrc_get_and_clear(uart0_addr);
}
    2de2:	4770      	bx	lr
    2de4:	40002000 	.word	0x40002000

00002de8 <uart_nrfx_configure>:

static int uart_nrfx_configure(struct device *dev,
			       const struct uart_config *cfg)
{
    2de8:	b530      	push	{r4, r5, lr}
		break;
	default:
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
    2dea:	794b      	ldrb	r3, [r1, #5]
    2dec:	2b01      	cmp	r3, #1
    2dee:	d120      	bne.n	2e32 <uart_nrfx_configure+0x4a>
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    2df0:	798b      	ldrb	r3, [r1, #6]
    2df2:	2b03      	cmp	r3, #3
    2df4:	d11d      	bne.n	2e32 <uart_nrfx_configure+0x4a>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    2df6:	79ca      	ldrb	r2, [r1, #7]
    2df8:	b12a      	cbz	r2, 2e06 <uart_nrfx_configure+0x1e>
    2dfa:	2a01      	cmp	r2, #1
    2dfc:	d119      	bne.n	2e32 <uart_nrfx_configure+0x4a>
	return dev->config->config_info;
    2dfe:	6803      	ldr	r3, [r0, #0]
	case UART_CFG_FLOW_CTRL_NONE:
		uart_cfg.hwfc = NRF_UART_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
    2e00:	689b      	ldr	r3, [r3, #8]
    2e02:	781b      	ldrb	r3, [r3, #0]
    2e04:	b1ab      	cbz	r3, 2e32 <uart_nrfx_configure+0x4a>
	}

#if defined(UART_CONFIG_PARITYTYPE_Msk)
	uart_cfg.paritytype = NRF_UART_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    2e06:	790c      	ldrb	r4, [r1, #4]
    2e08:	b114      	cbz	r4, 2e10 <uart_nrfx_configure+0x28>
    2e0a:	2c02      	cmp	r4, #2
    2e0c:	d111      	bne.n	2e32 <uart_nrfx_configure+0x4a>
	case UART_CFG_PARITY_NONE:
		uart_cfg.parity = NRF_UART_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uart_cfg.parity = NRF_UART_PARITY_INCLUDED;
    2e0e:	240e      	movs	r4, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    2e10:	680b      	ldr	r3, [r1, #0]
	switch (baudrate) {
    2e12:	f647 2512 	movw	r5, #31250	; 0x7a12
    2e16:	42ab      	cmp	r3, r5
    2e18:	d05f      	beq.n	2eda <uart_nrfx_configure+0xf2>
    2e1a:	d827      	bhi.n	2e6c <uart_nrfx_configure+0x84>
    2e1c:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    2e20:	d05e      	beq.n	2ee0 <uart_nrfx_configure+0xf8>
    2e22:	d812      	bhi.n	2e4a <uart_nrfx_configure+0x62>
    2e24:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    2e28:	d05c      	beq.n	2ee4 <uart_nrfx_configure+0xfc>
    2e2a:	d805      	bhi.n	2e38 <uart_nrfx_configure+0x50>
    2e2c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    2e30:	d05b      	beq.n	2eea <uart_nrfx_configure+0x102>
		return -ENOTSUP;
    2e32:	f06f 0022 	mvn.w	r0, #34	; 0x22
    2e36:	e04f      	b.n	2ed8 <uart_nrfx_configure+0xf0>
	switch (baudrate) {
    2e38:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    2e3c:	d058      	beq.n	2ef0 <uart_nrfx_configure+0x108>
    2e3e:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    2e42:	d1f6      	bne.n	2e32 <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_2400;
    2e44:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    2e48:	e03b      	b.n	2ec2 <uart_nrfx_configure+0xda>
	switch (baudrate) {
    2e4a:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    2e4e:	d052      	beq.n	2ef6 <uart_nrfx_configure+0x10e>
    2e50:	d804      	bhi.n	2e5c <uart_nrfx_configure+0x74>
    2e52:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    2e56:	d1ec      	bne.n	2e32 <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_9600;
    2e58:	4b30      	ldr	r3, [pc, #192]	; (2f1c <uart_nrfx_configure+0x134>)
    2e5a:	e032      	b.n	2ec2 <uart_nrfx_configure+0xda>
	switch (baudrate) {
    2e5c:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    2e60:	d04c      	beq.n	2efc <uart_nrfx_configure+0x114>
    2e62:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    2e66:	d1e4      	bne.n	2e32 <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_28800;
    2e68:	4b2d      	ldr	r3, [pc, #180]	; (2f20 <uart_nrfx_configure+0x138>)
    2e6a:	e02a      	b.n	2ec2 <uart_nrfx_configure+0xda>
	switch (baudrate) {
    2e6c:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    2e70:	d046      	beq.n	2f00 <uart_nrfx_configure+0x118>
    2e72:	d811      	bhi.n	2e98 <uart_nrfx_configure+0xb0>
    2e74:	f64d 25c0 	movw	r5, #56000	; 0xdac0
    2e78:	42ab      	cmp	r3, r5
    2e7a:	d043      	beq.n	2f04 <uart_nrfx_configure+0x11c>
    2e7c:	d804      	bhi.n	2e88 <uart_nrfx_configure+0xa0>
    2e7e:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
    2e82:	d1d6      	bne.n	2e32 <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_38400;
    2e84:	4b27      	ldr	r3, [pc, #156]	; (2f24 <uart_nrfx_configure+0x13c>)
    2e86:	e01c      	b.n	2ec2 <uart_nrfx_configure+0xda>
	switch (baudrate) {
    2e88:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    2e8c:	d03d      	beq.n	2f0a <uart_nrfx_configure+0x122>
    2e8e:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    2e92:	d1ce      	bne.n	2e32 <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_76800;
    2e94:	4b24      	ldr	r3, [pc, #144]	; (2f28 <uart_nrfx_configure+0x140>)
    2e96:	e014      	b.n	2ec2 <uart_nrfx_configure+0xda>
	switch (baudrate) {
    2e98:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    2e9c:	d037      	beq.n	2f0e <uart_nrfx_configure+0x126>
    2e9e:	d808      	bhi.n	2eb2 <uart_nrfx_configure+0xca>
    2ea0:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    2ea4:	d035      	beq.n	2f12 <uart_nrfx_configure+0x12a>
    2ea6:	4d21      	ldr	r5, [pc, #132]	; (2f2c <uart_nrfx_configure+0x144>)
    2ea8:	42ab      	cmp	r3, r5
    2eaa:	d1c2      	bne.n	2e32 <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_250000;
    2eac:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    2eb0:	e007      	b.n	2ec2 <uart_nrfx_configure+0xda>
	switch (baudrate) {
    2eb2:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    2eb6:	d02e      	beq.n	2f16 <uart_nrfx_configure+0x12e>
    2eb8:	4d1d      	ldr	r5, [pc, #116]	; (2f30 <uart_nrfx_configure+0x148>)
    2eba:	42ab      	cmp	r3, r5
    2ebc:	d1b9      	bne.n	2e32 <uart_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UART_BAUDRATE_1000000;
    2ebe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uart_baudrate_set(NRF_UART_Type * p_reg, nrf_uart_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    2ec2:	4d1c      	ldr	r5, [pc, #112]	; (2f34 <uart_nrfx_configure+0x14c>)
                    | (uint32_t)p_cfg->hwfc;
    2ec4:	4322      	orrs	r2, r4
    p_reg->BAUDRATE = baudrate;
    2ec6:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    2eca:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
		return -ENOTSUP;
	}

	nrf_uart_configure(uart0_addr, &uart_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    2ece:	6883      	ldr	r3, [r0, #8]
    2ed0:	c903      	ldmia	r1, {r0, r1}
    2ed2:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    2ed6:	2000      	movs	r0, #0
}
    2ed8:	bd30      	pop	{r4, r5, pc}
		nrf_baudrate = NRF_UART_BAUDRATE_31250;
    2eda:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    2ede:	e7f0      	b.n	2ec2 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_4800;
    2ee0:	4b15      	ldr	r3, [pc, #84]	; (2f38 <uart_nrfx_configure+0x150>)
    2ee2:	e7ee      	b.n	2ec2 <uart_nrfx_configure+0xda>
		nrf_baudrate = 0x00027000;
    2ee4:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    2ee8:	e7eb      	b.n	2ec2 <uart_nrfx_configure+0xda>
		nrf_baudrate = 0x00014000;
    2eea:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    2eee:	e7e8      	b.n	2ec2 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_1200;
    2ef0:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    2ef4:	e7e5      	b.n	2ec2 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_14400;
    2ef6:	f44f 136c 	mov.w	r3, #3866624	; 0x3b0000
    2efa:	e7e2      	b.n	2ec2 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_19200;
    2efc:	4b0f      	ldr	r3, [pc, #60]	; (2f3c <uart_nrfx_configure+0x154>)
    2efe:	e7e0      	b.n	2ec2 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_115200;
    2f00:	4b0f      	ldr	r3, [pc, #60]	; (2f40 <uart_nrfx_configure+0x158>)
    2f02:	e7de      	b.n	2ec2 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_56000;
    2f04:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    2f08:	e7db      	b.n	2ec2 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_57600;
    2f0a:	4b0e      	ldr	r3, [pc, #56]	; (2f44 <uart_nrfx_configure+0x15c>)
    2f0c:	e7d9      	b.n	2ec2 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_460800;
    2f0e:	4b0e      	ldr	r3, [pc, #56]	; (2f48 <uart_nrfx_configure+0x160>)
    2f10:	e7d7      	b.n	2ec2 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_230400;
    2f12:	4b0e      	ldr	r3, [pc, #56]	; (2f4c <uart_nrfx_configure+0x164>)
    2f14:	e7d5      	b.n	2ec2 <uart_nrfx_configure+0xda>
		nrf_baudrate = NRF_UART_BAUDRATE_921600;
    2f16:	4b0e      	ldr	r3, [pc, #56]	; (2f50 <uart_nrfx_configure+0x168>)
    2f18:	e7d3      	b.n	2ec2 <uart_nrfx_configure+0xda>
    2f1a:	bf00      	nop
    2f1c:	00275000 	.word	0x00275000
    2f20:	0075f000 	.word	0x0075f000
    2f24:	009d5000 	.word	0x009d5000
    2f28:	013a9000 	.word	0x013a9000
    2f2c:	0003d090 	.word	0x0003d090
    2f30:	000f4240 	.word	0x000f4240
    2f34:	40002000 	.word	0x40002000
    2f38:	0013b000 	.word	0x0013b000
    2f3c:	004ea000 	.word	0x004ea000
    2f40:	01d7e000 	.word	0x01d7e000
    2f44:	00ebf000 	.word	0x00ebf000
    2f48:	075f7000 	.word	0x075f7000
    2f4c:	03afb000 	.word	0x03afb000
    2f50:	0ebed000 	.word	0x0ebed000

00002f54 <uart_nrfx_poll_in>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2f54:	4b08      	ldr	r3, [pc, #32]	; (2f78 <uart_nrfx_poll_in+0x24>)
    2f56:	681a      	ldr	r2, [r3, #0]
{
    2f58:	b082      	sub	sp, #8
	if (!nrf_uart_event_check(uart0_addr, NRF_UART_EVENT_RXDRDY)) {
    2f5a:	b152      	cbz	r2, 2f72 <uart_nrfx_poll_in+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2f5c:	2000      	movs	r0, #0
    2f5e:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    2f60:	681b      	ldr	r3, [r3, #0]
    2f62:	9301      	str	r3, [sp, #4]
    (void)dummy;
    2f64:	9b01      	ldr	r3, [sp, #4]
    return p_reg->RXD;
    2f66:	4b05      	ldr	r3, [pc, #20]	; (2f7c <uart_nrfx_poll_in+0x28>)
    2f68:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    2f6c:	700b      	strb	r3, [r1, #0]
}
    2f6e:	b002      	add	sp, #8
    2f70:	4770      	bx	lr
		return -1;
    2f72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2f76:	e7fa      	b.n	2f6e <uart_nrfx_poll_in+0x1a>
    2f78:	40002108 	.word	0x40002108
    2f7c:	40002000 	.word	0x40002000

00002f80 <uart_nrfx_poll_out>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2f80:	4b09      	ldr	r3, [pc, #36]	; (2fa8 <uart_nrfx_poll_out+0x28>)
    2f82:	2200      	movs	r2, #0
    2f84:	601a      	str	r2, [r3, #0]
{
    2f86:	b082      	sub	sp, #8
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    2f88:	681a      	ldr	r2, [r3, #0]
    2f8a:	9201      	str	r2, [sp, #4]
    (void)dummy;
    2f8c:	9a01      	ldr	r2, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2f8e:	4a07      	ldr	r2, [pc, #28]	; (2fac <uart_nrfx_poll_out+0x2c>)
    2f90:	2001      	movs	r0, #1
    2f92:	6010      	str	r0, [r2, #0]
    p_reg->TXD = txd;
    2f94:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2f98:	681a      	ldr	r2, [r3, #0]
	while (!event_txdrdy_check()) {
    2f9a:	2a00      	cmp	r2, #0
    2f9c:	d0fc      	beq.n	2f98 <uart_nrfx_poll_out+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2f9e:	4b04      	ldr	r3, [pc, #16]	; (2fb0 <uart_nrfx_poll_out+0x30>)
    2fa0:	2201      	movs	r2, #1
    2fa2:	601a      	str	r2, [r3, #0]
}
    2fa4:	b002      	add	sp, #8
    2fa6:	4770      	bx	lr
    2fa8:	4000211c 	.word	0x4000211c
    2fac:	40002008 	.word	0x40002008
    2fb0:	4000200c 	.word	0x4000200c

00002fb4 <uart_nrfx_init>:
    2fb4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 * @param dev UART device struct
 *
 * @return 0 on success
 */
static int uart_nrfx_init(struct device *dev)
{
    2fb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    p_reg->PSELRXD = pselrxd;
    2fba:	4c16      	ldr	r4, [pc, #88]	; (3014 <uart_nrfx_init+0x60>)
    2fbc:	2240      	movs	r2, #64	; 0x40
    2fbe:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    2fc2:	2103      	movs	r1, #3
    2fc4:	2200      	movs	r2, #0
    2fc6:	2508      	movs	r5, #8
    2fc8:	f8c3 1718 	str.w	r1, [r3, #1816]	; 0x718
    2fcc:	f8c3 2720 	str.w	r2, [r3, #1824]	; 0x720
    2fd0:	f8c4 5514 	str.w	r5, [r4, #1300]	; 0x514
    p_reg->PSELTXD = pseltxd;
    2fd4:	2506      	movs	r5, #6
    2fd6:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
    p_reg->OUTSET = set_mask;
    2fda:	2520      	movs	r5, #32
    2fdc:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    2fe0:	f8c3 1714 	str.w	r1, [r3, #1812]	; 0x714
    2fe4:	f8c3 271c 	str.w	r2, [r3, #1820]	; 0x71c
    p_reg->PSELRTS = pselrts;
    2fe8:	2305      	movs	r3, #5
    2fea:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSELCTS = pselcts;
    2fee:	2307      	movs	r3, #7
    2ff0:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
			       DT_NORDIC_NRF_UART_UART_0_RTS_PIN,
			       DT_NORDIC_NRF_UART_UART_0_CTS_PIN);
#endif

	/* Set initial configuration */
	err = uart_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    2ff4:	6881      	ldr	r1, [r0, #8]
    2ff6:	f7ff fef7 	bl	2de8 <uart_nrfx_configure>
	if (err) {
    2ffa:	b948      	cbnz	r0, 3010 <uart_nrfx_init+0x5c>
    p_reg->ENABLE = UART_ENABLE_ENABLE_Enabled;
    2ffc:	2304      	movs	r3, #4
    2ffe:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3002:	4b05      	ldr	r3, [pc, #20]	; (3018 <uart_nrfx_init+0x64>)
    3004:	6018      	str	r0, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    3006:	681b      	ldr	r3, [r3, #0]
    3008:	9301      	str	r3, [sp, #4]
    (void)dummy;
    300a:	9b01      	ldr	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    300c:	2301      	movs	r3, #1
    300e:	6023      	str	r3, [r4, #0]
	defined(DT_NORDIC_NRF_UART_UART_0_CTS_PIN)
	k_delayed_work_init(&uart0_cb.tx_timeout_work, tx_timeout);
#endif
#endif
	return 0;
}
    3010:	b003      	add	sp, #12
    3012:	bd30      	pop	{r4, r5, pc}
    3014:	40002000 	.word	0x40002000
    3018:	40002108 	.word	0x40002108

0000301c <errata_108>:
static bool errata_12(void)
{
    uint32_t var1;
    uint32_t var2;

    if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    301c:	4b04      	ldr	r3, [pc, #16]	; (3030 <errata_108+0x14>)
    301e:	6818      	ldr	r0, [r3, #0]
    3020:	1c42      	adds	r2, r0, #1
    {
        var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    3022:	bf04      	itt	eq
    3024:	4b03      	ldreq	r3, [pc, #12]	; (3034 <errata_108+0x18>)
    3026:	7818      	ldrbeq	r0, [r3, #0]
        break;

    }

    return false;
}
    3028:	1f83      	subs	r3, r0, #6
    302a:	4258      	negs	r0, r3
    302c:	4158      	adcs	r0, r3
    302e:	4770      	bx	lr
    3030:	10000130 	.word	0x10000130
    3034:	f0000fe0 	.word	0xf0000fe0

00003038 <errata_16>:
    return false;
}

static bool errata_16(void)
{
    uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    3038:	4b07      	ldr	r3, [pc, #28]	; (3058 <errata_16+0x20>)
    303a:	781b      	ldrb	r3, [r3, #0]
    uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;

    switch(var1)
    303c:	2b06      	cmp	r3, #6
    303e:	d109      	bne.n	3054 <errata_16+0x1c>
    uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    3040:	4b06      	ldr	r3, [pc, #24]	; (305c <errata_16+0x24>)
    3042:	681b      	ldr	r3, [r3, #0]
    3044:	f3c3 1303 	ubfx	r3, r3, #4, #4
    3048:	3b03      	subs	r3, #3
    304a:	2b03      	cmp	r3, #3
    304c:	d802      	bhi.n	3054 <errata_16+0x1c>
    304e:	4a04      	ldr	r2, [pc, #16]	; (3060 <errata_16+0x28>)
    3050:	5cd0      	ldrb	r0, [r2, r3]
    3052:	4770      	bx	lr
            }
        break;

    }

    return false;
    3054:	2000      	movs	r0, #0
}
    3056:	4770      	bx	lr
    3058:	f0000fe0 	.word	0xf0000fe0
    305c:	f0000fe8 	.word	0xf0000fe8
    3060:	000062ca 	.word	0x000062ca

00003064 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    3064:	b508      	push	{r3, lr}
        NRF_P0->PIN_CNF[20] = (GPIO_PIN_CNF_DRIVE_H0H1 << GPIO_PIN_CNF_DRIVE_Pos) | (GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos) | (GPIO_PIN_CNF_DIR_Output << GPIO_PIN_CNF_DIR_Pos);
    #endif
    
    /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (errata_12()){
    3066:	f7ff ffd9 	bl	301c <errata_108>
    306a:	b128      	cbz	r0, 3078 <SystemInit+0x14>
        *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
    306c:	4b7c      	ldr	r3, [pc, #496]	; (3260 <SystemInit+0x1fc>)
    306e:	4a7d      	ldr	r2, [pc, #500]	; (3264 <SystemInit+0x200>)
    3070:	681b      	ldr	r3, [r3, #0]
    3072:	f3c3 2304 	ubfx	r3, r3, #8, #5
    3076:	6013      	str	r3, [r2, #0]
    }
    
    /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (errata_16()){
    3078:	f7ff ffde 	bl	3038 <errata_16>
    307c:	b110      	cbz	r0, 3084 <SystemInit+0x20>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    307e:	4b7a      	ldr	r3, [pc, #488]	; (3268 <SystemInit+0x204>)
    3080:	4a7a      	ldr	r2, [pc, #488]	; (326c <SystemInit+0x208>)
    3082:	601a      	str	r2, [r3, #0]
    }

    /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (errata_31()){
    3084:	f7ff ffca 	bl	301c <errata_108>
    3088:	b128      	cbz	r0, 3096 <SystemInit+0x32>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    308a:	4b79      	ldr	r3, [pc, #484]	; (3270 <SystemInit+0x20c>)
    308c:	4a79      	ldr	r2, [pc, #484]	; (3274 <SystemInit+0x210>)
    308e:	681b      	ldr	r3, [r3, #0]
    3090:	f3c3 3342 	ubfx	r3, r3, #13, #3
    3094:	6013      	str	r3, [r2, #0]
    }

    /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp */
    if (errata_32()){
    3096:	f7ff ffcf 	bl	3038 <errata_16>
    309a:	b120      	cbz	r0, 30a6 <SystemInit+0x42>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    309c:	4a76      	ldr	r2, [pc, #472]	; (3278 <SystemInit+0x214>)
    309e:	68d3      	ldr	r3, [r2, #12]
    30a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    30a4:	60d3      	str	r3, [r2, #12]
    }

    /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_36()){
    30a6:	f7ff ffb9 	bl	301c <errata_108>
    30aa:	b140      	cbz	r0, 30be <SystemInit+0x5a>
        NRF_CLOCK->EVENTS_DONE = 0;
    30ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    30b0:	2200      	movs	r2, #0
    30b2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
    30b6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
    30ba:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    }

    /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_37()){
    30be:	f7ff ffbb 	bl	3038 <errata_16>
    30c2:	b110      	cbz	r0, 30ca <SystemInit+0x66>
        *(volatile uint32_t *)0x400005A0 = 0x3;
    30c4:	4b6d      	ldr	r3, [pc, #436]	; (327c <SystemInit+0x218>)
    30c6:	2203      	movs	r2, #3
    30c8:	601a      	str	r2, [r3, #0]
    }

    /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_57()){
    30ca:	f7ff ffb5 	bl	3038 <errata_16>
    30ce:	b140      	cbz	r0, 30e2 <SystemInit+0x7e>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
    30d0:	4b6b      	ldr	r3, [pc, #428]	; (3280 <SystemInit+0x21c>)
    30d2:	2205      	movs	r2, #5
    30d4:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005688 = 0x00000001;
    30d6:	2201      	movs	r2, #1
    30d8:	679a      	str	r2, [r3, #120]	; 0x78
        *(volatile uint32_t *)0x40005618 = 0x00000000;
    30da:	2200      	movs	r2, #0
    30dc:	609a      	str	r2, [r3, #8]
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
    30de:	223f      	movs	r2, #63	; 0x3f
    30e0:	605a      	str	r2, [r3, #4]
static bool errata_66(void)
{
    uint32_t var1;
    uint32_t var2;

    if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    30e2:	4b68      	ldr	r3, [pc, #416]	; (3284 <SystemInit+0x220>)
    30e4:	681a      	ldr	r2, [r3, #0]
    30e6:	1c51      	adds	r1, r2, #1
    {
        var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    30e8:	bf0b      	itete	eq
    30ea:	4b67      	ldreq	r3, [pc, #412]	; (3288 <SystemInit+0x224>)
        var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    }
    else
    {
        var1 = *(uint32_t *)0x10000130ul;
        var2 = *(uint32_t *)0x10000134ul;
    30ec:	4b67      	ldrne	r3, [pc, #412]	; (328c <SystemInit+0x228>)
        var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    30ee:	781a      	ldrbeq	r2, [r3, #0]
        var2 = *(uint32_t *)0x10000134ul;
    30f0:	681b      	ldrne	r3, [r3, #0]
        var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    30f2:	bf02      	ittt	eq
    30f4:	3308      	addeq	r3, #8
    30f6:	681b      	ldreq	r3, [r3, #0]
    30f8:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
    }

    switch(var1)
    30fc:	2a06      	cmp	r2, #6
    30fe:	d14d      	bne.n	319c <SystemInit+0x138>
    {
        case 0x06:
            switch(var2)
    3100:	3b03      	subs	r3, #3
    3102:	2b03      	cmp	r3, #3
    3104:	d803      	bhi.n	310e <SystemInit+0xaa>
    }

    /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_66()){
    3106:	4a62      	ldr	r2, [pc, #392]	; (3290 <SystemInit+0x22c>)
    3108:	5cd3      	ldrb	r3, [r2, r3]
    310a:	2b00      	cmp	r3, #0
    310c:	d046      	beq.n	319c <SystemInit+0x138>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    310e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    3112:	4b60      	ldr	r3, [pc, #384]	; (3294 <SystemInit+0x230>)
    3114:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    3118:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    311c:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    3120:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    3124:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    3128:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    312c:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    3130:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    3134:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    3138:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    313c:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    3140:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    3144:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    3148:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    314c:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    3150:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    3154:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    3158:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    315c:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    3160:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    3164:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    3168:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    316c:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    3170:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    3174:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    3178:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    317c:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    3180:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    3184:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    3188:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    318c:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    3190:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    3194:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    3198:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    }

    /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_108()){
    319c:	f7ff ff3e 	bl	301c <errata_108>
    31a0:	b128      	cbz	r0, 31ae <SystemInit+0x14a>
        *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
    31a2:	4b3d      	ldr	r3, [pc, #244]	; (3298 <SystemInit+0x234>)
    31a4:	4a3d      	ldr	r2, [pc, #244]	; (329c <SystemInit+0x238>)
    31a6:	681b      	ldr	r3, [r3, #0]
    31a8:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    31ac:	6013      	str	r3, [r2, #0]
    }
    
    /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_136()){
    31ae:	f7ff ff35 	bl	301c <errata_108>
    31b2:	b148      	cbz	r0, 31c8 <SystemInit+0x164>
        if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    31b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    31b8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    31bc:	07d2      	lsls	r2, r2, #31
            NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    31be:	bf44      	itt	mi
    31c0:	f06f 0201 	mvnmi.w	r2, #1
    31c4:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    return false;
}

static bool errata_182(void)
{
    uint32_t var1 = *(uint32_t *)0x10000130ul;
    31c8:	4b2e      	ldr	r3, [pc, #184]	; (3284 <SystemInit+0x220>)
    uint32_t var2 = *(uint32_t *)0x10000134ul;

    switch(var1)
    31ca:	681b      	ldr	r3, [r3, #0]
    31cc:	2b06      	cmp	r3, #6
    31ce:	d109      	bne.n	31e4 <SystemInit+0x180>
    uint32_t var2 = *(uint32_t *)0x10000134ul;
    31d0:	4b2e      	ldr	r3, [pc, #184]	; (328c <SystemInit+0x228>)
    {
        case 0x06:
            switch(var2)
    31d2:	681b      	ldr	r3, [r3, #0]
    31d4:	3b03      	subs	r3, #3
    31d6:	2b02      	cmp	r3, #2
    }
    
    /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (errata_182()){
        *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
    31d8:	bf81      	itttt	hi
    31da:	4a31      	ldrhi	r2, [pc, #196]	; (32a0 <SystemInit+0x23c>)
    31dc:	6813      	ldrhi	r3, [r2, #0]
    31de:	f443 6380 	orrhi.w	r3, r3, #1024	; 0x400
    31e2:	6013      	strhi	r3, [r2, #0]

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    31e4:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    31e8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    31ec:	2a00      	cmp	r2, #0
    31ee:	db03      	blt.n	31f8 <SystemInit+0x194>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    31f0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    31f4:	2b00      	cmp	r3, #0
    31f6:	da2f      	bge.n	3258 <SystemInit+0x1f4>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    31f8:	4b2a      	ldr	r3, [pc, #168]	; (32a4 <SystemInit+0x240>)
    31fa:	2201      	movs	r2, #1
    31fc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    3200:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    3204:	2a00      	cmp	r2, #0
    3206:	d0fb      	beq.n	3200 <SystemInit+0x19c>
            NRF_UICR->PSELRESET[0] = 21;
    3208:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    320c:	2115      	movs	r1, #21
    320e:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    3212:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    3216:	2a00      	cmp	r2, #0
    3218:	d0fb      	beq.n	3212 <SystemInit+0x1ae>
            NRF_UICR->PSELRESET[1] = 21;
    321a:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    321e:	2215      	movs	r2, #21
    3220:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    3224:	4b1f      	ldr	r3, [pc, #124]	; (32a4 <SystemInit+0x240>)
    3226:	461a      	mov	r2, r3
    3228:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
    322c:	2900      	cmp	r1, #0
    322e:	d0fb      	beq.n	3228 <SystemInit+0x1c4>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    3230:	2100      	movs	r1, #0
    3232:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    3236:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    323a:	2b00      	cmp	r3, #0
    323c:	d0fb      	beq.n	3236 <SystemInit+0x1d2>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    323e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    3242:	4919      	ldr	r1, [pc, #100]	; (32a8 <SystemInit+0x244>)
    3244:	4b19      	ldr	r3, [pc, #100]	; (32ac <SystemInit+0x248>)
    3246:	68ca      	ldr	r2, [r1, #12]
    3248:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    324c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    324e:	60cb      	str	r3, [r1, #12]
    3250:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    3254:	bf00      	nop
    3256:	e7fd      	b.n	3254 <SystemInit+0x1f0>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    3258:	4b15      	ldr	r3, [pc, #84]	; (32b0 <SystemInit+0x24c>)
    325a:	4a16      	ldr	r2, [pc, #88]	; (32b4 <SystemInit+0x250>)
    325c:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    325e:	bd08      	pop	{r3, pc}
    3260:	10000324 	.word	0x10000324
    3264:	40013540 	.word	0x40013540
    3268:	4007c074 	.word	0x4007c074
    326c:	baadf00d 	.word	0xbaadf00d
    3270:	10000244 	.word	0x10000244
    3274:	4000053c 	.word	0x4000053c
    3278:	e000edf0 	.word	0xe000edf0
    327c:	400005a0 	.word	0x400005a0
    3280:	40005610 	.word	0x40005610
    3284:	10000130 	.word	0x10000130
    3288:	f0000fe0 	.word	0xf0000fe0
    328c:	10000134 	.word	0x10000134
    3290:	000062ce 	.word	0x000062ce
    3294:	4000c000 	.word	0x4000c000
    3298:	10000258 	.word	0x10000258
    329c:	40000ee4 	.word	0x40000ee4
    32a0:	4000173c 	.word	0x4000173c
    32a4:	4001e000 	.word	0x4001e000
    32a8:	e000ed00 	.word	0xe000ed00
    32ac:	05fa0004 	.word	0x05fa0004
    32b0:	20002524 	.word	0x20002524
    32b4:	03d09000 	.word	0x03d09000

000032b8 <nrfx_pwm_init>:

nrfx_err_t nrfx_pwm_init(nrfx_pwm_t const *        p_instance,
                         nrfx_pwm_config_t const * p_config,
                         nrfx_pwm_handler_t        handler,
                         void *                    p_context)
{
    32b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    NRFX_ASSERT(p_config);

    nrfx_err_t err_code;

    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    32bc:	7906      	ldrb	r6, [r0, #4]

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    32be:	4c3e      	ldr	r4, [pc, #248]	; (33b8 <nrfx_pwm_init+0x100>)
{
    32c0:	4605      	mov	r5, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    32c2:	200c      	movs	r0, #12
    32c4:	4370      	muls	r0, r6
    32c6:	1827      	adds	r7, r4, r0
{
    32c8:	b085      	sub	sp, #20
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    32ca:	f897 c008 	ldrb.w	ip, [r7, #8]
    32ce:	f1bc 0f00 	cmp.w	ip, #0
    32d2:	d16f      	bne.n	33b4 <nrfx_pwm_init+0xfc>
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    p_cb->handler = handler;
    32d4:	5022      	str	r2, [r4, r0]
    p_cb->p_context = p_context;
    32d6:	607b      	str	r3, [r7, #4]
static void configure_pins(nrfx_pwm_t const *        p_instance,
    32d8:	1e48      	subs	r0, r1, #1
    32da:	466a      	mov	r2, sp
    32dc:	f101 0e03 	add.w	lr, r1, #3
            out_pins[i] = NRF_PWM_PIN_NOT_CONNECTED;
    32e0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    32e4:	f04f 0901 	mov.w	r9, #1
    32e8:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
    32ec:	f04f 0a03 	mov.w	sl, #3
        uint8_t output_pin = p_config->output_pins[i];
    32f0:	f810 cf01 	ldrb.w	ip, [r0, #1]!
        if (output_pin != NRFX_PWM_PIN_NOT_USED)
    32f4:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    32f8:	d059      	beq.n	33ae <nrfx_pwm_init+0xf6>
            out_pins[i]   = output_pin & ~NRFX_PWM_PIN_INVERTED;
    32fa:	f02c 0380 	bic.w	r3, ip, #128	; 0x80
    32fe:	6013      	str	r3, [r2, #0]
            if (inverted)
    3300:	fa09 fb03 	lsl.w	fp, r9, r3
    3304:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    3308:	f01c 0f80 	tst.w	ip, #128	; 0x80
    p_reg->OUTSET = set_mask;
    330c:	bf14      	ite	ne
    330e:	f8c7 b508 	strne.w	fp, [r7, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    3312:	f8c7 b50c 	streq.w	fp, [r7, #1292]	; 0x50c
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    3316:	f847 a023 	str.w	sl, [r7, r3, lsl #2]
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
    331a:	4570      	cmp	r0, lr
    331c:	f102 0204 	add.w	r2, r2, #4
    3320:	d1e6      	bne.n	32f0 <nrfx_pwm_init+0x38>
    nrf_pwm_pins_set(p_instance->p_registers, out_pins);
    3322:	6828      	ldr	r0, [r5, #0]
        p_reg->PSEL.OUT[i] = out_pins[i];
    3324:	9b00      	ldr	r3, [sp, #0]
    3326:	f8c0 3560 	str.w	r3, [r0, #1376]	; 0x560
    332a:	9b01      	ldr	r3, [sp, #4]
    332c:	f8c0 3564 	str.w	r3, [r0, #1380]	; 0x564
    3330:	9b02      	ldr	r3, [sp, #8]
    3332:	f8c0 3568 	str.w	r3, [r0, #1384]	; 0x568
    3336:	9b03      	ldr	r3, [sp, #12]
    3338:	f8c0 356c 	str.w	r3, [r0, #1388]	; 0x56c
    p_reg->ENABLE = (PWM_ENABLE_ENABLE_Enabled << PWM_ENABLE_ENABLE_Pos);
    333c:	2301      	movs	r3, #1

    configure_pins(p_instance, p_config);

    nrf_pwm_enable(p_instance->p_registers);
    nrf_pwm_configure(p_instance->p_registers,
    333e:	798a      	ldrb	r2, [r1, #6]
    3340:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
    p_reg->PRESCALER  = base_clock;
    3344:	794f      	ldrb	r7, [r1, #5]
    3346:	890b      	ldrh	r3, [r1, #8]
    3348:	f8c0 750c 	str.w	r7, [r0, #1292]	; 0x50c
    p_reg->MODE       = mode;
    334c:	f8c0 2504 	str.w	r2, [r0, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
    3350:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508

NRF_STATIC_INLINE void nrf_pwm_decoder_set(NRF_PWM_Type *     p_reg,
                                           nrf_pwm_dec_load_t dec_load,
                                           nrf_pwm_dec_step_t dec_step)
{
    p_reg->DECODER = ((uint32_t)dec_load << PWM_DECODER_LOAD_Pos) |
    3354:	894b      	ldrh	r3, [r1, #10]
    3356:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
    p_reg->SHORTS = mask;
    335a:	2300      	movs	r3, #0
    335c:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_pwm_decoder_set(p_instance->p_registers,
        p_config->load_mode, p_config->step_mode);

    nrf_pwm_shorts_set(p_instance->p_registers, 0);
    nrf_pwm_int_set(p_instance->p_registers, 0);
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_LOOPSDONE);
    3360:	f44f 718e 	mov.w	r1, #284	; 0x11c
    p_reg->INTEN = mask;
    3364:	f8c0 3300 	str.w	r3, [r0, #768]	; 0x300
    3368:	f002 f814 	bl	5394 <nrf_pwm_event_clear>
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_SEQEND0);
    336c:	f44f 7188 	mov.w	r1, #272	; 0x110
    3370:	6828      	ldr	r0, [r5, #0]
    3372:	f002 f80f 	bl	5394 <nrf_pwm_event_clear>
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_SEQEND1);
    3376:	f44f 718a 	mov.w	r1, #276	; 0x114
    337a:	6828      	ldr	r0, [r5, #0]
    337c:	f002 f80a 	bl	5394 <nrf_pwm_event_clear>
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_STOPPED);
    3380:	f44f 7182 	mov.w	r1, #260	; 0x104
    3384:	6828      	ldr	r0, [r5, #0]
    3386:	f002 f805 	bl	5394 <nrf_pwm_event_clear>
    // handler is not used.
#if defined(USE_DMA_ISSUE_WORKAROUND)
    NRFX_IRQ_PRIORITY_SET(DMA_ISSUE_EGU_IRQn, p_config->irq_priority);
    NRFX_IRQ_ENABLE(DMA_ISSUE_EGU_IRQn);
#else
    if (p_cb->handler)
    338a:	230c      	movs	r3, #12
    338c:	4373      	muls	r3, r6
    338e:	58e3      	ldr	r3, [r4, r3]
    3390:	b123      	cbz	r3, 339c <nrfx_pwm_init+0xe4>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    3392:	6828      	ldr	r0, [r5, #0]
#endif
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_registers),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_registers));
    3394:	f340 3007 	sbfx	r0, r0, #12, #8
    3398:	f7fe f8c6 	bl	1528 <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    339c:	230c      	movs	r3, #12
    339e:	fb03 4406 	mla	r4, r3, r6, r4

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    33a2:	4806      	ldr	r0, [pc, #24]	; (33bc <nrfx_pwm_init+0x104>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    33a4:	2301      	movs	r3, #1
    33a6:	7223      	strb	r3, [r4, #8]
}
    33a8:	b005      	add	sp, #20
    33aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            out_pins[i] = NRF_PWM_PIN_NOT_CONNECTED;
    33ae:	f8c2 8000 	str.w	r8, [r2]
    33b2:	e7b2      	b.n	331a <nrfx_pwm_init+0x62>
        return err_code;
    33b4:	4802      	ldr	r0, [pc, #8]	; (33c0 <nrfx_pwm_init+0x108>)
    33b6:	e7f7      	b.n	33a8 <nrfx_pwm_init+0xf0>
    33b8:	200002c4 	.word	0x200002c4
    33bc:	0bad0000 	.word	0x0bad0000
    33c0:	0bad0005 	.word	0x0bad0005

000033c4 <nrfx_pwm_simple_playback>:

uint32_t nrfx_pwm_simple_playback(nrfx_pwm_t const *         p_instance,
                                  nrf_pwm_sequence_t const * p_sequence,
                                  uint16_t                   playback_count,
                                  uint32_t                   flags)
{
    33c4:	b4f0      	push	{r4, r5, r6, r7}
    33c6:	460d      	mov	r5, r1
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    33c8:	7901      	ldrb	r1, [r0, #4]
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
    33ca:	f8d5 c000 	ldr.w	ip, [r5]
    p_reg->SEQ[seq_id].CNT = length;
    33ce:	88af      	ldrh	r7, [r5, #4]
    nrf_pwm_seq_refresh_set(  p_reg, seq_id, p_seq->repeats);
    33d0:	68ae      	ldr	r6, [r5, #8]
    nrf_pwm_seq_end_delay_set(p_reg, seq_id, p_seq->end_delay);
    33d2:	68ed      	ldr	r5, [r5, #12]
{
    33d4:	461c      	mov	r4, r3
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    33d6:	4b18      	ldr	r3, [pc, #96]	; (3438 <nrfx_pwm_simple_playback+0x74>)
    33d8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    33dc:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    NRFX_ASSERT(playback_count > 0);
    NRFX_ASSERT(nrfx_is_in_ram(p_sequence->values.p_raw));

    // To take advantage of the looping mechanism, we need to use both sequences
    // (single sequence can be played back only once).
    nrf_pwm_sequence_set(p_instance->p_registers, 0, p_sequence);
    33e0:	6803      	ldr	r3, [r0, #0]
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
    33e2:	f8c3 c520 	str.w	ip, [r3, #1312]	; 0x520
    p_reg->SEQ[seq_id].CNT = length;
    33e6:	f8c3 7524 	str.w	r7, [r3, #1316]	; 0x524
    p_reg->SEQ[seq_id].REFRESH  = refresh;
    33ea:	f8c3 6528 	str.w	r6, [r3, #1320]	; 0x528
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
    33ee:	f8c3 552c 	str.w	r5, [r3, #1324]	; 0x52c
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
    33f2:	f8c3 c540 	str.w	ip, [r3, #1344]	; 0x540
    p_reg->SEQ[seq_id].CNT = length;
    33f6:	f8c3 7544 	str.w	r7, [r3, #1348]	; 0x544
    p_reg->SEQ[seq_id].REFRESH  = refresh;
    33fa:	f8c3 6548 	str.w	r6, [r3, #1352]	; 0x548
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
    33fe:	f8c3 554c 	str.w	r5, [r3, #1356]	; 0x54c
    nrf_pwm_sequence_set(p_instance->p_registers, 1, p_sequence);
    bool odd = (playback_count & 1);
    3402:	f002 0501 	and.w	r5, r2, #1
}

NRF_STATIC_INLINE void nrf_pwm_loop_set(NRF_PWM_Type * p_reg,
                                        uint16_t       loop_count)
{
    p_reg->LOOP = loop_count;
    3406:	eb05 0252 	add.w	r2, r5, r2, lsr #1
    340a:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    nrf_pwm_loop_set(p_instance->p_registers,
        (playback_count / 2) + (odd ? 1 : 0));

    uint32_t shorts_mask;
    if (flags & NRFX_PWM_FLAG_STOP)
    340e:	07e2      	lsls	r2, r4, #31
    3410:	d410      	bmi.n	3434 <nrfx_pwm_simple_playback+0x70>
    {
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
    }
    else if (flags & NRFX_PWM_FLAG_LOOP)
    3412:	f014 0202 	ands.w	r2, r4, #2
    3416:	d003      	beq.n	3420 <nrfx_pwm_simple_playback+0x5c>
    {
        shorts_mask = odd ? NRF_PWM_SHORT_LOOPSDONE_SEQSTART1_MASK
                          : NRF_PWM_SHORT_LOOPSDONE_SEQSTART0_MASK;
    3418:	2d00      	cmp	r5, #0
    341a:	bf14      	ite	ne
    341c:	2208      	movne	r2, #8
    341e:	2204      	moveq	r2, #4
                  __func__,
                  p_sequence->length);
    NRFX_LOG_DEBUG("Sequence data:");
    NRFX_LOG_HEXDUMP_DEBUG((uint8_t *)p_sequence->values.p_raw,
                           p_sequence->length * sizeof(uint16_t));
    return start_playback(p_instance, p_cb, flags,
    3420:	2d00      	cmp	r5, #0
    p_reg->SHORTS = mask;
    3422:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    3426:	b2e2      	uxtb	r2, r4
    3428:	bf14      	ite	ne
    342a:	230c      	movne	r3, #12
    342c:	2308      	moveq	r3, #8
        odd ? NRF_PWM_TASK_SEQSTART1 : NRF_PWM_TASK_SEQSTART0);
}
    342e:	bcf0      	pop	{r4, r5, r6, r7}
    return start_playback(p_instance, p_cb, flags,
    3430:	f001 bfb8 	b.w	53a4 <start_playback.isra.2>
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
    3434:	2210      	movs	r2, #16
    3436:	e7f3      	b.n	3420 <nrfx_pwm_simple_playback+0x5c>
    3438:	200002c4 	.word	0x200002c4

0000343c <nrfx_pwm_is_stopped>:

    bool ret_val = false;

    // If the event handler is used (interrupts are enabled), the state will
    // be changed in interrupt handler when the STOPPED event occurs.
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    343c:	4b08      	ldr	r3, [pc, #32]	; (3460 <nrfx_pwm_is_stopped+0x24>)
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    343e:	7902      	ldrb	r2, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    3440:	210c      	movs	r1, #12
    3442:	fb01 3202 	mla	r2, r1, r2, r3
    {
        ret_val = true;
    }
    // If interrupts are disabled, we must check the STOPPED event here.
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
    3446:	6801      	ldr	r1, [r0, #0]
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    3448:	7a13      	ldrb	r3, [r2, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    344a:	f8d1 1104 	ldr.w	r1, [r1, #260]	; 0x104
    344e:	b2db      	uxtb	r3, r3
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
    3450:	b919      	cbnz	r1, 345a <nrfx_pwm_is_stopped+0x1e>
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    3452:	1e98      	subs	r0, r3, #2
    3454:	bf18      	it	ne
    3456:	2001      	movne	r0, #1
    3458:	4770      	bx	lr
    {
        p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    345a:	2001      	movs	r0, #1
    345c:	7210      	strb	r0, [r2, #8]
        ret_val = true;
    }

    NRFX_LOG_INFO("%s returned %d.", __func__, ret_val);
    return ret_val;
}
    345e:	4770      	bx	lr
    3460:	200002c4 	.word	0x200002c4

00003464 <z_sys_device_do_config_level>:
		__device_APPLICATION_start,
		/* End marker */
		__device_init_end,
	};

	z_sys_device_level = level;
    3464:	4b0a      	ldr	r3, [pc, #40]	; (3490 <z_sys_device_do_config_level+0x2c>)
{
    3466:	b570      	push	{r4, r5, r6, lr}
	z_sys_device_level = level;
    3468:	7018      	strb	r0, [r3, #0]
	for (info = config_levels[level]; info < config_levels[level+1];
    346a:	4b0a      	ldr	r3, [pc, #40]	; (3494 <z_sys_device_do_config_level+0x30>)
    346c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    3470:	3001      	adds	r0, #1
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
    3472:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
    3474:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    3478:	42a5      	cmp	r5, r4
    347a:	d800      	bhi.n	347e <z_sys_device_do_config_level+0x1a>
		} else {
			z_object_init(info);
		}
	}
}
    347c:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
    347e:	6823      	ldr	r3, [r4, #0]
    3480:	4620      	mov	r0, r4
    3482:	685b      	ldr	r3, [r3, #4]
    3484:	4798      	blx	r3
		if (retval != 0) {
    3486:	b100      	cbz	r0, 348a <z_sys_device_do_config_level+0x26>
			info->driver_api = NULL;
    3488:	6066      	str	r6, [r4, #4]
								info++) {
    348a:	340c      	adds	r4, #12
    348c:	e7f4      	b.n	3478 <z_sys_device_do_config_level+0x14>
    348e:	bf00      	nop
    3490:	200003f0 	.word	0x200003f0
    3494:	00005a40 	.word	0x00005a40

00003498 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
    3498:	4b10      	ldr	r3, [pc, #64]	; (34dc <z_impl_device_get_binding+0x44>)
{
    349a:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
    349c:	4c10      	ldr	r4, [pc, #64]	; (34e0 <z_impl_device_get_binding+0x48>)
{
    349e:	4605      	mov	r5, r0
    34a0:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
    34a2:	429c      	cmp	r4, r3
    34a4:	d104      	bne.n	34b0 <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
    34a6:	4c0e      	ldr	r4, [pc, #56]	; (34e0 <z_impl_device_get_binding+0x48>)
    34a8:	42b4      	cmp	r4, r6
    34aa:	d109      	bne.n	34c0 <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
    34ac:	2400      	movs	r4, #0
    34ae:	e012      	b.n	34d6 <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
    34b0:	6862      	ldr	r2, [r4, #4]
    34b2:	b11a      	cbz	r2, 34bc <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
    34b4:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
    34b6:	6812      	ldr	r2, [r2, #0]
    34b8:	42aa      	cmp	r2, r5
    34ba:	d00c      	beq.n	34d6 <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
    34bc:	340c      	adds	r4, #12
    34be:	e7f0      	b.n	34a2 <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
    34c0:	6863      	ldr	r3, [r4, #4]
    34c2:	b90b      	cbnz	r3, 34c8 <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
    34c4:	340c      	adds	r4, #12
    34c6:	e7ef      	b.n	34a8 <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
    34c8:	6823      	ldr	r3, [r4, #0]
    34ca:	4628      	mov	r0, r5
    34cc:	6819      	ldr	r1, [r3, #0]
    34ce:	f001 fd44 	bl	4f5a <strcmp>
    34d2:	2800      	cmp	r0, #0
    34d4:	d1f6      	bne.n	34c4 <z_impl_device_get_binding+0x2c>
}
    34d6:	4620      	mov	r0, r4
    34d8:	bd70      	pop	{r4, r5, r6, pc}
    34da:	bf00      	nop
    34dc:	200025c4 	.word	0x200025c4
    34e0:	20002534 	.word	0x20002534

000034e4 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
    34e4:	b510      	push	{r4, lr}
    34e6:	4604      	mov	r4, r0
	z_impl_log_panic();
    34e8:	f7fd fbbe 	bl	c68 <z_impl_log_panic>
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
    34ec:	2301      	movs	r3, #1
    34ee:	f04f 0100 	mov.w	r1, #0
    34f2:	f363 0107 	bfi	r1, r3, #0, #8
    34f6:	4a06      	ldr	r2, [pc, #24]	; (3510 <k_sys_fatal_error_handler+0x2c>)
    34f8:	4b06      	ldr	r3, [pc, #24]	; (3514 <k_sys_fatal_error_handler+0x30>)
    34fa:	4807      	ldr	r0, [pc, #28]	; (3518 <k_sys_fatal_error_handler+0x34>)
    34fc:	1a9b      	subs	r3, r3, r2
    34fe:	08db      	lsrs	r3, r3, #3
    3500:	f363 118f 	bfi	r1, r3, #6, #10
    3504:	f001 f935 	bl	4772 <log_0>
	arch_system_halt(reason);
    3508:	4620      	mov	r0, r4
    350a:	f001 ff84 	bl	5416 <arch_system_halt>
    350e:	bf00      	nop
    3510:	000058f8 	.word	0x000058f8
    3514:	00005910 	.word	0x00005910
    3518:	000062d2 	.word	0x000062d2

0000351c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    351c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    3520:	4605      	mov	r5, r0
    3522:	4688      	mov	r8, r1
	return z_impl_k_current_get();
    3524:	f000 fc38 	bl	3d98 <z_impl_k_current_get>
	struct k_thread *thread = k_current_get();

	/* sanitycheck looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating sanitycheck
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    3528:	2201      	movs	r2, #1
    352a:	f04f 0300 	mov.w	r3, #0
    352e:	f362 0307 	bfi	r3, r2, #0, #8
    3532:	4c24      	ldr	r4, [pc, #144]	; (35c4 <z_fatal_error+0xa8>)
    3534:	4a24      	ldr	r2, [pc, #144]	; (35c8 <z_fatal_error+0xac>)
    3536:	2d04      	cmp	r5, #4
    3538:	eba4 0402 	sub.w	r4, r4, r2
    353c:	f3c4 04c9 	ubfx	r4, r4, #3, #10
    3540:	bf96      	itet	ls
    3542:	4a22      	ldrls	r2, [pc, #136]	; (35cc <z_fatal_error+0xb0>)
    3544:	4a22      	ldrhi	r2, [pc, #136]	; (35d0 <z_fatal_error+0xb4>)
    3546:	f852 2025 	ldrls.w	r2, [r2, r5, lsl #2]
    354a:	f364 138f 	bfi	r3, r4, #6, #10
    354e:	f8ad 3000 	strh.w	r3, [sp]
    3552:	4606      	mov	r6, r0
    3554:	2300      	movs	r3, #0
    3556:	4629      	mov	r1, r5
    3558:	481e      	ldr	r0, [pc, #120]	; (35d4 <z_fatal_error+0xb8>)
    355a:	f001 f943 	bl	47e4 <log_3>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    355e:	f8d8 301c 	ldr.w	r3, [r8, #28]
    3562:	f3c3 0308 	ubfx	r3, r3, #0, #9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if (arch_is_in_nested_exception(esf)) {
    3566:	b14b      	cbz	r3, 357c <z_fatal_error+0x60>
		LOG_ERR("Fault during interrupt handling\n");
    3568:	f04f 0100 	mov.w	r1, #0
    356c:	2301      	movs	r3, #1
    356e:	f363 0107 	bfi	r1, r3, #0, #8
    3572:	f364 118f 	bfi	r1, r4, #6, #10
    3576:	4818      	ldr	r0, [pc, #96]	; (35d8 <z_fatal_error+0xbc>)
    3578:	f001 f8fb 	bl	4772 <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    357c:	f04f 0700 	mov.w	r7, #0
    3580:	2301      	movs	r3, #1
    3582:	f363 0707 	bfi	r7, r3, #0, #8
	const char *thread_name = k_thread_name_get(thread);
    3586:	4630      	mov	r0, r6
	LOG_ERR("Current thread: %p (%s)", thread,
    3588:	f364 178f 	bfi	r7, r4, #6, #10
	const char *thread_name = k_thread_name_get(thread);
    358c:	f002 f823 	bl	55d6 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
    3590:	b1b0      	cbz	r0, 35c0 <z_fatal_error+0xa4>
    3592:	7802      	ldrb	r2, [r0, #0]
		thread_name = "unknown";
    3594:	4b11      	ldr	r3, [pc, #68]	; (35dc <z_fatal_error+0xc0>)
    3596:	2a00      	cmp	r2, #0
    3598:	bf08      	it	eq
    359a:	4618      	moveq	r0, r3
	LOG_ERR("Current thread: %p (%s)", thread,
    359c:	f7fd f9de 	bl	95c <log_strdup>
    35a0:	463b      	mov	r3, r7
    35a2:	4602      	mov	r2, r0
    35a4:	4631      	mov	r1, r6
    35a6:	480e      	ldr	r0, [pc, #56]	; (35e0 <z_fatal_error+0xc4>)
    35a8:	f001 f904 	bl	47b4 <log_2>
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
    35ac:	4641      	mov	r1, r8
    35ae:	4628      	mov	r0, r5
    35b0:	f7ff ff98 	bl	34e4 <k_sys_fatal_error_handler>
	z_impl_k_thread_abort(thread);
    35b4:	4630      	mov	r0, r6
			}
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	k_thread_abort(thread);
}
    35b6:	b002      	add	sp, #8
    35b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    35bc:	f7fe bb72 	b.w	1ca4 <z_impl_k_thread_abort>
		thread_name = "unknown";
    35c0:	4806      	ldr	r0, [pc, #24]	; (35dc <z_fatal_error+0xc0>)
    35c2:	e7eb      	b.n	359c <z_fatal_error+0x80>
    35c4:	00005910 	.word	0x00005910
    35c8:	000058f8 	.word	0x000058f8
    35cc:	00005a58 	.word	0x00005a58
    35d0:	0000632b 	.word	0x0000632b
    35d4:	00006341 	.word	0x00006341
    35d8:	00006369 	.word	0x00006369
    35dc:	00006339 	.word	0x00006339
    35e0:	0000638a 	.word	0x0000638a

000035e4 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
    35e4:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    35e6:	4d0b      	ldr	r5, [pc, #44]	; (3614 <idle+0x30>)
	__asm__ volatile(
    35e8:	f04f 0220 	mov.w	r2, #32
    35ec:	f3ef 8311 	mrs	r3, BASEPRI
    35f0:	f382 8811 	msr	BASEPRI, r2
    35f4:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
    35f8:	f002 f833 	bl	5662 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    35fc:	2101      	movs	r1, #1
    35fe:	2802      	cmp	r0, #2
	s32_t ticks = z_get_next_timeout_expiry();
    3600:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    3602:	bfd8      	it	le
    3604:	4608      	movle	r0, r1
    3606:	f002 f83c 	bl	5682 <z_set_timeout_expiry>
	_kernel.idle = ticks;
    360a:	622c      	str	r4, [r5, #32]
 * @return N/A
 * @req K-CPU-IDLE-001
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    360c:	f7fd fffa 	bl	1604 <arch_cpu_idle>
    3610:	e7ea      	b.n	35e8 <idle+0x4>
    3612:	bf00      	nop
    3614:	200003a8 	.word	0x200003a8

00003618 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    3618:	4802      	ldr	r0, [pc, #8]	; (3624 <z_bss_zero+0xc>)
    361a:	4a03      	ldr	r2, [pc, #12]	; (3628 <z_bss_zero+0x10>)
    361c:	2100      	movs	r1, #0
    361e:	1a12      	subs	r2, r2, r0
    3620:	f001 bcd1 	b.w	4fc6 <memset>
    3624:	20000000 	.word	0x20000000
    3628:	200003f4 	.word	0x200003f4

0000362c <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    362c:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    362e:	4806      	ldr	r0, [pc, #24]	; (3648 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    3630:	4a06      	ldr	r2, [pc, #24]	; (364c <z_data_copy+0x20>)
    3632:	4907      	ldr	r1, [pc, #28]	; (3650 <z_data_copy+0x24>)
    3634:	1a12      	subs	r2, r2, r0
    3636:	f001 fc9c 	bl	4f72 <memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    363a:	4a06      	ldr	r2, [pc, #24]	; (3654 <z_data_copy+0x28>)
    363c:	4906      	ldr	r1, [pc, #24]	; (3658 <z_data_copy+0x2c>)
    363e:	4807      	ldr	r0, [pc, #28]	; (365c <z_data_copy+0x30>)
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    3640:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    3644:	f001 bc95 	b.w	4f72 <memcpy>
    3648:	20002500 	.word	0x20002500
    364c:	200026b0 	.word	0x200026b0
    3650:	000063f8 	.word	0x000063f8
    3654:	00000000 	.word	0x00000000
    3658:	000063f8 	.word	0x000063f8
    365c:	20000000 	.word	0x20000000

00003660 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    3660:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
    3662:	2002      	movs	r0, #2
    3664:	f7ff fefe 	bl	3464 <z_sys_device_do_config_level>
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    3668:	4a08      	ldr	r2, [pc, #32]	; (368c <bg_thread_main+0x2c>)
    366a:	4909      	ldr	r1, [pc, #36]	; (3690 <bg_thread_main+0x30>)
    366c:	4809      	ldr	r0, [pc, #36]	; (3694 <bg_thread_main+0x34>)
    366e:	f001 f84f 	bl	4710 <printk>
			KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
    3672:	2003      	movs	r0, #3
    3674:	f7ff fef6 	bl	3464 <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
    3678:	f000 fc8e 	bl	3f98 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    367c:	f7fc ffd8 	bl	630 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    3680:	4a05      	ldr	r2, [pc, #20]	; (3698 <bg_thread_main+0x38>)
    3682:	7b13      	ldrb	r3, [r2, #12]
    3684:	f023 0301 	bic.w	r3, r3, #1
    3688:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    368a:	bd08      	pop	{r3, pc}
    368c:	00005d13 	.word	0x00005d13
    3690:	000063a2 	.word	0x000063a2
    3694:	000063c2 	.word	0x000063c2
    3698:	2000033c 	.word	0x2000033c

0000369c <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    369c:	b580      	push	{r7, lr}
    369e:	b0a2      	sub	sp, #136	; 0x88
#endif	/* CONFIG_STACK_CANARIES */

	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
    36a0:	f7fd f8b4 	bl	80c <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
    36a4:	4b35      	ldr	r3, [pc, #212]	; (377c <z_cstart+0xe0>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    36a6:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    36aa:	4c35      	ldr	r4, [pc, #212]	; (3780 <z_cstart+0xe4>)
	_kernel.ready_q.cache = &z_main_thread;
    36ac:	4e35      	ldr	r6, [pc, #212]	; (3784 <z_cstart+0xe8>)
    36ae:	6963      	ldr	r3, [r4, #20]
    36b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    36b4:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    36b6:	2500      	movs	r5, #0
    36b8:	23e0      	movs	r3, #224	; 0xe0
    36ba:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    36be:	77e5      	strb	r5, [r4, #31]
    36c0:	7625      	strb	r5, [r4, #24]
    36c2:	7665      	strb	r5, [r4, #25]
    36c4:	76a5      	strb	r5, [r4, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    36c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    36c8:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    36cc:	6263      	str	r3, [r4, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    36ce:	f7fe fad5 	bl	1c7c <z_arm_fault_init>
	z_arm_cpu_idle_init();
    36d2:	f7fd ff91 	bl	15f8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    36d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    36da:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    36dc:	62e3      	str	r3, [r4, #44]	; 0x2c

	/* perform any architecture-specific initialization */
	arch_kernel_init();

#ifdef CONFIG_MULTITHREADING
	struct k_thread dummy_thread = {
    36de:	ab07      	add	r3, sp, #28
    36e0:	226c      	movs	r2, #108	; 0x6c
    36e2:	4629      	mov	r1, r5
    36e4:	4618      	mov	r0, r3
    36e6:	f001 fc6e 	bl	4fc6 <memset>
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
    36ea:	4c27      	ldr	r4, [pc, #156]	; (3788 <z_cstart+0xec>)
	struct k_thread dummy_thread = {
    36ec:	2701      	movs	r7, #1
	_current = &dummy_thread;
    36ee:	60a0      	str	r0, [r4, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    36f0:	4628      	mov	r0, r5
	struct k_thread dummy_thread = {
    36f2:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    36f6:	f7ff feb5 	bl	3464 <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    36fa:	4638      	mov	r0, r7
    36fc:	f7ff feb2 	bl	3464 <z_sys_device_do_config_level>
	z_sched_init();
    3700:	f000 faca 	bl	3c98 <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
    3704:	4b21      	ldr	r3, [pc, #132]	; (378c <z_cstart+0xf0>)
	_kernel.ready_q.cache = &z_main_thread;
    3706:	6266      	str	r6, [r4, #36]	; 0x24
	z_setup_new_thread(&z_main_thread, z_main_stack,
    3708:	f44f 6280 	mov.w	r2, #1024	; 0x400
    370c:	e9cd 7304 	strd	r7, r3, [sp, #16]
    3710:	e9cd 5502 	strd	r5, r5, [sp, #8]
    3714:	4b1e      	ldr	r3, [pc, #120]	; (3790 <z_cstart+0xf4>)
    3716:	491f      	ldr	r1, [pc, #124]	; (3794 <z_cstart+0xf8>)
    3718:	e9cd 5500 	strd	r5, r5, [sp]
    371c:	4630      	mov	r0, r6
    371e:	f000 fbaf 	bl	3e80 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3722:	7b73      	ldrb	r3, [r6, #13]
    3724:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    3728:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
    372c:	7372      	strb	r2, [r6, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    372e:	d104      	bne.n	373a <z_cstart+0x9e>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
    3730:	69b3      	ldr	r3, [r6, #24]
    3732:	b913      	cbnz	r3, 373a <z_cstart+0x9e>
		z_add_thread_to_ready_q(thread);
    3734:	4630      	mov	r0, r6
    3736:	f000 f955 	bl	39e4 <z_add_thread_to_ready_q>
	z_setup_new_thread(thr, stack,
    373a:	4b17      	ldr	r3, [pc, #92]	; (3798 <z_cstart+0xfc>)
    373c:	4d17      	ldr	r5, [pc, #92]	; (379c <z_cstart+0x100>)
    373e:	9305      	str	r3, [sp, #20]
    3740:	2201      	movs	r2, #1
    3742:	230f      	movs	r3, #15
    3744:	e9cd 3203 	strd	r3, r2, [sp, #12]
    3748:	2300      	movs	r3, #0
    374a:	e9cd 3301 	strd	r3, r3, [sp, #4]
    374e:	9300      	str	r3, [sp, #0]
    3750:	f44f 72a0 	mov.w	r2, #320	; 0x140
    3754:	4b12      	ldr	r3, [pc, #72]	; (37a0 <z_cstart+0x104>)
    3756:	4913      	ldr	r1, [pc, #76]	; (37a4 <z_cstart+0x108>)
    3758:	4628      	mov	r0, r5
    375a:	f000 fb91 	bl	3e80 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    375e:	7b6b      	ldrb	r3, [r5, #13]
	_kernel.cpus[0].idle_thread = &z_idle_thread;
    3760:	60e5      	str	r5, [r4, #12]
    3762:	f023 0304 	bic.w	r3, r3, #4
    3766:	736b      	strb	r3, [r5, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    3768:	4b0f      	ldr	r3, [pc, #60]	; (37a8 <z_cstart+0x10c>)
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
    376a:	490a      	ldr	r1, [pc, #40]	; (3794 <z_cstart+0xf8>)
    376c:	4805      	ldr	r0, [pc, #20]	; (3784 <z_cstart+0xe8>)
	list->tail = (sys_dnode_t *)list;
    376e:	e9c4 3306 	strd	r3, r3, [r4, #24]
    3772:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3776:	4b06      	ldr	r3, [pc, #24]	; (3790 <z_cstart+0xf4>)
    3778:	f7fd ff20 	bl	15bc <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    377c:	20002038 	.word	0x20002038
    3780:	e000ed00 	.word	0xe000ed00
    3784:	2000033c 	.word	0x2000033c
    3788:	200003a8 	.word	0x200003a8
    378c:	000063ec 	.word	0x000063ec
    3790:	00003661 	.word	0x00003661
    3794:	200012f8 	.word	0x200012f8
    3798:	000063f1 	.word	0x000063f1
    379c:	200002d0 	.word	0x200002d0
    37a0:	000035e5 	.word	0x000035e5
    37a4:	200016f8 	.word	0x200016f8
    37a8:	200003c0 	.word	0x200003c0

000037ac <init_mem_slab_module>:
 */
static int init_mem_slab_module(struct device *dev)
{
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    37ac:	4b0b      	ldr	r3, [pc, #44]	; (37dc <init_mem_slab_module+0x30>)
    37ae:	480c      	ldr	r0, [pc, #48]	; (37e0 <init_mem_slab_module+0x34>)
{
    37b0:	b570      	push	{r4, r5, r6, lr}
	slab->free_list = NULL;
    37b2:	2400      	movs	r4, #0
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    37b4:	4283      	cmp	r3, r0
    37b6:	d301      	bcc.n	37bc <init_mem_slab_module+0x10>
		create_free_list(slab);
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}
	return 0;
}
    37b8:	2000      	movs	r0, #0
    37ba:	bd70      	pop	{r4, r5, r6, pc}
	p = slab->buffer;
    37bc:	691a      	ldr	r2, [r3, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
    37be:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    37c0:	615c      	str	r4, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    37c2:	2100      	movs	r1, #0
    37c4:	42a9      	cmp	r1, r5
    37c6:	d101      	bne.n	37cc <init_mem_slab_module+0x20>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    37c8:	331c      	adds	r3, #28
    37ca:	e7f3      	b.n	37b4 <init_mem_slab_module+0x8>
		*(char **)p = slab->free_list;
    37cc:	695e      	ldr	r6, [r3, #20]
    37ce:	6016      	str	r6, [r2, #0]
		p += slab->block_size;
    37d0:	68de      	ldr	r6, [r3, #12]
		slab->free_list = p;
    37d2:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    37d4:	3101      	adds	r1, #1
		p += slab->block_size;
    37d6:	4432      	add	r2, r6
    37d8:	e7f4      	b.n	37c4 <init_mem_slab_module+0x18>
    37da:	bf00      	nop
    37dc:	20002654 	.word	0x20002654
    37e0:	20002654 	.word	0x20002654

000037e4 <k_mem_slab_alloc>:

	z_object_init(slab);
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
    37e4:	b510      	push	{r4, lr}
    37e6:	4613      	mov	r3, r2
    37e8:	460c      	mov	r4, r1
    37ea:	f04f 0220 	mov.w	r2, #32
    37ee:	f3ef 8111 	mrs	r1, BASEPRI
    37f2:	f382 8811 	msr	BASEPRI, r2
    37f6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
    37fa:	6942      	ldr	r2, [r0, #20]
    37fc:	b15a      	cbz	r2, 3816 <k_mem_slab_alloc+0x32>
		/* take a free block */
		*mem = slab->free_list;
    37fe:	6022      	str	r2, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    3800:	6813      	ldr	r3, [r2, #0]
    3802:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    3804:	6983      	ldr	r3, [r0, #24]
    3806:	3301      	adds	r3, #1
    3808:	6183      	str	r3, [r0, #24]
		result = 0;
    380a:	2000      	movs	r0, #0
	__asm__ volatile(
    380c:	f381 8811 	msr	BASEPRI, r1
    3810:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
    3814:	e00d      	b.n	3832 <k_mem_slab_alloc+0x4e>
	} else if (timeout == K_NO_WAIT) {
    3816:	b91b      	cbnz	r3, 3820 <k_mem_slab_alloc+0x3c>
		*mem = NULL;
    3818:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    381a:	f06f 000b 	mvn.w	r0, #11
    381e:	e7f5      	b.n	380c <k_mem_slab_alloc+0x28>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
    3820:	4602      	mov	r2, r0
    3822:	4804      	ldr	r0, [pc, #16]	; (3834 <k_mem_slab_alloc+0x50>)
    3824:	f000 f9f6 	bl	3c14 <z_pend_curr>
		if (result == 0) {
    3828:	b918      	cbnz	r0, 3832 <k_mem_slab_alloc+0x4e>
			*mem = _current->base.swap_data;
    382a:	4b03      	ldr	r3, [pc, #12]	; (3838 <k_mem_slab_alloc+0x54>)
    382c:	689b      	ldr	r3, [r3, #8]
    382e:	695b      	ldr	r3, [r3, #20]
    3830:	6023      	str	r3, [r4, #0]
}
    3832:	bd10      	pop	{r4, pc}
    3834:	200003f1 	.word	0x200003f1
    3838:	200003a8 	.word	0x200003a8

0000383c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    383c:	b570      	push	{r4, r5, r6, lr}
    383e:	4604      	mov	r4, r0
    3840:	460d      	mov	r5, r1
	__asm__ volatile(
    3842:	f04f 0320 	mov.w	r3, #32
    3846:	f3ef 8611 	mrs	r6, BASEPRI
    384a:	f383 8811 	msr	BASEPRI, r3
    384e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    3852:	f001 fe87 	bl	5564 <z_unpend_first_thread>

	if (pending_thread != NULL) {
    3856:	b180      	cbz	r0, 387a <k_mem_slab_free+0x3e>
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    3858:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    385a:	6142      	str	r2, [r0, #20]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    385c:	7b42      	ldrb	r2, [r0, #13]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    385e:	2100      	movs	r1, #0
    3860:	06d2      	lsls	r2, r2, #27
    3862:	6681      	str	r1, [r0, #104]	; 0x68
    3864:	d103      	bne.n	386e <k_mem_slab_free+0x32>
	if (z_is_thread_ready(thread)) {
    3866:	6983      	ldr	r3, [r0, #24]
    3868:	b90b      	cbnz	r3, 386e <k_mem_slab_free+0x32>
		z_add_thread_to_ready_q(thread);
    386a:	f000 f8bb 	bl	39e4 <z_add_thread_to_ready_q>
		z_ready_thread(pending_thread);
		z_reschedule(&lock, key);
    386e:	4631      	mov	r1, r6
    3870:	4808      	ldr	r0, [pc, #32]	; (3894 <k_mem_slab_free+0x58>)
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
    3872:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
    3876:	f001 be1d 	b.w	54b4 <z_reschedule>
		**(char ***)mem = slab->free_list;
    387a:	682b      	ldr	r3, [r5, #0]
    387c:	6962      	ldr	r2, [r4, #20]
    387e:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
    3880:	682b      	ldr	r3, [r5, #0]
    3882:	6163      	str	r3, [r4, #20]
		slab->num_used--;
    3884:	69a3      	ldr	r3, [r4, #24]
    3886:	3b01      	subs	r3, #1
    3888:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    388a:	f386 8811 	msr	BASEPRI, r6
    388e:	f3bf 8f6f 	isb	sy
}
    3892:	bd70      	pop	{r4, r5, r6, pc}
    3894:	200003f1 	.word	0x200003f1

00003898 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    3898:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    389a:	4c08      	ldr	r4, [pc, #32]	; (38bc <z_reset_time_slice+0x24>)
    389c:	6823      	ldr	r3, [r4, #0]
    389e:	b15b      	cbz	r3, 38b8 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    38a0:	f7fd fdac 	bl	13fc <z_clock_elapsed>
    38a4:	6823      	ldr	r3, [r4, #0]
    38a6:	4a06      	ldr	r2, [pc, #24]	; (38c0 <z_reset_time_slice+0x28>)
    38a8:	4418      	add	r0, r3
    38aa:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    38ac:	2100      	movs	r1, #0
    38ae:	4618      	mov	r0, r3
	}
}
    38b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
    38b4:	f001 bee5 	b.w	5682 <z_set_timeout_expiry>
}
    38b8:	bd10      	pop	{r4, pc}
    38ba:	bf00      	nop
    38bc:	200003e0 	.word	0x200003e0
    38c0:	200003a8 	.word	0x200003a8

000038c4 <k_sched_time_slice_set>:

void k_sched_time_slice_set(s32_t slice, int prio)
{
    38c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    38c6:	460d      	mov	r5, r1
	__asm__ volatile(
    38c8:	f04f 0320 	mov.w	r3, #32
    38cc:	f3ef 8411 	mrs	r4, BASEPRI
    38d0:	f383 8811 	msr	BASEPRI, r3
    38d4:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    38d8:	4b0d      	ldr	r3, [pc, #52]	; (3910 <k_sched_time_slice_set+0x4c>)
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (u32_t)((t * to_hz + off) / from_hz);
    38da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    38de:	f240 36e7 	movw	r6, #999	; 0x3e7
    38e2:	2700      	movs	r7, #0
    38e4:	fbe1 6700 	umlal	r6, r7, r1, r0
    38e8:	2200      	movs	r2, #0
    38ea:	611a      	str	r2, [r3, #16]
    38ec:	4630      	mov	r0, r6
    38ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    38f2:	2300      	movs	r3, #0
    38f4:	4639      	mov	r1, r7
    38f6:	f7fc fbf1 	bl	dc <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    38fa:	4b06      	ldr	r3, [pc, #24]	; (3914 <k_sched_time_slice_set+0x50>)
    38fc:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    38fe:	4b06      	ldr	r3, [pc, #24]	; (3918 <k_sched_time_slice_set+0x54>)
    3900:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    3902:	f7ff ffc9 	bl	3898 <z_reset_time_slice>
	__asm__ volatile(
    3906:	f384 8811 	msr	BASEPRI, r4
    390a:	f3bf 8f6f 	isb	sy
	}
}
    390e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3910:	200003a8 	.word	0x200003a8
    3914:	200003e0 	.word	0x200003e0
    3918:	200003dc 	.word	0x200003dc

0000391c <k_sched_lock>:
	__asm__ volatile(
    391c:	f04f 0320 	mov.w	r3, #32
    3920:	f3ef 8111 	mrs	r1, BASEPRI
    3924:	f383 8811 	msr	BASEPRI, r3
    3928:	f3bf 8f6f 	isb	sy
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
    392c:	4b04      	ldr	r3, [pc, #16]	; (3940 <k_sched_lock+0x24>)
    392e:	689a      	ldr	r2, [r3, #8]
    3930:	7bd3      	ldrb	r3, [r2, #15]
    3932:	3b01      	subs	r3, #1
    3934:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    3936:	f381 8811 	msr	BASEPRI, r1
    393a:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
    393e:	4770      	bx	lr
    3940:	200003a8 	.word	0x200003a8

00003944 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    3944:	4b09      	ldr	r3, [pc, #36]	; (396c <z_priq_dumb_remove+0x28>)
    3946:	f103 0228 	add.w	r2, r3, #40	; 0x28
    394a:	4282      	cmp	r2, r0
    394c:	d105      	bne.n	395a <z_priq_dumb_remove+0x16>
    394e:	689b      	ldr	r3, [r3, #8]
    3950:	428b      	cmp	r3, r1
    3952:	d102      	bne.n	395a <z_priq_dumb_remove+0x16>
    3954:	7b4b      	ldrb	r3, [r1, #13]
    3956:	06db      	lsls	r3, r3, #27
    3958:	d106      	bne.n	3968 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    395a:	e9d1 3200 	ldrd	r3, r2, [r1]
    395e:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    3960:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    3962:	2300      	movs	r3, #0
	node->prev = NULL;
    3964:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    3968:	4770      	bx	lr
    396a:	bf00      	nop
    396c:	200003a8 	.word	0x200003a8

00003970 <update_cache>:
{
    3970:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
    3972:	4c0d      	ldr	r4, [pc, #52]	; (39a8 <update_cache+0x38>)
{
    3974:	4602      	mov	r2, r0
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
    3976:	f104 0028 	add.w	r0, r4, #40	; 0x28
    397a:	f001 fdbc 	bl	54f6 <z_priq_dumb_best>
	return th ? th : _current_cpu->idle_thread;
    397e:	4605      	mov	r5, r0
    3980:	b900      	cbnz	r0, 3984 <update_cache+0x14>
    3982:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
    3984:	68a3      	ldr	r3, [r4, #8]
    3986:	b94a      	cbnz	r2, 399c <update_cache+0x2c>
	if (z_is_thread_prevented_from_running(_current)) {
    3988:	7b5a      	ldrb	r2, [r3, #13]
    398a:	06d2      	lsls	r2, r2, #27
    398c:	d106      	bne.n	399c <update_cache+0x2c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    398e:	69aa      	ldr	r2, [r5, #24]
    3990:	b922      	cbnz	r2, 399c <update_cache+0x2c>
	if (is_preempt(_current) || is_metairq(th)) {
    3992:	89da      	ldrh	r2, [r3, #14]
    3994:	2a7f      	cmp	r2, #127	; 0x7f
    3996:	d901      	bls.n	399c <update_cache+0x2c>
		_kernel.ready_q.cache = _current;
    3998:	6263      	str	r3, [r4, #36]	; 0x24
}
    399a:	bd38      	pop	{r3, r4, r5, pc}
		if (th != _current) {
    399c:	429d      	cmp	r5, r3
    399e:	d001      	beq.n	39a4 <update_cache+0x34>
			z_reset_time_slice();
    39a0:	f7ff ff7a 	bl	3898 <z_reset_time_slice>
		_kernel.ready_q.cache = th;
    39a4:	6265      	str	r5, [r4, #36]	; 0x24
}
    39a6:	e7f8      	b.n	399a <update_cache+0x2a>
    39a8:	200003a8 	.word	0x200003a8

000039ac <k_sched_unlock>:
{
    39ac:	b510      	push	{r4, lr}
	__asm__ volatile(
    39ae:	f04f 0320 	mov.w	r3, #32
    39b2:	f3ef 8411 	mrs	r4, BASEPRI
    39b6:	f383 8811 	msr	BASEPRI, r3
    39ba:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    39be:	4b08      	ldr	r3, [pc, #32]	; (39e0 <k_sched_unlock+0x34>)
    39c0:	689a      	ldr	r2, [r3, #8]
    39c2:	7bd3      	ldrb	r3, [r2, #15]
    39c4:	3301      	adds	r3, #1
    39c6:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    39c8:	2000      	movs	r0, #0
    39ca:	f7ff ffd1 	bl	3970 <update_cache>
	__asm__ volatile(
    39ce:	f384 8811 	msr	BASEPRI, r4
    39d2:	f3bf 8f6f 	isb	sy
}
    39d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    39da:	f001 bd82 	b.w	54e2 <z_reschedule_unlocked>
    39de:	bf00      	nop
    39e0:	200003a8 	.word	0x200003a8

000039e4 <z_add_thread_to_ready_q>:
{
    39e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    39e6:	f04f 0320 	mov.w	r3, #32
    39ea:	f3ef 8411 	mrs	r4, BASEPRI
    39ee:	f383 8811 	msr	BASEPRI, r3
    39f2:	f3bf 8f6f 	isb	sy
	return list->head == list;
    39f6:	4a15      	ldr	r2, [pc, #84]	; (3a4c <z_add_thread_to_ready_q+0x68>)
    39f8:	4611      	mov	r1, r2
    39fa:	f851 3f28 	ldr.w	r3, [r1, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    39fe:	428b      	cmp	r3, r1
    3a00:	d01d      	beq.n	3a3e <z_add_thread_to_ready_q+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3a02:	b1e3      	cbz	r3, 3a3e <z_add_thread_to_ready_q+0x5a>
    3a04:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
    3a06:	f990 500e 	ldrsb.w	r5, [r0, #14]
    3a0a:	f993 700e 	ldrsb.w	r7, [r3, #14]
    3a0e:	42af      	cmp	r7, r5
    3a10:	dd10      	ble.n	3a34 <z_add_thread_to_ready_q+0x50>
	node->prev = successor->prev;
    3a12:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    3a14:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
    3a18:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    3a1a:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
    3a1c:	7b43      	ldrb	r3, [r0, #13]
    3a1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3a22:	7343      	strb	r3, [r0, #13]
		update_cache(0);
    3a24:	2000      	movs	r0, #0
    3a26:	f7ff ffa3 	bl	3970 <update_cache>
	__asm__ volatile(
    3a2a:	f384 8811 	msr	BASEPRI, r4
    3a2e:	f3bf 8f6f 	isb	sy
}
    3a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    3a34:	42b3      	cmp	r3, r6
    3a36:	d002      	beq.n	3a3e <z_add_thread_to_ready_q+0x5a>
    3a38:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3a3a:	2b00      	cmp	r3, #0
    3a3c:	d1e5      	bne.n	3a0a <z_add_thread_to_ready_q+0x26>
	node->prev = list->tail;
    3a3e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    3a40:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
    3a42:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	node->next = list;
    3a44:	6001      	str	r1, [r0, #0]
	list->tail->next = node;
    3a46:	6018      	str	r0, [r3, #0]
	list->tail = node;
    3a48:	62d0      	str	r0, [r2, #44]	; 0x2c
    3a4a:	e7e7      	b.n	3a1c <z_add_thread_to_ready_q+0x38>
    3a4c:	200003a8 	.word	0x200003a8

00003a50 <z_move_thread_to_end_of_prio_q>:
{
    3a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3a52:	4604      	mov	r4, r0
	__asm__ volatile(
    3a54:	f04f 0320 	mov.w	r3, #32
    3a58:	f3ef 8511 	mrs	r5, BASEPRI
    3a5c:	f383 8811 	msr	BASEPRI, r3
    3a60:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    3a64:	7b43      	ldrb	r3, [r0, #13]
    3a66:	065a      	lsls	r2, r3, #25
    3a68:	d503      	bpl.n	3a72 <z_move_thread_to_end_of_prio_q+0x22>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    3a6a:	4601      	mov	r1, r0
    3a6c:	4817      	ldr	r0, [pc, #92]	; (3acc <z_move_thread_to_end_of_prio_q+0x7c>)
    3a6e:	f7ff ff69 	bl	3944 <z_priq_dumb_remove>
	return list->head == list;
    3a72:	4a17      	ldr	r2, [pc, #92]	; (3ad0 <z_move_thread_to_end_of_prio_q+0x80>)
    3a74:	e9d2 300a 	ldrd	r3, r0, [r2, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3a78:	f102 0128 	add.w	r1, r2, #40	; 0x28
    3a7c:	428b      	cmp	r3, r1
    3a7e:	d01f      	beq.n	3ac0 <z_move_thread_to_end_of_prio_q+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3a80:	b1f3      	cbz	r3, 3ac0 <z_move_thread_to_end_of_prio_q+0x70>
	if (t1->base.prio < t2->base.prio) {
    3a82:	f994 600e 	ldrsb.w	r6, [r4, #14]
    3a86:	f993 700e 	ldrsb.w	r7, [r3, #14]
    3a8a:	42b7      	cmp	r7, r6
    3a8c:	dd13      	ble.n	3ab6 <z_move_thread_to_end_of_prio_q+0x66>
	node->prev = successor->prev;
    3a8e:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    3a90:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
    3a94:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    3a96:	605c      	str	r4, [r3, #4]
    3a98:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
    3a9a:	6890      	ldr	r0, [r2, #8]
    3a9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3aa0:	7363      	strb	r3, [r4, #13]
    3aa2:	1b03      	subs	r3, r0, r4
    3aa4:	4258      	negs	r0, r3
    3aa6:	4158      	adcs	r0, r3
    3aa8:	f7ff ff62 	bl	3970 <update_cache>
	__asm__ volatile(
    3aac:	f385 8811 	msr	BASEPRI, r5
    3ab0:	f3bf 8f6f 	isb	sy
}
    3ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    3ab6:	4283      	cmp	r3, r0
    3ab8:	d002      	beq.n	3ac0 <z_move_thread_to_end_of_prio_q+0x70>
    3aba:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3abc:	2b00      	cmp	r3, #0
    3abe:	d1e2      	bne.n	3a86 <z_move_thread_to_end_of_prio_q+0x36>
	node->prev = list->tail;
    3ac0:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
    3ac4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    3ac6:	601c      	str	r4, [r3, #0]
	list->tail = node;
    3ac8:	62d4      	str	r4, [r2, #44]	; 0x2c
    3aca:	e7e5      	b.n	3a98 <z_move_thread_to_end_of_prio_q+0x48>
    3acc:	200003d0 	.word	0x200003d0
    3ad0:	200003a8 	.word	0x200003a8

00003ad4 <z_time_slice>:
	if (pending_current == _current) {
    3ad4:	4a15      	ldr	r2, [pc, #84]	; (3b2c <z_time_slice+0x58>)
    3ad6:	4916      	ldr	r1, [pc, #88]	; (3b30 <z_time_slice+0x5c>)
{
    3ad8:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
    3ada:	680c      	ldr	r4, [r1, #0]
    3adc:	6893      	ldr	r3, [r2, #8]
    3ade:	42a3      	cmp	r3, r4
    3ae0:	4614      	mov	r4, r2
    3ae2:	d103      	bne.n	3aec <z_time_slice+0x18>
}
    3ae4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
    3ae8:	f7ff bed6 	b.w	3898 <z_reset_time_slice>
	pending_current = NULL;
    3aec:	2500      	movs	r5, #0
    3aee:	600d      	str	r5, [r1, #0]
	if (slice_time && sliceable(_current)) {
    3af0:	4910      	ldr	r1, [pc, #64]	; (3b34 <z_time_slice+0x60>)
    3af2:	6809      	ldr	r1, [r1, #0]
    3af4:	b1b9      	cbz	r1, 3b26 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(t);
    3af6:	89d9      	ldrh	r1, [r3, #14]
    3af8:	297f      	cmp	r1, #127	; 0x7f
    3afa:	d814      	bhi.n	3b26 <z_time_slice+0x52>
		&& !z_is_prio_higher(t->base.prio, slice_max_prio)
    3afc:	490e      	ldr	r1, [pc, #56]	; (3b38 <z_time_slice+0x64>)
    3afe:	f993 500e 	ldrsb.w	r5, [r3, #14]
    3b02:	6809      	ldr	r1, [r1, #0]
    3b04:	428d      	cmp	r5, r1
    3b06:	db0e      	blt.n	3b26 <z_time_slice+0x52>
		&& !z_is_idle_thread_object(t)
    3b08:	490c      	ldr	r1, [pc, #48]	; (3b3c <z_time_slice+0x68>)
    3b0a:	428b      	cmp	r3, r1
    3b0c:	d00b      	beq.n	3b26 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(t);
    3b0e:	6999      	ldr	r1, [r3, #24]
    3b10:	b949      	cbnz	r1, 3b26 <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
    3b12:	6911      	ldr	r1, [r2, #16]
    3b14:	4281      	cmp	r1, r0
    3b16:	dc03      	bgt.n	3b20 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
    3b18:	4618      	mov	r0, r3
    3b1a:	f7ff ff99 	bl	3a50 <z_move_thread_to_end_of_prio_q>
    3b1e:	e7e1      	b.n	3ae4 <z_time_slice+0x10>
			_current_cpu->slice_ticks -= ticks;
    3b20:	1a09      	subs	r1, r1, r0
    3b22:	6111      	str	r1, [r2, #16]
}
    3b24:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
    3b26:	2300      	movs	r3, #0
    3b28:	6123      	str	r3, [r4, #16]
    3b2a:	e7fb      	b.n	3b24 <z_time_slice+0x50>
    3b2c:	200003a8 	.word	0x200003a8
    3b30:	200003d8 	.word	0x200003d8
    3b34:	200003e0 	.word	0x200003e0
    3b38:	200003dc 	.word	0x200003dc
    3b3c:	200002d0 	.word	0x200002d0

00003b40 <z_remove_thread_from_ready_q>:
{
    3b40:	b538      	push	{r3, r4, r5, lr}
    3b42:	4604      	mov	r4, r0
	__asm__ volatile(
    3b44:	f04f 0320 	mov.w	r3, #32
    3b48:	f3ef 8511 	mrs	r5, BASEPRI
    3b4c:	f383 8811 	msr	BASEPRI, r3
    3b50:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    3b54:	7b43      	ldrb	r3, [r0, #13]
    3b56:	065a      	lsls	r2, r3, #25
    3b58:	d507      	bpl.n	3b6a <z_remove_thread_from_ready_q+0x2a>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    3b5a:	4601      	mov	r1, r0
    3b5c:	4809      	ldr	r0, [pc, #36]	; (3b84 <z_remove_thread_from_ready_q+0x44>)
    3b5e:	f7ff fef1 	bl	3944 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    3b62:	7b63      	ldrb	r3, [r4, #13]
    3b64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    3b68:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    3b6a:	4b07      	ldr	r3, [pc, #28]	; (3b88 <z_remove_thread_from_ready_q+0x48>)
    3b6c:	6898      	ldr	r0, [r3, #8]
    3b6e:	1b03      	subs	r3, r0, r4
    3b70:	4258      	negs	r0, r3
    3b72:	4158      	adcs	r0, r3
    3b74:	f7ff fefc 	bl	3970 <update_cache>
	__asm__ volatile(
    3b78:	f385 8811 	msr	BASEPRI, r5
    3b7c:	f3bf 8f6f 	isb	sy
}
    3b80:	bd38      	pop	{r3, r4, r5, pc}
    3b82:	bf00      	nop
    3b84:	200003d0 	.word	0x200003d0
    3b88:	200003a8 	.word	0x200003a8

00003b8c <pend>:
{
    3b8c:	b570      	push	{r4, r5, r6, lr}
    3b8e:	4604      	mov	r4, r0
    3b90:	460d      	mov	r5, r1
    3b92:	4616      	mov	r6, r2
	z_remove_thread_from_ready_q(thread);
    3b94:	f7ff ffd4 	bl	3b40 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
    3b98:	7b63      	ldrb	r3, [r4, #13]
    3b9a:	f043 0302 	orr.w	r3, r3, #2
    3b9e:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    3ba0:	b17d      	cbz	r5, 3bc2 <pend+0x36>
	return list->head == list;
    3ba2:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    3ba4:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3ba6:	429d      	cmp	r5, r3
    3ba8:	d029      	beq.n	3bfe <pend+0x72>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3baa:	b343      	cbz	r3, 3bfe <pend+0x72>
	if (t1->base.prio < t2->base.prio) {
    3bac:	f994 200e 	ldrsb.w	r2, [r4, #14]
    3bb0:	f993 100e 	ldrsb.w	r1, [r3, #14]
    3bb4:	4291      	cmp	r1, r2
    3bb6:	dd1c      	ble.n	3bf2 <pend+0x66>
	node->prev = successor->prev;
    3bb8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    3bba:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    3bbe:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    3bc0:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
    3bc2:	1c73      	adds	r3, r6, #1
    3bc4:	d022      	beq.n	3c0c <pend+0x80>
    3bc6:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
    3bca:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    3bce:	f240 30e7 	movw	r0, #999	; 0x3e7
    3bd2:	2100      	movs	r1, #0
    3bd4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3bd8:	fbc5 0106 	smlal	r0, r1, r5, r6
    3bdc:	2300      	movs	r3, #0
    3bde:	f7fc fa7d 	bl	dc <__aeabi_uldivmod>

extern void z_thread_timeout(struct _timeout *to);

static inline void z_add_thread_timeout(struct k_thread *th, s32_t ticks)
{
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    3be2:	490b      	ldr	r1, [pc, #44]	; (3c10 <pend+0x84>)
    3be4:	1c42      	adds	r2, r0, #1
    3be6:	f104 0018 	add.w	r0, r4, #24
}
    3bea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3bee:	f000 ba67 	b.w	40c0 <z_add_timeout>
	return (node == list->tail) ? NULL : node->next;
    3bf2:	6869      	ldr	r1, [r5, #4]
    3bf4:	428b      	cmp	r3, r1
    3bf6:	d002      	beq.n	3bfe <pend+0x72>
    3bf8:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3bfa:	2b00      	cmp	r3, #0
    3bfc:	d1d8      	bne.n	3bb0 <pend+0x24>
	node->prev = list->tail;
    3bfe:	686b      	ldr	r3, [r5, #4]
    3c00:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    3c02:	686b      	ldr	r3, [r5, #4]
	node->next = list;
    3c04:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
    3c06:	601c      	str	r4, [r3, #0]
	list->tail = node;
    3c08:	606c      	str	r4, [r5, #4]
    3c0a:	e7da      	b.n	3bc2 <pend+0x36>
}
    3c0c:	bd70      	pop	{r4, r5, r6, pc}
    3c0e:	bf00      	nop
    3c10:	00005503 	.word	0x00005503

00003c14 <z_pend_curr>:
{
    3c14:	b510      	push	{r4, lr}
    3c16:	460c      	mov	r4, r1
    3c18:	4611      	mov	r1, r2
	pending_current = _current;
    3c1a:	4a06      	ldr	r2, [pc, #24]	; (3c34 <z_pend_curr+0x20>)
    3c1c:	6890      	ldr	r0, [r2, #8]
    3c1e:	4a06      	ldr	r2, [pc, #24]	; (3c38 <z_pend_curr+0x24>)
    3c20:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
    3c22:	461a      	mov	r2, r3
    3c24:	f7ff ffb2 	bl	3b8c <pend>
    3c28:	4620      	mov	r0, r4
}
    3c2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3c2e:	f7fd bc27 	b.w	1480 <arch_swap>
    3c32:	bf00      	nop
    3c34:	200003a8 	.word	0x200003a8
    3c38:	200003d8 	.word	0x200003d8

00003c3c <z_tick_sleep.part.19>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
    3c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (ticks == 0) {
		k_yield();
		return 0;
	}

	ticks += _TICK_ALIGN;
    3c3e:	1c46      	adds	r6, r0, #1
	expected_wakeup_time = ticks + z_tick_get_32();
    3c40:	f001 fd39 	bl	56b6 <z_tick_get_32>
    3c44:	1834      	adds	r4, r6, r0
	__asm__ volatile(
    3c46:	f04f 0320 	mov.w	r3, #32
    3c4a:	f3ef 8711 	mrs	r7, BASEPRI
    3c4e:	f383 8811 	msr	BASEPRI, r3
    3c52:	f3bf 8f6f 	isb	sy
	 */
	struct k_spinlock local_lock = {};
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    3c56:	4d0d      	ldr	r5, [pc, #52]	; (3c8c <z_tick_sleep.part.19+0x50>)
    3c58:	4b0d      	ldr	r3, [pc, #52]	; (3c90 <z_tick_sleep.part.19+0x54>)
    3c5a:	68a8      	ldr	r0, [r5, #8]
    3c5c:	6018      	str	r0, [r3, #0]
#endif
	z_remove_thread_from_ready_q(_current);
    3c5e:	f7ff ff6f 	bl	3b40 <z_remove_thread_from_ready_q>
    3c62:	68a8      	ldr	r0, [r5, #8]
    3c64:	490b      	ldr	r1, [pc, #44]	; (3c94 <z_tick_sleep.part.19+0x58>)
    3c66:	4632      	mov	r2, r6
    3c68:	3018      	adds	r0, #24
    3c6a:	f000 fa29 	bl	40c0 <z_add_timeout>
	z_add_thread_timeout(_current, ticks);
	z_mark_thread_as_suspended(_current);
    3c6e:	68aa      	ldr	r2, [r5, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    3c70:	7b53      	ldrb	r3, [r2, #13]
    3c72:	f043 0310 	orr.w	r3, r3, #16
    3c76:	7353      	strb	r3, [r2, #13]
    3c78:	4638      	mov	r0, r7
    3c7a:	f7fd fc01 	bl	1480 <arch_swap>

	(void)z_swap(&local_lock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
    3c7e:	f001 fd1a 	bl	56b6 <z_tick_get_32>
    3c82:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
    3c84:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    3c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3c8a:	bf00      	nop
    3c8c:	200003a8 	.word	0x200003a8
    3c90:	200003d8 	.word	0x200003d8
    3c94:	00005503 	.word	0x00005503

00003c98 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    3c98:	4b04      	ldr	r3, [pc, #16]	; (3cac <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    3c9a:	2100      	movs	r1, #0
    3c9c:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    3ca0:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
    3ca4:	4608      	mov	r0, r1
    3ca6:	f7ff be0d 	b.w	38c4 <k_sched_time_slice_set>
    3caa:	bf00      	nop
    3cac:	200003a8 	.word	0x200003a8

00003cb0 <z_impl_k_yield>:
{
    3cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
    3cb2:	4c23      	ldr	r4, [pc, #140]	; (3d40 <z_impl_k_yield+0x90>)
    3cb4:	4b23      	ldr	r3, [pc, #140]	; (3d44 <z_impl_k_yield+0x94>)
    3cb6:	68a2      	ldr	r2, [r4, #8]
    3cb8:	429a      	cmp	r2, r3
    3cba:	d029      	beq.n	3d10 <z_impl_k_yield+0x60>
    3cbc:	f04f 0320 	mov.w	r3, #32
    3cc0:	f3ef 8611 	mrs	r6, BASEPRI
    3cc4:	f383 8811 	msr	BASEPRI, r3
    3cc8:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
    3ccc:	f104 0528 	add.w	r5, r4, #40	; 0x28
    3cd0:	68a1      	ldr	r1, [r4, #8]
    3cd2:	4628      	mov	r0, r5
    3cd4:	f7ff fe36 	bl	3944 <z_priq_dumb_remove>
	return list->head == list;
    3cd8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
			_priq_run_add(&_kernel.ready_q.runq, _current);
    3cda:	68a3      	ldr	r3, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3cdc:	42aa      	cmp	r2, r5
    3cde:	d028      	beq.n	3d32 <z_impl_k_yield+0x82>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3ce0:	b33a      	cbz	r2, 3d32 <z_impl_k_yield+0x82>
    3ce2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
	if (t1->base.prio < t2->base.prio) {
    3ce4:	f993 100e 	ldrsb.w	r1, [r3, #14]
    3ce8:	f992 700e 	ldrsb.w	r7, [r2, #14]
    3cec:	428f      	cmp	r7, r1
    3cee:	dd1b      	ble.n	3d28 <z_impl_k_yield+0x78>
	node->prev = successor->prev;
    3cf0:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    3cf2:	e9c3 2100 	strd	r2, r1, [r3]
	successor->prev->next = node;
    3cf6:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    3cf8:	6053      	str	r3, [r2, #4]
	thread->base.thread_state |= states;
    3cfa:	7b5a      	ldrb	r2, [r3, #13]
    3cfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    3d00:	735a      	strb	r2, [r3, #13]
			update_cache(1);
    3d02:	2001      	movs	r0, #1
    3d04:	f7ff fe34 	bl	3970 <update_cache>
	__asm__ volatile(
    3d08:	f386 8811 	msr	BASEPRI, r6
    3d0c:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    3d10:	f04f 0320 	mov.w	r3, #32
    3d14:	f3ef 8011 	mrs	r0, BASEPRI
    3d18:	f383 8811 	msr	BASEPRI, r3
    3d1c:	f3bf 8f6f 	isb	sy
}
    3d20:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    3d24:	f7fd bbac 	b.w	1480 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    3d28:	4282      	cmp	r2, r0
    3d2a:	d002      	beq.n	3d32 <z_impl_k_yield+0x82>
    3d2c:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3d2e:	2a00      	cmp	r2, #0
    3d30:	d1da      	bne.n	3ce8 <z_impl_k_yield+0x38>
	node->prev = list->tail;
    3d32:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    3d34:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
    3d36:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
	node->next = list;
    3d38:	601d      	str	r5, [r3, #0]
	list->tail->next = node;
    3d3a:	6013      	str	r3, [r2, #0]
	list->tail = node;
    3d3c:	62e3      	str	r3, [r4, #44]	; 0x2c
    3d3e:	e7dc      	b.n	3cfa <z_impl_k_yield+0x4a>
    3d40:	200003a8 	.word	0x200003a8
    3d44:	200002d0 	.word	0x200002d0

00003d48 <z_impl_k_sleep>:

s32_t z_impl_k_sleep(int ms)
{
    3d48:	b538      	push	{r3, r4, r5, lr}
	s32_t ticks;

	__ASSERT(!arch_is_in_isr(), "");

	if (ms == K_FOREVER) {
    3d4a:	1c43      	adds	r3, r0, #1
{
    3d4c:	4604      	mov	r4, r0
	if (ms == K_FOREVER) {
    3d4e:	d105      	bne.n	3d5c <z_impl_k_sleep+0x14>
		k_thread_suspend(_current);
    3d50:	4b10      	ldr	r3, [pc, #64]	; (3d94 <z_impl_k_sleep+0x4c>)
    3d52:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    3d54:	f000 f900 	bl	3f58 <z_impl_k_thread_suspend>
	}

	ticks = k_ms_to_ticks_ceil32(ms);
	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
    3d58:	4620      	mov	r0, r4
    3d5a:	bd38      	pop	{r3, r4, r5, pc}
    3d5c:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    3d60:	f240 30e7 	movw	r0, #999	; 0x3e7
    3d64:	2100      	movs	r1, #0
    3d66:	fbe5 0104 	umlal	r0, r1, r5, r4
    3d6a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3d6e:	2300      	movs	r3, #0
    3d70:	f7fc f9b4 	bl	dc <__aeabi_uldivmod>
	if (ticks == 0) {
    3d74:	4604      	mov	r4, r0
    3d76:	b948      	cbnz	r0, 3d8c <z_impl_k_sleep+0x44>
	z_impl_k_yield();
    3d78:	f7ff ff9a 	bl	3cb0 <z_impl_k_yield>
		} else {
			return (t * to_hz + off) / from_hz;
    3d7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    3d80:	fb84 0100 	smull	r0, r1, r4, r0
    3d84:	0bc4      	lsrs	r4, r0, #15
    3d86:	ea44 4441 	orr.w	r4, r4, r1, lsl #17
	return k_ticks_to_ms_floor64(ticks);
    3d8a:	e7e5      	b.n	3d58 <z_impl_k_sleep+0x10>
    3d8c:	f7ff ff56 	bl	3c3c <z_tick_sleep.part.19>
    3d90:	4604      	mov	r4, r0
    3d92:	e7f3      	b.n	3d7c <z_impl_k_sleep+0x34>
    3d94:	200003a8 	.word	0x200003a8

00003d98 <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
    3d98:	4b01      	ldr	r3, [pc, #4]	; (3da0 <z_impl_k_current_get+0x8>)
    3d9a:	6898      	ldr	r0, [r3, #8]
    3d9c:	4770      	bx	lr
    3d9e:	bf00      	nop
    3da0:	200003a8 	.word	0x200003a8

00003da4 <z_impl_k_sem_give>:
		handle_poll_events(sem);
	}
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    3da4:	b570      	push	{r4, r5, r6, lr}
    3da6:	4604      	mov	r4, r0
    3da8:	f04f 0320 	mov.w	r3, #32
    3dac:	f3ef 8611 	mrs	r6, BASEPRI
    3db0:	f383 8811 	msr	BASEPRI, r3
    3db4:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
    3db8:	f001 fbd4 	bl	5564 <z_unpend_first_thread>
	if (thread != NULL) {
    3dbc:	4605      	mov	r5, r0
    3dbe:	b170      	cbz	r0, 3dde <z_impl_k_sem_give+0x3a>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    3dc0:	7b43      	ldrb	r3, [r0, #13]
    3dc2:	06db      	lsls	r3, r3, #27
    3dc4:	d103      	bne.n	3dce <z_impl_k_sem_give+0x2a>
	if (z_is_thread_ready(thread)) {
    3dc6:	6983      	ldr	r3, [r0, #24]
    3dc8:	b90b      	cbnz	r3, 3dce <z_impl_k_sem_give+0x2a>
		z_add_thread_to_ready_q(thread);
    3dca:	f7ff fe0b 	bl	39e4 <z_add_thread_to_ready_q>
    3dce:	2300      	movs	r3, #0
    3dd0:	66ab      	str	r3, [r5, #104]	; 0x68
	k_spinlock_key_t key = k_spin_lock(&lock);

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);
	do_sem_give(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
    3dd2:	4631      	mov	r1, r6
    3dd4:	4805      	ldr	r0, [pc, #20]	; (3dec <z_impl_k_sem_give+0x48>)
}
    3dd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
    3dda:	f001 bb6b 	b.w	54b4 <z_reschedule>
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
    3dde:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    3de2:	429a      	cmp	r2, r3
    3de4:	bf18      	it	ne
    3de6:	3301      	addne	r3, #1
    3de8:	60a3      	str	r3, [r4, #8]
    3dea:	e7f2      	b.n	3dd2 <z_impl_k_sem_give+0x2e>
    3dec:	200003f1 	.word	0x200003f1

00003df0 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
    3df0:	b410      	push	{r4}
    3df2:	4602      	mov	r2, r0
    3df4:	460b      	mov	r3, r1
    3df6:	f04f 0020 	mov.w	r0, #32
    3dfa:	f3ef 8111 	mrs	r1, BASEPRI
    3dfe:	f380 8811 	msr	BASEPRI, r0
    3e02:	f3bf 8f6f 	isb	sy
	__ASSERT(((arch_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
    3e06:	6894      	ldr	r4, [r2, #8]
    3e08:	b144      	cbz	r4, 3e1c <z_impl_k_sem_take+0x2c>
		sem->count--;
    3e0a:	3c01      	subs	r4, #1
    3e0c:	6094      	str	r4, [r2, #8]
	__asm__ volatile(
    3e0e:	f381 8811 	msr	BASEPRI, r1
    3e12:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
		return 0;
    3e16:	2000      	movs	r0, #0

	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);

	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
	return ret;
}
    3e18:	bc10      	pop	{r4}
    3e1a:	4770      	bx	lr
	if (timeout == K_NO_WAIT) {
    3e1c:	b933      	cbnz	r3, 3e2c <z_impl_k_sem_take+0x3c>
    3e1e:	f381 8811 	msr	BASEPRI, r1
    3e22:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    3e26:	f06f 000f 	mvn.w	r0, #15
    3e2a:	e7f5      	b.n	3e18 <z_impl_k_sem_take+0x28>
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    3e2c:	4801      	ldr	r0, [pc, #4]	; (3e34 <z_impl_k_sem_take+0x44>)
}
    3e2e:	bc10      	pop	{r4}
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    3e30:	f7ff bef0 	b.w	3c14 <z_pend_curr>
    3e34:	200003f1 	.word	0x200003f1

00003e38 <z_impl_k_thread_start>:
}
#endif

#ifdef CONFIG_MULTITHREADING
void z_impl_k_thread_start(struct k_thread *thread)
{
    3e38:	b510      	push	{r4, lr}
    3e3a:	4602      	mov	r2, r0
	__asm__ volatile(
    3e3c:	f04f 0320 	mov.w	r3, #32
    3e40:	f3ef 8411 	mrs	r4, BASEPRI
    3e44:	f383 8811 	msr	BASEPRI, r3
    3e48:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock); /* protect kernel queues */

	if (z_has_thread_started(thread)) {
    3e4c:	7b43      	ldrb	r3, [r0, #13]
    3e4e:	0759      	lsls	r1, r3, #29
    3e50:	d404      	bmi.n	3e5c <z_impl_k_thread_start+0x24>
	__asm__ volatile(
    3e52:	f384 8811 	msr	BASEPRI, r4
    3e56:	f3bf 8f6f 	isb	sy
	}

	z_mark_thread_as_started(thread);
	z_ready_thread(thread);
	z_reschedule(&lock, key);
}
    3e5a:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3e5c:	f023 0304 	bic.w	r3, r3, #4
    3e60:	7343      	strb	r3, [r0, #13]
	if (z_is_thread_ready(thread)) {
    3e62:	f001 fbac 	bl	55be <z_is_thread_ready>
    3e66:	b110      	cbz	r0, 3e6e <z_impl_k_thread_start+0x36>
		z_add_thread_to_ready_q(thread);
    3e68:	4610      	mov	r0, r2
    3e6a:	f7ff fdbb 	bl	39e4 <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
    3e6e:	4621      	mov	r1, r4
    3e70:	4802      	ldr	r0, [pc, #8]	; (3e7c <z_impl_k_thread_start+0x44>)
}
    3e72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&lock, key);
    3e76:	f001 bb1d 	b.w	54b4 <z_reschedule>
    3e7a:	bf00      	nop
    3e7c:	200003f1 	.word	0x200003f1

00003e80 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
    3e80:	b530      	push	{r4, r5, lr}
    3e82:	b087      	sub	sp, #28
    3e84:	4604      	mov	r4, r0
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    3e86:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    3e88:	9504      	str	r5, [sp, #16]
    3e8a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    3e8c:	9503      	str	r5, [sp, #12]
    3e8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    3e90:	9502      	str	r5, [sp, #8]
    3e92:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
    3e94:	9501      	str	r5, [sp, #4]
    3e96:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    3e98:	9500      	str	r5, [sp, #0]
    3e9a:	f7fd fb6d 	bl	1578 <arch_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    3e9e:	4b03      	ldr	r3, [pc, #12]	; (3eac <z_setup_new_thread+0x2c>)
    3ea0:	689b      	ldr	r3, [r3, #8]
    3ea2:	b103      	cbz	r3, 3ea6 <z_setup_new_thread+0x26>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    3ea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    3ea6:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
    3ea8:	b007      	add	sp, #28
    3eaa:	bd30      	pop	{r4, r5, pc}
    3eac:	200003a8 	.word	0x200003a8

00003eb0 <z_impl_k_thread_create>:
k_tid_t z_impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
    3eb0:	b570      	push	{r4, r5, r6, lr}
    3eb2:	b086      	sub	sp, #24
	__ASSERT((options & K_USER) == 0,
		 "Platform is capable of user mode, and test thread created with K_USER option,"
		 " but neither CONFIG_TEST_USERSPACE nor CONFIG_USERSPACE is set\n");
#endif

	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    3eb4:	2600      	movs	r6, #0
    3eb6:	9605      	str	r6, [sp, #20]
    3eb8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    3eba:	9604      	str	r6, [sp, #16]
    3ebc:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    3ebe:	9603      	str	r6, [sp, #12]
    3ec0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    3ec2:	9602      	str	r6, [sp, #8]
    3ec4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
{
    3ec6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    3ec8:	9601      	str	r6, [sp, #4]
    3eca:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    3ecc:	9600      	str	r6, [sp, #0]
{
    3ece:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    3ed0:	f7ff ffd6 	bl	3e80 <z_setup_new_thread>
			  prio, options, NULL);

	if (delay != K_FOREVER) {
    3ed4:	1c6b      	adds	r3, r5, #1
    3ed6:	d003      	beq.n	3ee0 <z_impl_k_thread_create+0x30>
	if (delay == 0) {
    3ed8:	b92d      	cbnz	r5, 3ee6 <z_impl_k_thread_create+0x36>
	z_impl_k_thread_start(thread);
    3eda:	4620      	mov	r0, r4
    3edc:	f7ff ffac 	bl	3e38 <z_impl_k_thread_start>
		schedule_new_thread(new_thread, delay);
	}

	return new_thread;
}
    3ee0:	4620      	mov	r0, r4
    3ee2:	b006      	add	sp, #24
    3ee4:	bd70      	pop	{r4, r5, r6, pc}
			return (u32_t)((t * to_hz + off) / from_hz);
    3ee6:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    3eea:	f240 30e7 	movw	r0, #999	; 0x3e7
    3eee:	2100      	movs	r1, #0
    3ef0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3ef4:	2300      	movs	r3, #0
    3ef6:	fbe6 0105 	umlal	r0, r1, r6, r5
    3efa:	f7fc f8ef 	bl	dc <__aeabi_uldivmod>
    3efe:	4903      	ldr	r1, [pc, #12]	; (3f0c <z_impl_k_thread_create+0x5c>)
    3f00:	1c42      	adds	r2, r0, #1
    3f02:	f104 0018 	add.w	r0, r4, #24
    3f06:	f000 f8db 	bl	40c0 <z_add_timeout>
    3f0a:	e7e9      	b.n	3ee0 <z_impl_k_thread_create+0x30>
    3f0c:	00005503 	.word	0x00005503

00003f10 <z_thread_single_suspend>:
#include <syscalls/k_thread_create_mrsh.c>
#endif /* CONFIG_USERSPACE */
#endif /* CONFIG_MULTITHREADING */

void z_thread_single_suspend(struct k_thread *thread)
{
    3f10:	b510      	push	{r4, lr}
    3f12:	4604      	mov	r4, r0
	if (z_is_thread_ready(thread)) {
    3f14:	f001 fb53 	bl	55be <z_is_thread_ready>
    3f18:	b110      	cbz	r0, 3f20 <z_thread_single_suspend+0x10>
		z_remove_thread_from_ready_q(thread);
    3f1a:	4620      	mov	r0, r4
    3f1c:	f7ff fe10 	bl	3b40 <z_remove_thread_from_ready_q>
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    3f20:	f104 0018 	add.w	r0, r4, #24
    3f24:	f001 fb87 	bl	5636 <z_abort_timeout>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    3f28:	7b63      	ldrb	r3, [r4, #13]
    3f2a:	f043 0310 	orr.w	r3, r3, #16
    3f2e:	7363      	strb	r3, [r4, #13]

	(void)z_abort_thread_timeout(thread);

	z_mark_thread_as_suspended(thread);

	if (thread == _current) {
    3f30:	4b08      	ldr	r3, [pc, #32]	; (3f54 <z_thread_single_suspend+0x44>)
    3f32:	689b      	ldr	r3, [r3, #8]
    3f34:	42a3      	cmp	r3, r4
    3f36:	d10b      	bne.n	3f50 <z_thread_single_suspend+0x40>
	__asm__ volatile(
    3f38:	f04f 0320 	mov.w	r3, #32
    3f3c:	f3ef 8011 	mrs	r0, BASEPRI
    3f40:	f383 8811 	msr	BASEPRI, r3
    3f44:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
    3f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
    3f4c:	f001 babd 	b.w	54ca <z_reschedule_irqlock>
    3f50:	bd10      	pop	{r4, pc}
    3f52:	bf00      	nop
    3f54:	200003a8 	.word	0x200003a8

00003f58 <z_impl_k_thread_suspend>:

void z_impl_k_thread_suspend(struct k_thread *thread)
{
    3f58:	b538      	push	{r3, r4, r5, lr}
    3f5a:	4605      	mov	r5, r0
    3f5c:	f04f 0320 	mov.w	r3, #32
    3f60:	f3ef 8411 	mrs	r4, BASEPRI
    3f64:	f383 8811 	msr	BASEPRI, r3
    3f68:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	z_thread_single_suspend(thread);
    3f6c:	f7ff ffd0 	bl	3f10 <z_thread_single_suspend>

	sys_trace_thread_suspend(thread);

	if (thread == _current) {
    3f70:	4b07      	ldr	r3, [pc, #28]	; (3f90 <z_impl_k_thread_suspend+0x38>)
    3f72:	689b      	ldr	r3, [r3, #8]
    3f74:	42ab      	cmp	r3, r5
    3f76:	d105      	bne.n	3f84 <z_impl_k_thread_suspend+0x2c>
		z_reschedule(&lock, key);
    3f78:	4621      	mov	r1, r4
    3f7a:	4806      	ldr	r0, [pc, #24]	; (3f94 <z_impl_k_thread_suspend+0x3c>)
	} else {
		k_spin_unlock(&lock, key);
	}
}
    3f7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&lock, key);
    3f80:	f001 ba98 	b.w	54b4 <z_reschedule>
	__asm__ volatile(
    3f84:	f384 8811 	msr	BASEPRI, r4
    3f88:	f3bf 8f6f 	isb	sy
}
    3f8c:	bd38      	pop	{r3, r4, r5, pc}
    3f8e:	bf00      	nop
    3f90:	200003a8 	.word	0x200003a8
    3f94:	200003f1 	.word	0x200003f1

00003f98 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    3f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    3f9c:	4e28      	ldr	r6, [pc, #160]	; (4040 <z_init_static_threads+0xa8>)
    3f9e:	4d29      	ldr	r5, [pc, #164]	; (4044 <z_init_static_threads+0xac>)
{
    3fa0:	b087      	sub	sp, #28
    3fa2:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
    3fa4:	42b5      	cmp	r5, r6
    3fa6:	f105 0430 	add.w	r4, r5, #48	; 0x30
    3faa:	d310      	bcc.n	3fce <z_init_static_threads+0x36>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    3fac:	f7ff fcb6 	bl	391c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    3fb0:	4c24      	ldr	r4, [pc, #144]	; (4044 <z_init_static_threads+0xac>)
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    3fb2:	f8df a094 	ldr.w	sl, [pc, #148]	; 4048 <z_init_static_threads+0xb0>
    3fb6:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    3fba:	f240 36e7 	movw	r6, #999	; 0x3e7
    3fbe:	2700      	movs	r7, #0
    3fc0:	4544      	cmp	r4, r8
    3fc2:	d321      	bcc.n	4008 <z_init_static_threads+0x70>
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	k_sched_unlock();
}
    3fc4:	b007      	add	sp, #28
    3fc6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	k_sched_unlock();
    3fca:	f7ff bcef 	b.w	39ac <k_sched_unlock>
		z_setup_new_thread(
    3fce:	f854 3c04 	ldr.w	r3, [r4, #-4]
    3fd2:	9305      	str	r3, [sp, #20]
    3fd4:	f854 3c10 	ldr.w	r3, [r4, #-16]
    3fd8:	9304      	str	r3, [sp, #16]
    3fda:	f854 3c14 	ldr.w	r3, [r4, #-20]
    3fde:	9303      	str	r3, [sp, #12]
    3fe0:	f854 3c18 	ldr.w	r3, [r4, #-24]
    3fe4:	9302      	str	r3, [sp, #8]
    3fe6:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    3fea:	9301      	str	r3, [sp, #4]
    3fec:	f854 3c20 	ldr.w	r3, [r4, #-32]
    3ff0:	9300      	str	r3, [sp, #0]
    3ff2:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    3ff6:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    3ffa:	f7ff ff41 	bl	3e80 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    3ffe:	f854 3c30 	ldr.w	r3, [r4, #-48]
    4002:	64dd      	str	r5, [r3, #76]	; 0x4c
    4004:	4625      	mov	r5, r4
    4006:	e7cd      	b.n	3fa4 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_FOREVER) {
    4008:	6a61      	ldr	r1, [r4, #36]	; 0x24
    400a:	1c4b      	adds	r3, r1, #1
    400c:	d004      	beq.n	4018 <z_init_static_threads+0x80>
			schedule_new_thread(thread_data->init_thread,
    400e:	6825      	ldr	r5, [r4, #0]
	if (delay == 0) {
    4010:	b921      	cbnz	r1, 401c <z_init_static_threads+0x84>
    4012:	4628      	mov	r0, r5
    4014:	f7ff ff10 	bl	3e38 <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    4018:	3430      	adds	r4, #48	; 0x30
    401a:	e7d1      	b.n	3fc0 <z_init_static_threads+0x28>
    401c:	46b3      	mov	fp, r6
    401e:	46bc      	mov	ip, r7
    4020:	fbe9 bc01 	umlal	fp, ip, r9, r1
    4024:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4028:	2300      	movs	r3, #0
    402a:	4658      	mov	r0, fp
    402c:	4661      	mov	r1, ip
    402e:	f7fc f855 	bl	dc <__aeabi_uldivmod>
    4032:	4651      	mov	r1, sl
    4034:	1c42      	adds	r2, r0, #1
    4036:	f105 0018 	add.w	r0, r5, #24
    403a:	f000 f841 	bl	40c0 <z_add_timeout>
    403e:	e7eb      	b.n	4018 <z_init_static_threads+0x80>
    4040:	20002654 	.word	0x20002654
    4044:	200025c4 	.word	0x200025c4
    4048:	00005503 	.word	0x00005503

0000404c <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
    404c:	4b03      	ldr	r3, [pc, #12]	; (405c <elapsed+0x10>)
    404e:	681b      	ldr	r3, [r3, #0]
    4050:	b90b      	cbnz	r3, 4056 <elapsed+0xa>
    4052:	f7fd b9d3 	b.w	13fc <z_clock_elapsed>
}
    4056:	2000      	movs	r0, #0
    4058:	4770      	bx	lr
    405a:	bf00      	nop
    405c:	200003e4 	.word	0x200003e4

00004060 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4060:	6803      	ldr	r3, [r0, #0]
    4062:	b140      	cbz	r0, 4076 <remove_timeout+0x16>
    4064:	4a07      	ldr	r2, [pc, #28]	; (4084 <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
    4066:	6852      	ldr	r2, [r2, #4]
    4068:	4290      	cmp	r0, r2
    406a:	d004      	beq.n	4076 <remove_timeout+0x16>
	if (next(t) != NULL) {
    406c:	b11b      	cbz	r3, 4076 <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
    406e:	689a      	ldr	r2, [r3, #8]
    4070:	6881      	ldr	r1, [r0, #8]
    4072:	440a      	add	r2, r1
    4074:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
    4076:	6842      	ldr	r2, [r0, #4]
    4078:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    407a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    407c:	2300      	movs	r3, #0
	node->prev = NULL;
    407e:	e9c0 3300 	strd	r3, r3, [r0]
}
    4082:	4770      	bx	lr
    4084:	20002528 	.word	0x20002528

00004088 <next_timeout>:
	return list->head == list;
    4088:	4b0b      	ldr	r3, [pc, #44]	; (40b8 <next_timeout+0x30>)

static s32_t next_timeout(void)
{
    408a:	b510      	push	{r4, lr}
    408c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    408e:	429c      	cmp	r4, r3
    4090:	bf08      	it	eq
    4092:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
    4094:	f7ff ffda 	bl	404c <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    4098:	b154      	cbz	r4, 40b0 <next_timeout+0x28>
    409a:	68a3      	ldr	r3, [r4, #8]
    409c:	1a18      	subs	r0, r3, r0
    409e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    40a2:	4b06      	ldr	r3, [pc, #24]	; (40bc <next_timeout+0x34>)
    40a4:	691b      	ldr	r3, [r3, #16]
    40a6:	b113      	cbz	r3, 40ae <next_timeout+0x26>
    40a8:	4298      	cmp	r0, r3
    40aa:	bfa8      	it	ge
    40ac:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    40ae:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
    40b0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    40b4:	e7f5      	b.n	40a2 <next_timeout+0x1a>
    40b6:	bf00      	nop
    40b8:	20002528 	.word	0x20002528
    40bc:	200003a8 	.word	0x200003a8

000040c0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
    40c0:	b570      	push	{r4, r5, r6, lr}
    40c2:	4604      	mov	r4, r0
    40c4:	4616      	mov	r6, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    40c6:	60c1      	str	r1, [r0, #12]
	__asm__ volatile(
    40c8:	f04f 0320 	mov.w	r3, #32
    40cc:	f3ef 8511 	mrs	r5, BASEPRI
    40d0:	f383 8811 	msr	BASEPRI, r3
    40d4:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
    40d8:	f7ff ffb8 	bl	404c <elapsed>
	return list->head == list;
    40dc:	4b18      	ldr	r3, [pc, #96]	; (4140 <z_add_timeout+0x80>)
    40de:	681a      	ldr	r2, [r3, #0]
    40e0:	2e01      	cmp	r6, #1
    40e2:	bfac      	ite	ge
    40e4:	1980      	addge	r0, r0, r6
    40e6:	3001      	addlt	r0, #1
	return sys_dlist_is_empty(list) ? NULL : list->head;
    40e8:	429a      	cmp	r2, r3
    40ea:	60a0      	str	r0, [r4, #8]
    40ec:	d001      	beq.n	40f2 <z_add_timeout+0x32>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    40ee:	685e      	ldr	r6, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
    40f0:	b932      	cbnz	r2, 4100 <z_add_timeout+0x40>
	node->prev = list->tail;
    40f2:	685a      	ldr	r2, [r3, #4]
    40f4:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
    40f6:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    40f8:	6023      	str	r3, [r4, #0]
	list->tail->next = node;
    40fa:	6014      	str	r4, [r2, #0]
	list->tail = node;
    40fc:	605c      	str	r4, [r3, #4]
    40fe:	e00a      	b.n	4116 <z_add_timeout+0x56>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
    4100:	6890      	ldr	r0, [r2, #8]
    4102:	68a1      	ldr	r1, [r4, #8]
    4104:	4288      	cmp	r0, r1
    4106:	dd15      	ble.n	4134 <z_add_timeout+0x74>
				t->dticks -= to->dticks;
    4108:	1a41      	subs	r1, r0, r1
    410a:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
    410c:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    410e:	e9c4 2100 	strd	r2, r1, [r4]
	successor->prev->next = node;
    4112:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    4114:	6054      	str	r4, [r2, #4]
	return list->head == list;
    4116:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4118:	429a      	cmp	r2, r3
    411a:	d006      	beq.n	412a <z_add_timeout+0x6a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    411c:	4294      	cmp	r4, r2
    411e:	d104      	bne.n	412a <z_add_timeout+0x6a>
			z_clock_set_timeout(next_timeout(), false);
    4120:	f7ff ffb2 	bl	4088 <next_timeout>
    4124:	2100      	movs	r1, #0
    4126:	f7fd f913 	bl	1350 <z_clock_set_timeout>
	__asm__ volatile(
    412a:	f385 8811 	msr	BASEPRI, r5
    412e:	f3bf 8f6f 	isb	sy
		}
	}
}
    4132:	bd70      	pop	{r4, r5, r6, pc}
			to->dticks -= t->dticks;
    4134:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    4136:	42b2      	cmp	r2, r6
    4138:	60a1      	str	r1, [r4, #8]
    413a:	d0da      	beq.n	40f2 <z_add_timeout+0x32>
    413c:	6812      	ldr	r2, [r2, #0]
    413e:	e7d7      	b.n	40f0 <z_add_timeout+0x30>
    4140:	20002528 	.word	0x20002528

00004144 <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
    4144:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    4148:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    414a:	f7ff fcc3 	bl	3ad4 <z_time_slice>
	__asm__ volatile(
    414e:	f04f 0320 	mov.w	r3, #32
    4152:	f3ef 8511 	mrs	r5, BASEPRI
    4156:	f383 8811 	msr	BASEPRI, r3
    415a:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    415e:	4e21      	ldr	r6, [pc, #132]	; (41e4 <z_clock_announce+0xa0>)
    4160:	4f21      	ldr	r7, [pc, #132]	; (41e8 <z_clock_announce+0xa4>)
	return list->head == list;
    4162:	f8df 9088 	ldr.w	r9, [pc, #136]	; 41ec <z_clock_announce+0xa8>
    4166:	6034      	str	r4, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    4168:	46b8      	mov	r8, r7
    416a:	f8d9 4000 	ldr.w	r4, [r9]
    416e:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4170:	454c      	cmp	r4, r9
    4172:	e9d7 bc00 	ldrd	fp, ip, [r7]
    4176:	d005      	beq.n	4184 <z_clock_announce+0x40>
    4178:	b124      	cbz	r4, 4184 <z_clock_announce+0x40>
    417a:	68a3      	ldr	r3, [r4, #8]
    417c:	4293      	cmp	r3, r2
    417e:	dd14      	ble.n	41aa <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    4180:	1a9b      	subs	r3, r3, r2
    4182:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
    4184:	eb1b 0002 	adds.w	r0, fp, r2
    4188:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
	announce_remaining = 0;
    418c:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    418e:	e9c8 0100 	strd	r0, r1, [r8]
	announce_remaining = 0;
    4192:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
    4194:	f7ff ff78 	bl	4088 <next_timeout>
    4198:	4621      	mov	r1, r4
    419a:	f7fd f8d9 	bl	1350 <z_clock_set_timeout>
	__asm__ volatile(
    419e:	f385 8811 	msr	BASEPRI, r5
    41a2:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    41a6:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
    41aa:	eb1b 0003 	adds.w	r0, fp, r3
    41ae:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
    41b2:	1ad3      	subs	r3, r2, r3
    41b4:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    41b6:	2300      	movs	r3, #0
		curr_tick += dt;
    41b8:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
    41bc:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
    41be:	4620      	mov	r0, r4
    41c0:	f7ff ff4e 	bl	4060 <remove_timeout>
    41c4:	f385 8811 	msr	BASEPRI, r5
    41c8:	f3bf 8f6f 	isb	sy
		t->fn(t);
    41cc:	68e3      	ldr	r3, [r4, #12]
    41ce:	4798      	blx	r3
	__asm__ volatile(
    41d0:	f04f 0320 	mov.w	r3, #32
    41d4:	f3ef 8511 	mrs	r5, BASEPRI
    41d8:	f383 8811 	msr	BASEPRI, r3
    41dc:	f3bf 8f6f 	isb	sy
#endif

#ifdef SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    41e0:	e7c3      	b.n	416a <z_clock_announce+0x26>
    41e2:	bf00      	nop
    41e4:	200003e4 	.word	0x200003e4
    41e8:	20000000 	.word	0x20000000
    41ec:	20002528 	.word	0x20002528

000041f0 <z_tick_get>:

s64_t z_tick_get(void)
{
    41f0:	e92d 4818 	stmdb	sp!, {r3, r4, fp, lr}
    41f4:	f04f 0320 	mov.w	r3, #32
    41f8:	f3ef 8411 	mrs	r4, BASEPRI
    41fc:	f383 8811 	msr	BASEPRI, r3
    4200:	f3bf 8f6f 	isb	sy
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
    4204:	f7fd f8fa 	bl	13fc <z_clock_elapsed>
    4208:	4b07      	ldr	r3, [pc, #28]	; (4228 <z_tick_get+0x38>)
    420a:	e9d3 2300 	ldrd	r2, r3, [r3]
    420e:	eb12 0b00 	adds.w	fp, r2, r0
    4212:	f143 0c00 	adc.w	ip, r3, #0
    4216:	4658      	mov	r0, fp
    4218:	4661      	mov	r1, ip
	__asm__ volatile(
    421a:	f384 8811 	msr	BASEPRI, r4
    421e:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    4222:	e8bd 8818 	ldmia.w	sp!, {r3, r4, fp, pc}
    4226:	bf00      	nop
    4228:	20000000 	.word	0x20000000

0000422c <z_timer_expiration_handler>:

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
    422c:	6a02      	ldr	r2, [r0, #32]
    422e:	2a00      	cmp	r2, #0
{
    4230:	b538      	push	{r3, r4, r5, lr}
    4232:	4604      	mov	r4, r0
	if (timer->period > 0) {
    4234:	dd02      	ble.n	423c <z_timer_expiration_handler+0x10>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    4236:	490e      	ldr	r1, [pc, #56]	; (4270 <z_timer_expiration_handler+0x44>)
    4238:	f7ff ff42 	bl	40c0 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    423c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    423e:	3301      	adds	r3, #1
    4240:	6263      	str	r3, [r4, #36]	; 0x24

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    4242:	69a3      	ldr	r3, [r4, #24]
    4244:	b10b      	cbz	r3, 424a <z_timer_expiration_handler+0x1e>
		timer->expiry_fn(timer);
    4246:	4620      	mov	r0, r4
    4248:	4798      	blx	r3
	return list->head == list;
    424a:	f854 5f10 	ldr.w	r5, [r4, #16]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    424e:	42a5      	cmp	r5, r4
    4250:	d00d      	beq.n	426e <z_timer_expiration_handler+0x42>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    4252:	b165      	cbz	r5, 426e <z_timer_expiration_handler+0x42>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
    4254:	4628      	mov	r0, r5
    4256:	f001 f914 	bl	5482 <z_unpend_thread_no_timeout>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    425a:	7b6b      	ldrb	r3, [r5, #13]
    425c:	06db      	lsls	r3, r3, #27
    425e:	d104      	bne.n	426a <z_timer_expiration_handler+0x3e>
	if (z_is_thread_ready(thread)) {
    4260:	69ab      	ldr	r3, [r5, #24]
    4262:	b913      	cbnz	r3, 426a <z_timer_expiration_handler+0x3e>
		z_add_thread_to_ready_q(thread);
    4264:	4628      	mov	r0, r5
    4266:	f7ff fbbd 	bl	39e4 <z_add_thread_to_ready_q>
    426a:	2300      	movs	r3, #0
    426c:	66ab      	str	r3, [r5, #104]	; 0x68

	z_ready_thread(thread);

	arch_thread_return_value_set(thread, 0);
}
    426e:	bd38      	pop	{r3, r4, r5, pc}
    4270:	0000422d 	.word	0x0000422d

00004274 <z_impl_k_timer_start>:
	z_object_init(timer);
}


void z_impl_k_timer_start(struct k_timer *timer, s32_t duration, s32_t period)
{
    4274:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    4278:	f240 36e7 	movw	r6, #999	; 0x3e7
    427c:	2700      	movs	r7, #0
    427e:	4604      	mov	r4, r0
    4280:	4688      	mov	r8, r1
    4282:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    4286:	4630      	mov	r0, r6
    4288:	4639      	mov	r1, r7
    428a:	fbe5 0102 	umlal	r0, r1, r5, r2
    428e:	2300      	movs	r3, #0
    4290:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4294:	f7fb ff22 	bl	dc <__aeabi_uldivmod>
    4298:	4639      	mov	r1, r7
	__ASSERT(duration >= 0 && period >= 0 &&
		 (duration != 0 || period != 0), "invalid parameters\n");

	volatile s32_t period_in_ticks, duration_in_ticks;

	period_in_ticks = k_ms_to_ticks_ceil32(period);
    429a:	9000      	str	r0, [sp, #0]
    429c:	4630      	mov	r0, r6
    429e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    42a2:	2300      	movs	r3, #0
    42a4:	fbe5 0108 	umlal	r0, r1, r5, r8
    42a8:	f7fb ff18 	bl	dc <__aeabi_uldivmod>
	duration_in_ticks = k_ms_to_ticks_ceil32(duration);
    42ac:	9001      	str	r0, [sp, #4]

	(void)z_abort_timeout(&timer->timeout);
    42ae:	4620      	mov	r0, r4
    42b0:	f001 f9c1 	bl	5636 <z_abort_timeout>
	timer->period = period_in_ticks;
    42b4:	9b00      	ldr	r3, [sp, #0]
	timer->status = 0U;
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    42b6:	4905      	ldr	r1, [pc, #20]	; (42cc <z_impl_k_timer_start+0x58>)
    42b8:	9a01      	ldr	r2, [sp, #4]
	timer->period = period_in_ticks;
    42ba:	6223      	str	r3, [r4, #32]
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    42bc:	4620      	mov	r0, r4
	timer->status = 0U;
    42be:	2300      	movs	r3, #0
    42c0:	6263      	str	r3, [r4, #36]	; 0x24
		     duration_in_ticks);
}
    42c2:	b002      	add	sp, #8
    42c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    42c8:	f7ff befa 	b.w	40c0 <z_add_timeout>
    42cc:	0000422d 	.word	0x0000422d

000042d0 <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
    42d0:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
    42d2:	4c07      	ldr	r4, [pc, #28]	; (42f0 <init_static_pools+0x20>)
    42d4:	4d07      	ldr	r5, [pc, #28]	; (42f4 <init_static_pools+0x24>)
    42d6:	42ac      	cmp	r4, r5
    42d8:	d301      	bcc.n	42de <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
    42da:	2000      	movs	r0, #0
    42dc:	bd38      	pop	{r3, r4, r5, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    42de:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
    42e2:	4620      	mov	r0, r4
	list->tail = (sys_dnode_t *)list;
    42e4:	e9c4 3305 	strd	r3, r3, [r4, #20]
    42e8:	f000 f842 	bl	4370 <z_sys_mem_pool_base_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
    42ec:	341c      	adds	r4, #28
    42ee:	e7f2      	b.n	42d6 <init_static_pools+0x6>
    42f0:	20002654 	.word	0x20002654
    42f4:	20002654 	.word	0x20002654

000042f8 <k_sleep>:
	return z_impl_k_sleep(ms);
    42f8:	f7ff bd26 	b.w	3d48 <z_impl_k_sleep>

000042fc <input_configure>:

int input_configure(input_t *in, u32_t pin, int flags) {
    42fc:	b510      	push	{r4, lr}
    42fe:	4613      	mov	r3, r2
    in->pin = pin;
    4300:	6141      	str	r1, [r0, #20]
    gpio_pin_configure(in->device, in->pin, flags);
    4302:	6800      	ldr	r0, [r0, #0]
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->config(port, access_op, pin, flags);
    4304:	6842      	ldr	r2, [r0, #4]
    4306:	6814      	ldr	r4, [r2, #0]
    4308:	460a      	mov	r2, r1
    430a:	2100      	movs	r1, #0
    430c:	47a0      	blx	r4
    return 0;
}
    430e:	2000      	movs	r0, #0
    4310:	bd10      	pop	{r4, pc}

00004312 <input_read>:

int input_read(input_t *in, u32_t *state) {
    4312:	4602      	mov	r2, r0
    4314:	b510      	push	{r4, lr}
    4316:	460b      	mov	r3, r1
    gpio_pin_read(in->device, in->pin, state);
    4318:	6800      	ldr	r0, [r0, #0]
    431a:	6952      	ldr	r2, [r2, #20]
				  u32_t pin, u32_t *value)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->read(port, access_op, pin, value);
    431c:	6841      	ldr	r1, [r0, #4]
    431e:	688c      	ldr	r4, [r1, #8]
    4320:	2100      	movs	r1, #0
    4322:	47a0      	blx	r4
    return 0;
}
    4324:	2000      	movs	r0, #0
    4326:	bd10      	pop	{r4, pc}

00004328 <button_create>:
#include "es_button.h"

int button_create(es_button_t* button, const char* dev_name, u32_t pin,
                     gpio_callback_handler_t callback)
{
    4328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    432a:	4604      	mov	r4, r0
    432c:	4615      	mov	r5, r2
    432e:	461e      	mov	r6, r3
    4330:	4608      	mov	r0, r1
    4332:	f7ff f8b1 	bl	3498 <z_impl_device_get_binding>
    button->dev = device_get_binding(dev_name);
    button->pin = pin;
    4336:	6125      	str	r5, [r4, #16]
    button->dev = device_get_binding(dev_name);
    4338:	6020      	str	r0, [r4, #0]
	return api->config(port, access_op, pin, flags);
    433a:	6843      	ldr	r3, [r0, #4]
    433c:	462a      	mov	r2, r5
    433e:	681f      	ldr	r7, [r3, #0]
    4340:	2100      	movs	r1, #0
    4342:	f44f 739b 	mov.w	r3, #310	; 0x136
    4346:	47b8      	blx	r7
    gpio_pin_configure(button->dev, pin,
                       GPIO_DIR_IN | GPIO_PUD_PULL_UP | GPIO_INT | GPIO_INT_DEBOUNCE
                           | GPIO_INT_EDGE | GPIO_INT_ACTIVE_HIGH);
    gpio_init_callback(&button->gpio_cb, callback, BIT(pin));
    4348:	2201      	movs	r2, #1
    gpio_add_callback(button->dev, &button->gpio_cb);
    434a:	6820      	ldr	r0, [r4, #0]
				      u32_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    434c:	60a6      	str	r6, [r4, #8]
    gpio_init_callback(&button->gpio_cb, callback, BIT(pin));
    434e:	fa02 f305 	lsl.w	r3, r2, r5
	callback->pin_mask = pin_mask;
    4352:	60e3      	str	r3, [r4, #12]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	if (api->manage_callback == NULL) {
    4354:	6843      	ldr	r3, [r0, #4]
    4356:	68db      	ldr	r3, [r3, #12]
    4358:	1d21      	adds	r1, r4, #4
    435a:	b103      	cbz	r3, 435e <button_create+0x36>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    435c:	4798      	blx	r3
    gpio_pin_enable_callback(button->dev, pin);
    435e:	6820      	ldr	r0, [r4, #0]
	if (api->enable_callback == NULL) {
    4360:	6843      	ldr	r3, [r0, #4]
    4362:	691b      	ldr	r3, [r3, #16]
    4364:	b113      	cbz	r3, 436c <button_create+0x44>
	return api->enable_callback(port, access_op, pin);
    4366:	462a      	mov	r2, r5
    4368:	2100      	movs	r1, #0
    436a:	4798      	blx	r3
    return 0;
}
    436c:	2000      	movs	r0, #0
    436e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00004370 <z_sys_mem_pool_base_init>:

	return (*word >> (4*(bit / 4))) & 0xf;
}

void z_sys_mem_pool_base_init(struct sys_mem_pool_base *p)
{
    4370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int i;
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    4374:	6846      	ldr	r6, [r0, #4]
    4376:	8907      	ldrh	r7, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
    4378:	6801      	ldr	r1, [r0, #0]

	p->max_inline_level = -1;

	for (i = 0; i < p->n_levels; i++) {
    437a:	f890 800a 	ldrb.w	r8, [r0, #10]
	p->max_inline_level = -1;
    437e:	23ff      	movs	r3, #255	; 0xff
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    4380:	fb06 fc07 	mul.w	ip, r6, r7
	p->max_inline_level = -1;
    4384:	72c3      	strb	r3, [r0, #11]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
    4386:	4461      	add	r1, ip
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
    4388:	4632      	mov	r2, r6
	for (i = 0; i < p->n_levels; i++) {
    438a:	2300      	movs	r3, #0
		int nblocks = buflen / sz;

		sys_dlist_init(&p->levels[i].free_list);
    438c:	f04f 090c 	mov.w	r9, #12
	for (i = 0; i < p->n_levels; i++) {
    4390:	4598      	cmp	r8, r3
    4392:	dc05      	bgt.n	43a0 <z_sys_mem_pool_base_init+0x30>
    4394:	2300      	movs	r3, #0
		}

		sz = WB_DN(sz / 4);
	}

	for (i = 0; i < p->n_max; i++) {
    4396:	4619      	mov	r1, r3
    4398:	428f      	cmp	r7, r1
    439a:	dc20      	bgt.n	43de <z_sys_mem_pool_base_init+0x6e>
		void *block = block_ptr(p, p->max_sz, i);

		sys_dlist_append(&p->levels[0].free_list, block);
	}
}
    439c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		sys_dlist_init(&p->levels[i].free_list);
    43a0:	f8d0 a00c 	ldr.w	sl, [r0, #12]
		int nblocks = buflen / sz;
    43a4:	fbbc f5f2 	udiv	r5, ip, r2
		sys_dlist_init(&p->levels[i].free_list);
    43a8:	fb09 fe03 	mul.w	lr, r9, r3
    43ac:	eb0a 040e 	add.w	r4, sl, lr
    43b0:	f104 0b04 	add.w	fp, r4, #4
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
    43b4:	2d20      	cmp	r5, #32
    43b6:	e9c4 bb01 	strd	fp, fp, [r4, #4]
    43ba:	d805      	bhi.n	43c8 <z_sys_mem_pool_base_init+0x58>
			p->max_inline_level = i;
    43bc:	72c3      	strb	r3, [r0, #11]
		sz = WB_DN(sz / 4);
    43be:	0892      	lsrs	r2, r2, #2
    43c0:	f022 0203 	bic.w	r2, r2, #3
	for (i = 0; i < p->n_levels; i++) {
    43c4:	3301      	adds	r3, #1
    43c6:	e7e3      	b.n	4390 <z_sys_mem_pool_base_init+0x20>
			bits += (nblocks + 31)/32;
    43c8:	f115 041f 	adds.w	r4, r5, #31
    43cc:	bf48      	it	mi
    43ce:	f105 043e 	addmi.w	r4, r5, #62	; 0x3e
    43d2:	1164      	asrs	r4, r4, #5
			p->levels[i].bits_p = bits;
    43d4:	f84a 100e 	str.w	r1, [sl, lr]
			bits += (nblocks + 31)/32;
    43d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    43dc:	e7ef      	b.n	43be <z_sys_mem_pool_base_init+0x4e>
		sys_dlist_append(&p->levels[0].free_list, block);
    43de:	68c2      	ldr	r2, [r0, #12]
	return (u8_t *)p->buf + lsz * block;
    43e0:	6805      	ldr	r5, [r0, #0]
		sys_dlist_append(&p->levels[0].free_list, block);
    43e2:	f102 0c04 	add.w	ip, r2, #4
	return (u8_t *)p->buf + lsz * block;
    43e6:	18ec      	adds	r4, r5, r3
	node->next = list;
    43e8:	f845 c003 	str.w	ip, [r5, r3]
	node->prev = list->tail;
    43ec:	6895      	ldr	r5, [r2, #8]
    43ee:	6065      	str	r5, [r4, #4]
	list->tail->next = node;
    43f0:	6895      	ldr	r5, [r2, #8]
	for (i = 0; i < p->n_max; i++) {
    43f2:	3101      	adds	r1, #1
    43f4:	602c      	str	r4, [r5, #0]
	list->tail = node;
    43f6:	4433      	add	r3, r6
    43f8:	6094      	str	r4, [r2, #8]
    43fa:	e7cd      	b.n	4398 <z_sys_mem_pool_base_init+0x28>

000043fc <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    43fc:	4604      	mov	r4, r0
    43fe:	b508      	push	{r3, lr}
    4400:	4608      	mov	r0, r1
    4402:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    4404:	461a      	mov	r2, r3
    4406:	47a0      	blx	r4
	return z_impl_k_current_get();
    4408:	f7ff fcc6 	bl	3d98 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
    440c:	f7fd fc4a 	bl	1ca4 <z_impl_k_thread_abort>

00004410 <arch_printk_char_out>:
}
    4410:	2000      	movs	r0, #0
    4412:	4770      	bx	lr

00004414 <print_err>:
{
    4414:	b570      	push	{r4, r5, r6, lr}
    4416:	4604      	mov	r4, r0
    4418:	460d      	mov	r5, r1
	out('E', ctx);
    441a:	2045      	movs	r0, #69	; 0x45
    441c:	47a0      	blx	r4
	out('R', ctx);
    441e:	4629      	mov	r1, r5
    4420:	2052      	movs	r0, #82	; 0x52
    4422:	47a0      	blx	r4
	out('R', ctx);
    4424:	4629      	mov	r1, r5
    4426:	4623      	mov	r3, r4
    4428:	2052      	movs	r0, #82	; 0x52
}
    442a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
    442e:	4718      	bx	r3

00004430 <z_vprintk>:
{
    4430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4434:	b08b      	sub	sp, #44	; 0x2c
    4436:	461c      	mov	r4, r3
	char length_mod = 0;
    4438:	f04f 0800 	mov.w	r8, #0
    443c:	1e53      	subs	r3, r2, #1
{
    443e:	4606      	mov	r6, r0
    4440:	460f      	mov	r7, r1
    4442:	9302      	str	r3, [sp, #8]
	int min_width = -1;
    4444:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
    4448:	46c1      	mov	r9, r8
			might_format = 0;
    444a:	2500      	movs	r5, #0
					break;
    444c:	e005      	b.n	445a <z_vprintk+0x2a>
		if (!might_format) {
    444e:	b96d      	cbnz	r5, 446c <z_vprintk+0x3c>
			if (*fmt != '%') {
    4450:	2825      	cmp	r0, #37	; 0x25
    4452:	f000 814f 	beq.w	46f4 <z_vprintk+0x2c4>
				out((int)*fmt, ctx);
    4456:	4639      	mov	r1, r7
    4458:	47b0      	blx	r6
	while (*fmt) {
    445a:	9b02      	ldr	r3, [sp, #8]
    445c:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    4460:	9302      	str	r3, [sp, #8]
    4462:	2800      	cmp	r0, #0
    4464:	d1f3      	bne.n	444e <z_vprintk+0x1e>
}
    4466:	b00b      	add	sp, #44	; 0x2c
    4468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
    446c:	2864      	cmp	r0, #100	; 0x64
    446e:	d06e      	beq.n	454e <z_vprintk+0x11e>
    4470:	d81a      	bhi.n	44a8 <z_vprintk+0x78>
    4472:	2839      	cmp	r0, #57	; 0x39
    4474:	d80a      	bhi.n	448c <z_vprintk+0x5c>
    4476:	2831      	cmp	r0, #49	; 0x31
    4478:	d260      	bcs.n	453c <z_vprintk+0x10c>
    447a:	282d      	cmp	r0, #45	; 0x2d
    447c:	f000 8140 	beq.w	4700 <z_vprintk+0x2d0>
    4480:	2830      	cmp	r0, #48	; 0x30
    4482:	d04c      	beq.n	451e <z_vprintk+0xee>
    4484:	2825      	cmp	r0, #37	; 0x25
    4486:	d107      	bne.n	4498 <z_vprintk+0x68>
				out((int)'%', ctx);
    4488:	4639      	mov	r1, r7
    448a:	e00b      	b.n	44a4 <z_vprintk+0x74>
			switch (*fmt) {
    448c:	2858      	cmp	r0, #88	; 0x58
    448e:	f000 80bb 	beq.w	4608 <z_vprintk+0x1d8>
    4492:	2863      	cmp	r0, #99	; 0x63
    4494:	f000 812a 	beq.w	46ec <z_vprintk+0x2bc>
					out((int)'%', ctx);
    4498:	4639      	mov	r1, r7
    449a:	2025      	movs	r0, #37	; 0x25
    449c:	47b0      	blx	r6
					out((int)*fmt, ctx);
    449e:	9b02      	ldr	r3, [sp, #8]
    44a0:	7818      	ldrb	r0, [r3, #0]
    44a2:	4639      	mov	r1, r7
    44a4:	47b0      	blx	r6
    44a6:	e7d0      	b.n	444a <z_vprintk+0x1a>
			switch (*fmt) {
    44a8:	2870      	cmp	r0, #112	; 0x70
    44aa:	f000 80a3 	beq.w	45f4 <z_vprintk+0x1c4>
    44ae:	d811      	bhi.n	44d4 <z_vprintk+0xa4>
    44b0:	2869      	cmp	r0, #105	; 0x69
    44b2:	d04c      	beq.n	454e <z_vprintk+0x11e>
    44b4:	286c      	cmp	r0, #108	; 0x6c
    44b6:	d105      	bne.n	44c4 <z_vprintk+0x94>
				} else if (*fmt == 'l' && length_mod == 'l') {
    44b8:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    44bc:	d12a      	bne.n	4514 <z_vprintk+0xe4>
					length_mod = 'L';
    44be:	f04f 084c 	mov.w	r8, #76	; 0x4c
    44c2:	e7ca      	b.n	445a <z_vprintk+0x2a>
			switch (*fmt) {
    44c4:	2868      	cmp	r0, #104	; 0x68
    44c6:	d1e7      	bne.n	4498 <z_vprintk+0x68>
				if (*fmt == 'h' && length_mod == 'h') {
    44c8:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
    44cc:	d122      	bne.n	4514 <z_vprintk+0xe4>
					length_mod = 'H';
    44ce:	f04f 0848 	mov.w	r8, #72	; 0x48
    44d2:	e7c2      	b.n	445a <z_vprintk+0x2a>
			switch (*fmt) {
    44d4:	2875      	cmp	r0, #117	; 0x75
    44d6:	d071      	beq.n	45bc <z_vprintk+0x18c>
    44d8:	d818      	bhi.n	450c <z_vprintk+0xdc>
    44da:	2873      	cmp	r0, #115	; 0x73
    44dc:	d1dc      	bne.n	4498 <z_vprintk+0x68>
				char *s = va_arg(ap, char *);
    44de:	f854 5b04 	ldr.w	r5, [r4], #4
				while (*s) {
    44e2:	46ab      	mov	fp, r5
    44e4:	465b      	mov	r3, fp
    44e6:	f81b 0b01 	ldrb.w	r0, [fp], #1
    44ea:	2800      	cmp	r0, #0
    44ec:	f040 80fb 	bne.w	46e6 <z_vprintk+0x2b6>
				if (padding == PAD_SPACE_AFTER) {
    44f0:	f1b9 0f03 	cmp.w	r9, #3
    44f4:	f040 810a 	bne.w	470c <z_vprintk+0x2dc>
					int remaining = min_width - (s - start);
    44f8:	1b5d      	subs	r5, r3, r5
    44fa:	ebaa 0505 	sub.w	r5, sl, r5
					while (remaining-- > 0) {
    44fe:	2d00      	cmp	r5, #0
    4500:	dda3      	ble.n	444a <z_vprintk+0x1a>
						out(' ', ctx);
    4502:	4639      	mov	r1, r7
    4504:	2020      	movs	r0, #32
    4506:	47b0      	blx	r6
    4508:	3d01      	subs	r5, #1
    450a:	e7f8      	b.n	44fe <z_vprintk+0xce>
			switch (*fmt) {
    450c:	2878      	cmp	r0, #120	; 0x78
    450e:	d07b      	beq.n	4608 <z_vprintk+0x1d8>
    4510:	287a      	cmp	r0, #122	; 0x7a
    4512:	d1c1      	bne.n	4498 <z_vprintk+0x68>
				} else if (length_mod == 0) {
    4514:	f1b8 0f00 	cmp.w	r8, #0
    4518:	d1be      	bne.n	4498 <z_vprintk+0x68>
    451a:	4680      	mov	r8, r0
    451c:	e79d      	b.n	445a <z_vprintk+0x2a>
				if (min_width < 0 && padding == PAD_NONE) {
    451e:	f1ba 0f00 	cmp.w	sl, #0
    4522:	da0e      	bge.n	4542 <z_vprintk+0x112>
    4524:	f1b9 0f00 	cmp.w	r9, #0
    4528:	f000 80ed 	beq.w	4706 <z_vprintk+0x2d6>
					min_width = *fmt - '0';
    452c:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
    4530:	f1b9 0f00 	cmp.w	r9, #0
    4534:	bf08      	it	eq
    4536:	f04f 0902 	moveq.w	r9, #2
    453a:	e78e      	b.n	445a <z_vprintk+0x2a>
				if (min_width < 0) {
    453c:	f1ba 0f00 	cmp.w	sl, #0
    4540:	dbf4      	blt.n	452c <z_vprintk+0xfc>
					min_width = 10 * min_width + *fmt - '0';
    4542:	230a      	movs	r3, #10
    4544:	fb03 0a0a 	mla	sl, r3, sl, r0
    4548:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
    454c:	e7f0      	b.n	4530 <z_vprintk+0x100>
				if (length_mod == 'z') {
    454e:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
    4552:	d102      	bne.n	455a <z_vprintk+0x12a>
					d = va_arg(ap, int);
    4554:	f854 5b04 	ldr.w	r5, [r4], #4
    4558:	e01f      	b.n	459a <z_vprintk+0x16a>
				} else if (length_mod == 'l') {
    455a:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    455e:	d0f9      	beq.n	4554 <z_vprintk+0x124>
				} else if (length_mod == 'L') {
    4560:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
    4564:	d1f6      	bne.n	4554 <z_vprintk+0x124>
					long long lld = va_arg(ap, long long);
    4566:	3407      	adds	r4, #7
    4568:	f024 0407 	bic.w	r4, r4, #7
    456c:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (lld > __LONG_MAX__ ||
    4570:	f112 4100 	adds.w	r1, r2, #2147483648	; 0x80000000
    4574:	9106      	str	r1, [sp, #24]
    4576:	f143 0100 	adc.w	r1, r3, #0
    457a:	9107      	str	r1, [sp, #28]
    457c:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
    4580:	2100      	movs	r1, #0
    4582:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4586:	4561      	cmp	r1, ip
    4588:	bf08      	it	eq
    458a:	4558      	cmpeq	r0, fp
    458c:	d204      	bcs.n	4598 <z_vprintk+0x168>
						print_err(out, ctx);
    458e:	4639      	mov	r1, r7
    4590:	4630      	mov	r0, r6
    4592:	f7ff ff3f 	bl	4414 <print_err>
						break;
    4596:	e758      	b.n	444a <z_vprintk+0x1a>
					d = lld;
    4598:	4615      	mov	r5, r2
				if (d < 0) {
    459a:	2d00      	cmp	r5, #0
    459c:	da05      	bge.n	45aa <z_vprintk+0x17a>
					out((int)'-', ctx);
    459e:	4639      	mov	r1, r7
    45a0:	202d      	movs	r0, #45	; 0x2d
    45a2:	47b0      	blx	r6
					d = -d;
    45a4:	426d      	negs	r5, r5
					min_width--;
    45a6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
    45aa:	f8cd a000 	str.w	sl, [sp]
    45ae:	464b      	mov	r3, r9
    45b0:	462a      	mov	r2, r5
				_printk_dec_ulong(out, ctx, u, padding,
    45b2:	4639      	mov	r1, r7
    45b4:	4630      	mov	r0, r6
    45b6:	f7fc f899 	bl	6ec <_printk_dec_ulong>
				break;
    45ba:	e746      	b.n	444a <z_vprintk+0x1a>
				if (length_mod == 'z') {
    45bc:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
    45c0:	d102      	bne.n	45c8 <z_vprintk+0x198>
					u = va_arg(ap, unsigned int);
    45c2:	f854 2b04 	ldr.w	r2, [r4], #4
    45c6:	e011      	b.n	45ec <z_vprintk+0x1bc>
				} else if (length_mod == 'l') {
    45c8:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    45cc:	d0f9      	beq.n	45c2 <z_vprintk+0x192>
				} else if (length_mod == 'L') {
    45ce:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
    45d2:	d1f6      	bne.n	45c2 <z_vprintk+0x192>
					unsigned long long llu =
    45d4:	3407      	adds	r4, #7
    45d6:	f024 0407 	bic.w	r4, r4, #7
    45da:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
    45de:	2100      	movs	r1, #0
    45e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    45e4:	4299      	cmp	r1, r3
    45e6:	bf08      	it	eq
    45e8:	4290      	cmpeq	r0, r2
    45ea:	d3d0      	bcc.n	458e <z_vprintk+0x15e>
				_printk_dec_ulong(out, ctx, u, padding,
    45ec:	f8cd a000 	str.w	sl, [sp]
    45f0:	464b      	mov	r3, r9
    45f2:	e7de      	b.n	45b2 <z_vprintk+0x182>
				out('0', ctx);
    45f4:	4639      	mov	r1, r7
    45f6:	2030      	movs	r0, #48	; 0x30
    45f8:	47b0      	blx	r6
				out('x', ctx);
    45fa:	4639      	mov	r1, r7
    45fc:	2078      	movs	r0, #120	; 0x78
    45fe:	47b0      	blx	r6
					min_width = 8;
    4600:	f04f 0a08 	mov.w	sl, #8
				padding = PAD_ZERO_BEFORE;
    4604:	f04f 0901 	mov.w	r9, #1
				if (*fmt == 'p') {
    4608:	9b02      	ldr	r3, [sp, #8]
    460a:	781b      	ldrb	r3, [r3, #0]
    460c:	2b70      	cmp	r3, #112	; 0x70
    460e:	d104      	bne.n	461a <z_vprintk+0x1ea>
					x = va_arg(ap, unsigned int);
    4610:	f854 3b04 	ldr.w	r3, [r4], #4
    4614:	9304      	str	r3, [sp, #16]
    4616:	2300      	movs	r3, #0
    4618:	e00d      	b.n	4636 <z_vprintk+0x206>
				} else if (length_mod == 'l') {
    461a:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
    461e:	d0f7      	beq.n	4610 <z_vprintk+0x1e0>
				} else if (length_mod == 'L') {
    4620:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
    4624:	d1f4      	bne.n	4610 <z_vprintk+0x1e0>
					x = va_arg(ap, unsigned long long);
    4626:	3407      	adds	r4, #7
    4628:	f024 0307 	bic.w	r3, r4, #7
    462c:	461c      	mov	r4, r3
    462e:	685b      	ldr	r3, [r3, #4]
    4630:	f854 2b08 	ldr.w	r2, [r4], #8
    4634:	9204      	str	r2, [sp, #16]
	int digits = 0;
    4636:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
    4638:	2210      	movs	r2, #16
	int digits = 0;
    463a:	9103      	str	r1, [sp, #12]
	int found_largest_digit = 0;
    463c:	9105      	str	r1, [sp, #20]
	int shift = sizeof(num) * 8;
    463e:	f04f 0b40 	mov.w	fp, #64	; 0x40
		shift -= 4;
    4642:	f1ab 0b04 	sub.w	fp, fp, #4
		nibble = (num >> shift) & 0xf;
    4646:	9804      	ldr	r0, [sp, #16]
    4648:	f1cb 0c20 	rsb	ip, fp, #32
    464c:	f1ab 0120 	sub.w	r1, fp, #32
    4650:	fa20 f00b 	lsr.w	r0, r0, fp
    4654:	fa03 fc0c 	lsl.w	ip, r3, ip
    4658:	ea40 000c 	orr.w	r0, r0, ip
    465c:	fa23 f101 	lsr.w	r1, r3, r1
    4660:	4308      	orrs	r0, r1
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
    4662:	f010 000f 	ands.w	r0, r0, #15
    4666:	d108      	bne.n	467a <z_vprintk+0x24a>
    4668:	9905      	ldr	r1, [sp, #20]
    466a:	b911      	cbnz	r1, 4672 <z_vprintk+0x242>
    466c:	f1bb 0f00 	cmp.w	fp, #0
    4670:	d124      	bne.n	46bc <z_vprintk+0x28c>
			nibble += nibble > 9 ? 87 : 48;
    4672:	2130      	movs	r1, #48	; 0x30
    4674:	e005      	b.n	4682 <z_vprintk+0x252>
			found_largest_digit = 1;
    4676:	9505      	str	r5, [sp, #20]
    4678:	e7e3      	b.n	4642 <z_vprintk+0x212>
			nibble += nibble > 9 ? 87 : 48;
    467a:	2809      	cmp	r0, #9
    467c:	bf8c      	ite	hi
    467e:	2157      	movhi	r1, #87	; 0x57
    4680:	2130      	movls	r1, #48	; 0x30
    4682:	4408      	add	r0, r1
			out((int)nibble, ctx);
    4684:	b240      	sxtb	r0, r0
    4686:	4639      	mov	r1, r7
    4688:	9308      	str	r3, [sp, #32]
    468a:	9205      	str	r2, [sp, #20]
    468c:	47b0      	blx	r6
			digits++;
    468e:	9b03      	ldr	r3, [sp, #12]
	while (shift >= 4) {
    4690:	9a05      	ldr	r2, [sp, #20]
			digits++;
    4692:	3301      	adds	r3, #1
    4694:	9303      	str	r3, [sp, #12]
	while (shift >= 4) {
    4696:	9b08      	ldr	r3, [sp, #32]
    4698:	f1bb 0f00 	cmp.w	fp, #0
    469c:	d1eb      	bne.n	4676 <z_vprintk+0x246>
	if (padding == PAD_SPACE_AFTER) {
    469e:	f1b9 0f03 	cmp.w	r9, #3
    46a2:	f47f aed2 	bne.w	444a <z_vprintk+0x1a>
		remaining = min_width * 2 - digits;
    46a6:	9b03      	ldr	r3, [sp, #12]
    46a8:	ebc3 054a 	rsb	r5, r3, sl, lsl #1
		while (remaining-- > 0) {
    46ac:	2d00      	cmp	r5, #0
    46ae:	f77f aecc 	ble.w	444a <z_vprintk+0x1a>
			out(' ', ctx);
    46b2:	4639      	mov	r1, r7
    46b4:	2020      	movs	r0, #32
    46b6:	47b0      	blx	r6
    46b8:	3d01      	subs	r5, #1
    46ba:	e7f7      	b.n	46ac <z_vprintk+0x27c>
		if (remaining-- <= min_width) {
    46bc:	1e51      	subs	r1, r2, #1
    46be:	4592      	cmp	sl, r2
    46c0:	9108      	str	r1, [sp, #32]
    46c2:	db07      	blt.n	46d4 <z_vprintk+0x2a4>
			if (padding == PAD_ZERO_BEFORE) {
    46c4:	f1b9 0f01 	cmp.w	r9, #1
    46c8:	d106      	bne.n	46d8 <z_vprintk+0x2a8>
    46ca:	9309      	str	r3, [sp, #36]	; 0x24
				out('0', ctx);
    46cc:	4639      	mov	r1, r7
    46ce:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
    46d0:	47b0      	blx	r6
    46d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
					x = va_arg(ap, unsigned int);
    46d4:	9a08      	ldr	r2, [sp, #32]
    46d6:	e7b4      	b.n	4642 <z_vprintk+0x212>
			} else if (padding == PAD_SPACE_BEFORE) {
    46d8:	f1b9 0f02 	cmp.w	r9, #2
    46dc:	d1fa      	bne.n	46d4 <z_vprintk+0x2a4>
    46de:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
    46e0:	4639      	mov	r1, r7
    46e2:	2020      	movs	r0, #32
    46e4:	e7f4      	b.n	46d0 <z_vprintk+0x2a0>
					out((int)(*s++), ctx);
    46e6:	4639      	mov	r1, r7
    46e8:	47b0      	blx	r6
    46ea:	e6fb      	b.n	44e4 <z_vprintk+0xb4>
				out(c, ctx);
    46ec:	4639      	mov	r1, r7
    46ee:	f854 0b04 	ldr.w	r0, [r4], #4
    46f2:	e6d7      	b.n	44a4 <z_vprintk+0x74>
				length_mod = 0;
    46f4:	46a8      	mov	r8, r5
				padding = PAD_NONE;
    46f6:	46a9      	mov	r9, r5
				min_width = -1;
    46f8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
				might_format = 1;
    46fc:	2501      	movs	r5, #1
    46fe:	e6ac      	b.n	445a <z_vprintk+0x2a>
				padding = PAD_SPACE_AFTER;
    4700:	f04f 0903 	mov.w	r9, #3
    4704:	e6a9      	b.n	445a <z_vprintk+0x2a>
					padding = PAD_ZERO_BEFORE;
    4706:	f04f 0901 	mov.w	r9, #1
    470a:	e6a6      	b.n	445a <z_vprintk+0x2a>
			might_format = 0;
    470c:	4605      	mov	r5, r0
		++fmt;
    470e:	e6a4      	b.n	445a <z_vprintk+0x2a>

00004710 <printk>:
{
    4710:	b40f      	push	{r0, r1, r2, r3}
    4712:	b507      	push	{r0, r1, r2, lr}
    4714:	a904      	add	r1, sp, #16
    4716:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    471a:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
    471c:	f7fc f838 	bl	790 <vprintk>
}
    4720:	b003      	add	sp, #12
    4722:	f85d eb04 	ldr.w	lr, [sp], #4
    4726:	b004      	add	sp, #16
    4728:	4770      	bx	lr

0000472a <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_STAT, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);

GEN_ABS_SYM_END
    472a:	4770      	bx	lr

0000472c <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
    472c:	2300      	movs	r3, #0
	list->head = NULL;
    472e:	e9c0 3300 	strd	r3, r3, [r0]
}
    4732:	4770      	bx	lr

00004734 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
    4734:	6803      	ldr	r3, [r0, #0]
    4736:	b923      	cbnz	r3, 4742 <log_list_add_tail+0xe>
		list->head = msg;
    4738:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
    473a:	2300      	movs	r3, #0
	list->tail = msg;
    473c:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
    473e:	600b      	str	r3, [r1, #0]
}
    4740:	4770      	bx	lr
		list->tail->next = msg;
    4742:	6843      	ldr	r3, [r0, #4]
    4744:	6019      	str	r1, [r3, #0]
    4746:	e7f8      	b.n	473a <log_list_add_tail+0x6>

00004748 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
    4748:	6800      	ldr	r0, [r0, #0]
    474a:	4770      	bx	lr

0000474c <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
	struct log_msg *msg = list->head;
    474c:	6803      	ldr	r3, [r0, #0]

	if (list->head != NULL) {
    474e:	b10b      	cbz	r3, 4754 <log_list_head_get+0x8>
		list->head = list->head->next;
    4750:	681a      	ldr	r2, [r3, #0]
    4752:	6002      	str	r2, [r0, #0]
	}

	return msg;
}
    4754:	4618      	mov	r0, r3
    4756:	4770      	bx	lr

00004758 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
    4758:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    475a:	f7fc fae5 	bl	d28 <log_msg_chunk_alloc>

	if (msg != NULL) {
    475e:	b118      	cbz	r0, 4768 <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
    4760:	2301      	movs	r3, #1
    4762:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    4764:	2300      	movs	r3, #0
    4766:	8103      	strh	r3, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
	}

	return msg;
}
    4768:	bd08      	pop	{r3, pc}

0000476a <k_cycle_get_32_wrapper>:
#ifndef _ASMLANGUAGE
extern u32_t z_timer_cycle_get_32(void);

static inline u32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
    476a:	f7fc be61 	b.w	1430 <z_timer_cycle_get_32>

0000476e <dummy_timestamp>:
    476e:	2000      	movs	r0, #0
    4770:	4770      	bx	lr

00004772 <log_0>:
{
    4772:	b538      	push	{r3, r4, r5, lr}
    4774:	4605      	mov	r5, r0
    4776:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
    4778:	f7ff ffee 	bl	4758 <z_log_msg_std_alloc>

	if (msg != NULL) {
    477c:	b128      	cbz	r0, 478a <log_0+0x18>
		msg->str = str;
    477e:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
    4780:	4621      	mov	r1, r4
}
    4782:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
    4786:	f7fc b9f1 	b.w	b6c <msg_finalize>
}
    478a:	bd38      	pop	{r3, r4, r5, pc}

0000478c <log_1>:
{
    478c:	b570      	push	{r4, r5, r6, lr}
    478e:	4604      	mov	r4, r0
    4790:	460e      	mov	r6, r1
    4792:	4615      	mov	r5, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
    4794:	f7ff ffe0 	bl	4758 <z_log_msg_std_alloc>

	if (msg != NULL) {
    4798:	b158      	cbz	r0, 47b2 <log_1+0x26>
		msg->str = str;
    479a:	6104      	str	r4, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
    479c:	7a44      	ldrb	r4, [r0, #9]
		msg->payload.single.args[0] = arg1;
    479e:	6146      	str	r6, [r0, #20]
		msg->hdr.params.std.nargs = 1U;
    47a0:	2201      	movs	r2, #1
    47a2:	f362 1407 	bfi	r4, r2, #4, #4
    47a6:	7244      	strb	r4, [r0, #9]
		msg_finalize(msg, src_level);
    47a8:	4629      	mov	r1, r5
}
    47aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
    47ae:	f7fc b9dd 	b.w	b6c <msg_finalize>
}
    47b2:	bd70      	pop	{r4, r5, r6, pc}

000047b4 <log_2>:
{
    47b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    47b8:	4605      	mov	r5, r0
    47ba:	4688      	mov	r8, r1
    47bc:	4617      	mov	r7, r2
    47be:	461e      	mov	r6, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
    47c0:	f7ff ffca 	bl	4758 <z_log_msg_std_alloc>

	if (msg != NULL) {
    47c4:	b160      	cbz	r0, 47e0 <log_2+0x2c>
		msg->str = str;
    47c6:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
    47c8:	7a45      	ldrb	r5, [r0, #9]
    47ca:	2302      	movs	r3, #2
    47cc:	f363 1507 	bfi	r5, r3, #4, #4
    47d0:	7245      	strb	r5, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
    47d2:	e9c0 8705 	strd	r8, r7, [r0, #20]
		msg_finalize(msg, src_level);
    47d6:	4631      	mov	r1, r6
}
    47d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
    47dc:	f7fc b9c6 	b.w	b6c <msg_finalize>
}
    47e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000047e4 <log_3>:
{
    47e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    47e8:	4605      	mov	r5, r0
    47ea:	4689      	mov	r9, r1
    47ec:	4690      	mov	r8, r2
    47ee:	461f      	mov	r7, r3
    47f0:	f8bd 6020 	ldrh.w	r6, [sp, #32]
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
    47f4:	f7ff ffb0 	bl	4758 <z_log_msg_std_alloc>

	if (msg != NULL) {
    47f8:	b168      	cbz	r0, 4816 <log_3+0x32>
		msg->str = str;
    47fa:	6105      	str	r5, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
    47fc:	7a45      	ldrb	r5, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
		msg->payload.single.args[2] = arg3;
    47fe:	61c7      	str	r7, [r0, #28]
		msg->hdr.params.std.nargs = 3U;
    4800:	2303      	movs	r3, #3
    4802:	f363 1507 	bfi	r5, r3, #4, #4
    4806:	7245      	strb	r5, [r0, #9]
		msg->payload.single.args[1] = arg2;
    4808:	e9c0 9805 	strd	r9, r8, [r0, #20]
		msg_finalize(msg, src_level);
    480c:	4631      	mov	r1, r6
}
    480e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
    4812:	f7fc b9ab 	b.w	b6c <msg_finalize>
}
    4816:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000481a <log_n>:
{
    481a:	b510      	push	{r4, lr}
    481c:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
    481e:	f000 f89b 	bl	4958 <log_msg_create_n>
		if (msg == NULL) {
    4822:	b120      	cbz	r0, 482e <log_n+0x14>
		msg_finalize(msg, src_level);
    4824:	4621      	mov	r1, r4
}
    4826:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
    482a:	f7fc b99f 	b.w	b6c <msg_finalize>
}
    482e:	bd10      	pop	{r4, pc}

00004830 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    u8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
    4830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4834:	461c      	mov	r4, r3
	u32_t available_len = msg->hdr.params.hexdump.length;
    4836:	8903      	ldrh	r3, [r0, #8]
{
    4838:	f89d 7020 	ldrb.w	r7, [sp, #32]
	u32_t available_len = msg->hdr.params.hexdump.length;
    483c:	089b      	lsrs	r3, r3, #2
	u8_t *head_data;
	u32_t chunk_len;
	u32_t req_len;
	u32_t cpy_len;

	if (offset >= available_len) {
    483e:	42a3      	cmp	r3, r4
{
    4840:	460e      	mov	r6, r1
	if (offset >= available_len) {
    4842:	d803      	bhi.n	484c <log_msg_hexdump_data_op+0x1c>
		*length = 0;
    4844:	2300      	movs	r3, #0
    4846:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
    4848:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
    484c:	6811      	ldr	r1, [r2, #0]
    484e:	4421      	add	r1, r4
    4850:	4299      	cmp	r1, r3
		*length = available_len - offset;
    4852:	bf84      	itt	hi
    4854:	1b19      	subhi	r1, r3, r4
    4856:	6011      	strhi	r1, [r2, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
    4858:	2b0c      	cmp	r3, #12
	req_len = *length;
    485a:	f8d2 9000 	ldr.w	r9, [r2]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
    485e:	d928      	bls.n	48b2 <log_msg_hexdump_data_op+0x82>
	if (offset < chunk_len) {
    4860:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
    4862:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
    4866:	d82b      	bhi.n	48c0 <log_msg_hexdump_data_op+0x90>
		head_data = msg->payload.ext.data.bytes;
    4868:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
    486a:	2308      	movs	r3, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
    486c:	454b      	cmp	r3, r9
    486e:	bf28      	it	cs
    4870:	464b      	movcs	r3, r9
    4872:	461d      	mov	r5, r3
		if (put_op) {
    4874:	4420      	add	r0, r4
			(void)memcpy(&head_data[offset], data, cpy_len);
    4876:	461a      	mov	r2, r3
		if (put_op) {
    4878:	b1ff      	cbz	r7, 48ba <log_msg_hexdump_data_op+0x8a>
			(void)memcpy(&head_data[offset], data, cpy_len);
    487a:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
    487c:	f000 fb79 	bl	4f72 <memcpy>
		req_len -= cpy_len;
    4880:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
    4884:	442e      	add	r6, r5
	while (req_len > 0) {
    4886:	f1b9 0f00 	cmp.w	r9, #0
    488a:	d0dd      	beq.n	4848 <log_msg_hexdump_data_op+0x18>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
    488c:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
    4890:	454d      	cmp	r5, r9
    4892:	bf28      	it	cs
    4894:	464d      	movcs	r5, r9
		if (put_op) {
    4896:	1d20      	adds	r0, r4, #4
    4898:	4440      	add	r0, r8
			(void)memcpy(&cont->payload.bytes[offset],
    489a:	462a      	mov	r2, r5
		if (put_op) {
    489c:	b1bf      	cbz	r7, 48ce <log_msg_hexdump_data_op+0x9e>
			(void)memcpy(&cont->payload.bytes[offset],
    489e:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
    48a0:	f000 fb67 	bl	4f72 <memcpy>
		req_len -= cpy_len;
    48a4:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
    48a8:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
    48ac:	442e      	add	r6, r5
		offset = 0;
    48ae:	2400      	movs	r4, #0
    48b0:	e7e9      	b.n	4886 <log_msg_hexdump_data_op+0x56>
		head_data = msg->payload.single.bytes;
    48b2:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
    48b4:	f04f 0800 	mov.w	r8, #0
    48b8:	e7d8      	b.n	486c <log_msg_hexdump_data_op+0x3c>
			(void)memcpy(data, &head_data[offset], cpy_len);
    48ba:	4601      	mov	r1, r0
    48bc:	4630      	mov	r0, r6
    48be:	e7dd      	b.n	487c <log_msg_hexdump_data_op+0x4c>
		offset -= chunk_len;
    48c0:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
    48c2:	2c1b      	cmp	r4, #27
    48c4:	d9df      	bls.n	4886 <log_msg_hexdump_data_op+0x56>
			cont = cont->next;
    48c6:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
    48ca:	3c1c      	subs	r4, #28
    48cc:	e7f9      	b.n	48c2 <log_msg_hexdump_data_op+0x92>
			(void)memcpy(data, &cont->payload.bytes[offset],
    48ce:	4601      	mov	r1, r0
    48d0:	4630      	mov	r0, r6
    48d2:	e7e5      	b.n	48a0 <log_msg_hexdump_data_op+0x70>

000048d4 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    48d4:	3004      	adds	r0, #4
    48d6:	f3bf 8f5b 	dmb	ish
    48da:	e850 3f00 	ldrex	r3, [r0]
    48de:	3301      	adds	r3, #1
    48e0:	e840 3200 	strex	r2, r3, [r0]
    48e4:	2a00      	cmp	r2, #0
    48e6:	d1f8      	bne.n	48da <log_msg_get+0x6>
    48e8:	f3bf 8f5b 	dmb	ish
}
    48ec:	4770      	bx	lr

000048ee <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
    48ee:	7a40      	ldrb	r0, [r0, #9]
}
    48f0:	0900      	lsrs	r0, r0, #4
    48f2:	4770      	bx	lr

000048f4 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
    48f4:	7a43      	ldrb	r3, [r0, #9]
    48f6:	091b      	lsrs	r3, r3, #4
    48f8:	428b      	cmp	r3, r1
    48fa:	d916      	bls.n	492a <log_msg_arg_get+0x36>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
    48fc:	2b03      	cmp	r3, #3
    48fe:	d803      	bhi.n	4908 <log_msg_arg_get+0x14>
		arg = msg->payload.single.args[arg_idx];
    4900:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    4904:	6948      	ldr	r0, [r1, #20]
    4906:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
    4908:	2901      	cmp	r1, #1
    490a:	d803      	bhi.n	4914 <log_msg_arg_get+0x20>
		return msg->payload.ext.data.args[arg_idx];
    490c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    4910:	6988      	ldr	r0, [r1, #24]
    4912:	4770      	bx	lr
	cont = msg->payload.ext.next;
    4914:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
    4916:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
    4918:	2906      	cmp	r1, #6
    491a:	d803      	bhi.n	4924 <log_msg_arg_get+0x30>
	return cont->payload.args[arg_idx];
    491c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    4920:	6848      	ldr	r0, [r1, #4]
    4922:	4770      	bx	lr
		arg_idx -= ARGS_CONT_MSG;
    4924:	3907      	subs	r1, #7
		cont = cont->next;
    4926:	681b      	ldr	r3, [r3, #0]
    4928:	e7f6      	b.n	4918 <log_msg_arg_get+0x24>
		return 0;
    492a:	2000      	movs	r0, #0
}
    492c:	4770      	bx	lr

0000492e <log_msg_put>:
{
    492e:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    4930:	1d02      	adds	r2, r0, #4
    4932:	f3bf 8f5b 	dmb	ish
    4936:	e852 1f00 	ldrex	r1, [r2]
    493a:	3901      	subs	r1, #1
    493c:	e842 1c00 	strex	ip, r1, [r2]
    4940:	f1bc 0f00 	cmp.w	ip, #0
    4944:	d1f7      	bne.n	4936 <log_msg_put+0x8>
    4946:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
    494a:	685b      	ldr	r3, [r3, #4]
    494c:	b90b      	cbnz	r3, 4952 <log_msg_put+0x24>
		msg_free(msg);
    494e:	f7fc b9fd 	b.w	d4c <msg_free>
}
    4952:	4770      	bx	lr

00004954 <log_msg_str_get>:
}
    4954:	6900      	ldr	r0, [r0, #16]
    4956:	4770      	bx	lr

00004958 <log_msg_create_n>:
{
    4958:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    495c:	4682      	mov	sl, r0
    495e:	4688      	mov	r8, r1
    4960:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    4962:	f7fc f9e1 	bl	d28 <log_msg_chunk_alloc>
	if (msg != NULL) {
    4966:	4604      	mov	r4, r0
    4968:	b330      	cbz	r0, 49b8 <log_msg_create_n+0x60>
		msg->hdr.ref_cnt = 1;
    496a:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
    496c:	2600      	movs	r6, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
    496e:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
    4970:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    4972:	8106      	strh	r6, [r0, #8]
    4974:	d909      	bls.n	498a <log_msg_create_n+0x32>
	msg->hdr.params.generic.ext = 1;
    4976:	2202      	movs	r2, #2
    4978:	8102      	strh	r2, [r0, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
    497a:	f1a5 0902 	sub.w	r9, r5, #2
	next = &msg->payload.ext.next;
    497e:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
    4982:	6146      	str	r6, [r0, #20]
	while (n > 0) {
    4984:	f1b9 0f00 	cmp.w	r9, #0
    4988:	dc0e      	bgt.n	49a8 <log_msg_create_n+0x50>
		msg->hdr.params.std.nargs = nargs;
    498a:	7a63      	ldrb	r3, [r4, #9]
		msg->str = str;
    498c:	f8c4 a010 	str.w	sl, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
    4990:	f365 1307 	bfi	r3, r5, #4, #4
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
    4994:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
    4996:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
    4998:	d818      	bhi.n	49cc <log_msg_create_n+0x74>
		(void)memcpy(msg->payload.single.args, args,
    499a:	00aa      	lsls	r2, r5, #2
    499c:	4641      	mov	r1, r8
    499e:	f104 0014 	add.w	r0, r4, #20
    49a2:	f000 fae6 	bl	4f72 <memcpy>
		nargs  = 0U;
    49a6:	e007      	b.n	49b8 <log_msg_create_n+0x60>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
    49a8:	f7fc f9be 	bl	d28 <log_msg_chunk_alloc>
		if (cont == NULL) {
    49ac:	4607      	mov	r7, r0
    49ae:	b930      	cbnz	r0, 49be <log_msg_create_n+0x66>
			msg_free(msg);
    49b0:	4620      	mov	r0, r4
    49b2:	f7fc f9cb 	bl	d4c <msg_free>
			return NULL;
    49b6:	463c      	mov	r4, r7
}
    49b8:	4620      	mov	r0, r4
    49ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
    49be:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
    49c2:	f1a9 0907 	sub.w	r9, r9, #7
    49c6:	6006      	str	r6, [r0, #0]
		next = &cont->next;
    49c8:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
    49ca:	e7db      	b.n	4984 <log_msg_create_n+0x2c>
		(void)memcpy(msg->payload.ext.data.args, args,
    49cc:	4641      	mov	r1, r8
    49ce:	2208      	movs	r2, #8
    49d0:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
    49d4:	6967      	ldr	r7, [r4, #20]
		(void)memcpy(msg->payload.ext.data.args, args,
    49d6:	f000 facc 	bl	4f72 <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
    49da:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
    49dc:	f108 0808 	add.w	r8, r8, #8
		u32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
    49e0:	2d07      	cmp	r5, #7
    49e2:	462e      	mov	r6, r5
    49e4:	bf28      	it	cs
    49e6:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
    49e8:	ea4f 0986 	mov.w	r9, r6, lsl #2
    49ec:	4641      	mov	r1, r8
    49ee:	1d38      	adds	r0, r7, #4
    49f0:	464a      	mov	r2, r9
    49f2:	f000 fabe 	bl	4f72 <memcpy>
	while (nargs != 0U) {
    49f6:	1bad      	subs	r5, r5, r6
		args += cpy_args;
    49f8:	44c8      	add	r8, r9
		cont = cont->next;
    49fa:	683f      	ldr	r7, [r7, #0]
	while (nargs != 0U) {
    49fc:	d1f0      	bne.n	49e0 <log_msg_create_n+0x88>
    49fe:	e7db      	b.n	49b8 <log_msg_create_n+0x60>

00004a00 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      u8_t *data,
			      size_t *length,
			      size_t offset)
{
    4a00:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
    4a02:	2400      	movs	r4, #0
    4a04:	9400      	str	r4, [sp, #0]
    4a06:	f7ff ff13 	bl	4830 <log_msg_hexdump_data_op>
}
    4a0a:	b002      	add	sp, #8
    4a0c:	bd10      	pop	{r4, pc}

00004a0e <buffer_write>:
{
    4a0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4a10:	4606      	mov	r6, r0
    4a12:	460d      	mov	r5, r1
    4a14:	4614      	mov	r4, r2
    4a16:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
    4a18:	4621      	mov	r1, r4
    4a1a:	4628      	mov	r0, r5
    4a1c:	463a      	mov	r2, r7
    4a1e:	47b0      	blx	r6
	} while (len != 0);
    4a20:	1a24      	subs	r4, r4, r0
		buf += processed;
    4a22:	4405      	add	r5, r0
	} while (len != 0);
    4a24:	d1f8      	bne.n	4a18 <buffer_write+0xa>
}
    4a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00004a28 <std_print>:
{
    4a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4a2c:	b08e      	sub	sp, #56	; 0x38
    4a2e:	af0e      	add	r7, sp, #56	; 0x38
    4a30:	4681      	mov	r9, r0
    4a32:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
    4a34:	f7ff ff8e 	bl	4954 <log_msg_str_get>
    4a38:	4606      	mov	r6, r0
	u32_t nargs = log_msg_nargs_get(msg);
    4a3a:	4648      	mov	r0, r9
    4a3c:	f7ff ff57 	bl	48ee <log_msg_nargs_get>
	u32_t *args = alloca(sizeof(u32_t)*nargs);
    4a40:	0083      	lsls	r3, r0, #2
    4a42:	3307      	adds	r3, #7
    4a44:	f023 0307 	bic.w	r3, r3, #7
    4a48:	ebad 0d03 	sub.w	sp, sp, r3
	u32_t nargs = log_msg_nargs_get(msg);
    4a4c:	4682      	mov	sl, r0
	u32_t *args = alloca(sizeof(u32_t)*nargs);
    4a4e:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
    4a50:	f04f 0800 	mov.w	r8, #0
    4a54:	45d0      	cmp	r8, sl
    4a56:	d116      	bne.n	4a86 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
    4a58:	4648      	mov	r0, r9
    4a5a:	f7ff ff48 	bl	48ee <log_msg_nargs_get>
    4a5e:	280f      	cmp	r0, #15
    4a60:	d81e      	bhi.n	4aa0 <std_print+0x78>
    4a62:	e8df f010 	tbh	[pc, r0, lsl #1]
    4a66:	0019      	.short	0x0019
    4a68:	00260020 	.word	0x00260020
    4a6c:	0036002d 	.word	0x0036002d
    4a70:	004e0041 	.word	0x004e0041
    4a74:	006e005d 	.word	0x006e005d
    4a78:	00960081 	.word	0x00960081
    4a7c:	00c600ad 	.word	0x00c600ad
    4a80:	00fe00e1 	.word	0x00fe00e1
    4a84:	011d      	.short	0x011d
		args[i] = log_msg_arg_get(msg, i);
    4a86:	4641      	mov	r1, r8
    4a88:	4648      	mov	r0, r9
    4a8a:	f7ff ff33 	bl	48f4 <log_msg_arg_get>
    4a8e:	f844 0028 	str.w	r0, [r4, r8, lsl #2]
	for (i = 0; i < nargs; i++) {
    4a92:	f108 0801 	add.w	r8, r8, #1
    4a96:	e7dd      	b.n	4a54 <std_print+0x2c>
		print_formatted(log_output, str);
    4a98:	4631      	mov	r1, r6
    4a9a:	4628      	mov	r0, r5
    4a9c:	f7fc f988 	bl	db0 <print_formatted>
}
    4aa0:	46bd      	mov	sp, r7
    4aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
    4aa6:	6822      	ldr	r2, [r4, #0]
    4aa8:	4631      	mov	r1, r6
    4aaa:	4628      	mov	r0, r5
    4aac:	f7fc f980 	bl	db0 <print_formatted>
		break;
    4ab0:	e7f6      	b.n	4aa0 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
    4ab2:	e9d4 2300 	ldrd	r2, r3, [r4]
    4ab6:	4631      	mov	r1, r6
    4ab8:	4628      	mov	r0, r5
    4aba:	f7fc f979 	bl	db0 <print_formatted>
		break;
    4abe:	e7ef      	b.n	4aa0 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
    4ac0:	68a3      	ldr	r3, [r4, #8]
    4ac2:	9300      	str	r3, [sp, #0]
    4ac4:	e9d4 2300 	ldrd	r2, r3, [r4]
    4ac8:	4631      	mov	r1, r6
    4aca:	4628      	mov	r0, r5
    4acc:	f7fc f970 	bl	db0 <print_formatted>
		break;
    4ad0:	e7e6      	b.n	4aa0 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    4ad2:	68e3      	ldr	r3, [r4, #12]
    4ad4:	9301      	str	r3, [sp, #4]
    4ad6:	68a3      	ldr	r3, [r4, #8]
    4ad8:	9300      	str	r3, [sp, #0]
    4ada:	e9d4 2300 	ldrd	r2, r3, [r4]
    4ade:	4631      	mov	r1, r6
    4ae0:	4628      	mov	r0, r5
    4ae2:	f7fc f965 	bl	db0 <print_formatted>
		break;
    4ae6:	e7db      	b.n	4aa0 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    4ae8:	6923      	ldr	r3, [r4, #16]
    4aea:	9302      	str	r3, [sp, #8]
    4aec:	68e3      	ldr	r3, [r4, #12]
    4aee:	9301      	str	r3, [sp, #4]
    4af0:	68a3      	ldr	r3, [r4, #8]
    4af2:	9300      	str	r3, [sp, #0]
    4af4:	e9d4 2300 	ldrd	r2, r3, [r4]
    4af8:	4631      	mov	r1, r6
    4afa:	4628      	mov	r0, r5
    4afc:	f7fc f958 	bl	db0 <print_formatted>
		break;
    4b00:	e7ce      	b.n	4aa0 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    4b02:	6963      	ldr	r3, [r4, #20]
    4b04:	9303      	str	r3, [sp, #12]
    4b06:	6923      	ldr	r3, [r4, #16]
    4b08:	9302      	str	r3, [sp, #8]
    4b0a:	68e3      	ldr	r3, [r4, #12]
    4b0c:	9301      	str	r3, [sp, #4]
    4b0e:	68a3      	ldr	r3, [r4, #8]
    4b10:	9300      	str	r3, [sp, #0]
    4b12:	e9d4 2300 	ldrd	r2, r3, [r4]
    4b16:	4631      	mov	r1, r6
    4b18:	4628      	mov	r0, r5
    4b1a:	f7fc f949 	bl	db0 <print_formatted>
		break;
    4b1e:	e7bf      	b.n	4aa0 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    4b20:	69a3      	ldr	r3, [r4, #24]
    4b22:	9304      	str	r3, [sp, #16]
    4b24:	6963      	ldr	r3, [r4, #20]
    4b26:	9303      	str	r3, [sp, #12]
    4b28:	6923      	ldr	r3, [r4, #16]
    4b2a:	9302      	str	r3, [sp, #8]
    4b2c:	68e3      	ldr	r3, [r4, #12]
    4b2e:	9301      	str	r3, [sp, #4]
    4b30:	68a3      	ldr	r3, [r4, #8]
    4b32:	9300      	str	r3, [sp, #0]
    4b34:	e9d4 2300 	ldrd	r2, r3, [r4]
    4b38:	4631      	mov	r1, r6
    4b3a:	4628      	mov	r0, r5
    4b3c:	f7fc f938 	bl	db0 <print_formatted>
		break;
    4b40:	e7ae      	b.n	4aa0 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    4b42:	69e3      	ldr	r3, [r4, #28]
    4b44:	9305      	str	r3, [sp, #20]
    4b46:	69a3      	ldr	r3, [r4, #24]
    4b48:	9304      	str	r3, [sp, #16]
    4b4a:	6963      	ldr	r3, [r4, #20]
    4b4c:	9303      	str	r3, [sp, #12]
    4b4e:	6923      	ldr	r3, [r4, #16]
    4b50:	9302      	str	r3, [sp, #8]
    4b52:	68e3      	ldr	r3, [r4, #12]
    4b54:	9301      	str	r3, [sp, #4]
    4b56:	68a3      	ldr	r3, [r4, #8]
    4b58:	9300      	str	r3, [sp, #0]
    4b5a:	e9d4 2300 	ldrd	r2, r3, [r4]
    4b5e:	4631      	mov	r1, r6
    4b60:	4628      	mov	r0, r5
    4b62:	f7fc f925 	bl	db0 <print_formatted>
		break;
    4b66:	e79b      	b.n	4aa0 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    4b68:	6a23      	ldr	r3, [r4, #32]
    4b6a:	9306      	str	r3, [sp, #24]
    4b6c:	69e3      	ldr	r3, [r4, #28]
    4b6e:	9305      	str	r3, [sp, #20]
    4b70:	69a3      	ldr	r3, [r4, #24]
    4b72:	9304      	str	r3, [sp, #16]
    4b74:	6963      	ldr	r3, [r4, #20]
    4b76:	9303      	str	r3, [sp, #12]
    4b78:	6923      	ldr	r3, [r4, #16]
    4b7a:	9302      	str	r3, [sp, #8]
    4b7c:	68e3      	ldr	r3, [r4, #12]
    4b7e:	9301      	str	r3, [sp, #4]
    4b80:	68a3      	ldr	r3, [r4, #8]
    4b82:	9300      	str	r3, [sp, #0]
    4b84:	e9d4 2300 	ldrd	r2, r3, [r4]
    4b88:	4631      	mov	r1, r6
    4b8a:	4628      	mov	r0, r5
    4b8c:	f7fc f910 	bl	db0 <print_formatted>
		break;
    4b90:	e786      	b.n	4aa0 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    4b92:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4b94:	9307      	str	r3, [sp, #28]
    4b96:	6a23      	ldr	r3, [r4, #32]
    4b98:	9306      	str	r3, [sp, #24]
    4b9a:	69e3      	ldr	r3, [r4, #28]
    4b9c:	9305      	str	r3, [sp, #20]
    4b9e:	69a3      	ldr	r3, [r4, #24]
    4ba0:	9304      	str	r3, [sp, #16]
    4ba2:	6963      	ldr	r3, [r4, #20]
    4ba4:	9303      	str	r3, [sp, #12]
    4ba6:	6923      	ldr	r3, [r4, #16]
    4ba8:	9302      	str	r3, [sp, #8]
    4baa:	68e3      	ldr	r3, [r4, #12]
    4bac:	9301      	str	r3, [sp, #4]
    4bae:	68a3      	ldr	r3, [r4, #8]
    4bb0:	9300      	str	r3, [sp, #0]
    4bb2:	e9d4 2300 	ldrd	r2, r3, [r4]
    4bb6:	4631      	mov	r1, r6
    4bb8:	4628      	mov	r0, r5
    4bba:	f7fc f8f9 	bl	db0 <print_formatted>
		break;
    4bbe:	e76f      	b.n	4aa0 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    4bc0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4bc2:	9308      	str	r3, [sp, #32]
    4bc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4bc6:	9307      	str	r3, [sp, #28]
    4bc8:	6a23      	ldr	r3, [r4, #32]
    4bca:	9306      	str	r3, [sp, #24]
    4bcc:	69e3      	ldr	r3, [r4, #28]
    4bce:	9305      	str	r3, [sp, #20]
    4bd0:	69a3      	ldr	r3, [r4, #24]
    4bd2:	9304      	str	r3, [sp, #16]
    4bd4:	6963      	ldr	r3, [r4, #20]
    4bd6:	9303      	str	r3, [sp, #12]
    4bd8:	6923      	ldr	r3, [r4, #16]
    4bda:	9302      	str	r3, [sp, #8]
    4bdc:	68e3      	ldr	r3, [r4, #12]
    4bde:	9301      	str	r3, [sp, #4]
    4be0:	68a3      	ldr	r3, [r4, #8]
    4be2:	9300      	str	r3, [sp, #0]
    4be4:	e9d4 2300 	ldrd	r2, r3, [r4]
    4be8:	4631      	mov	r1, r6
    4bea:	4628      	mov	r0, r5
    4bec:	f7fc f8e0 	bl	db0 <print_formatted>
		break;
    4bf0:	e756      	b.n	4aa0 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    4bf2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4bf4:	9309      	str	r3, [sp, #36]	; 0x24
    4bf6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4bf8:	9308      	str	r3, [sp, #32]
    4bfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4bfc:	9307      	str	r3, [sp, #28]
    4bfe:	6a23      	ldr	r3, [r4, #32]
    4c00:	9306      	str	r3, [sp, #24]
    4c02:	69e3      	ldr	r3, [r4, #28]
    4c04:	9305      	str	r3, [sp, #20]
    4c06:	69a3      	ldr	r3, [r4, #24]
    4c08:	9304      	str	r3, [sp, #16]
    4c0a:	6963      	ldr	r3, [r4, #20]
    4c0c:	9303      	str	r3, [sp, #12]
    4c0e:	6923      	ldr	r3, [r4, #16]
    4c10:	9302      	str	r3, [sp, #8]
    4c12:	68e3      	ldr	r3, [r4, #12]
    4c14:	9301      	str	r3, [sp, #4]
    4c16:	68a3      	ldr	r3, [r4, #8]
    4c18:	9300      	str	r3, [sp, #0]
    4c1a:	e9d4 2300 	ldrd	r2, r3, [r4]
    4c1e:	4631      	mov	r1, r6
    4c20:	4628      	mov	r0, r5
    4c22:	f7fc f8c5 	bl	db0 <print_formatted>
		break;
    4c26:	e73b      	b.n	4aa0 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    4c28:	6b23      	ldr	r3, [r4, #48]	; 0x30
    4c2a:	930a      	str	r3, [sp, #40]	; 0x28
    4c2c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4c2e:	9309      	str	r3, [sp, #36]	; 0x24
    4c30:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4c32:	9308      	str	r3, [sp, #32]
    4c34:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4c36:	9307      	str	r3, [sp, #28]
    4c38:	6a23      	ldr	r3, [r4, #32]
    4c3a:	9306      	str	r3, [sp, #24]
    4c3c:	69e3      	ldr	r3, [r4, #28]
    4c3e:	9305      	str	r3, [sp, #20]
    4c40:	69a3      	ldr	r3, [r4, #24]
    4c42:	9304      	str	r3, [sp, #16]
    4c44:	6963      	ldr	r3, [r4, #20]
    4c46:	9303      	str	r3, [sp, #12]
    4c48:	6923      	ldr	r3, [r4, #16]
    4c4a:	9302      	str	r3, [sp, #8]
    4c4c:	68e3      	ldr	r3, [r4, #12]
    4c4e:	9301      	str	r3, [sp, #4]
    4c50:	68a3      	ldr	r3, [r4, #8]
    4c52:	9300      	str	r3, [sp, #0]
    4c54:	e9d4 2300 	ldrd	r2, r3, [r4]
    4c58:	4631      	mov	r1, r6
    4c5a:	4628      	mov	r0, r5
    4c5c:	f7fc f8a8 	bl	db0 <print_formatted>
		break;
    4c60:	e71e      	b.n	4aa0 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    4c62:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4c64:	930b      	str	r3, [sp, #44]	; 0x2c
    4c66:	6b23      	ldr	r3, [r4, #48]	; 0x30
    4c68:	930a      	str	r3, [sp, #40]	; 0x28
    4c6a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4c6c:	9309      	str	r3, [sp, #36]	; 0x24
    4c6e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4c70:	9308      	str	r3, [sp, #32]
    4c72:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4c74:	9307      	str	r3, [sp, #28]
    4c76:	6a23      	ldr	r3, [r4, #32]
    4c78:	9306      	str	r3, [sp, #24]
    4c7a:	69e3      	ldr	r3, [r4, #28]
    4c7c:	9305      	str	r3, [sp, #20]
    4c7e:	69a3      	ldr	r3, [r4, #24]
    4c80:	9304      	str	r3, [sp, #16]
    4c82:	6963      	ldr	r3, [r4, #20]
    4c84:	9303      	str	r3, [sp, #12]
    4c86:	6923      	ldr	r3, [r4, #16]
    4c88:	9302      	str	r3, [sp, #8]
    4c8a:	68e3      	ldr	r3, [r4, #12]
    4c8c:	9301      	str	r3, [sp, #4]
    4c8e:	68a3      	ldr	r3, [r4, #8]
    4c90:	9300      	str	r3, [sp, #0]
    4c92:	e9d4 2300 	ldrd	r2, r3, [r4]
    4c96:	4631      	mov	r1, r6
    4c98:	4628      	mov	r0, r5
    4c9a:	f7fc f889 	bl	db0 <print_formatted>
		break;
    4c9e:	e6ff      	b.n	4aa0 <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
    4ca0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    4ca2:	930c      	str	r3, [sp, #48]	; 0x30
    4ca4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    4ca6:	930b      	str	r3, [sp, #44]	; 0x2c
    4ca8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    4caa:	930a      	str	r3, [sp, #40]	; 0x28
    4cac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4cae:	9309      	str	r3, [sp, #36]	; 0x24
    4cb0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4cb2:	9308      	str	r3, [sp, #32]
    4cb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4cb6:	9307      	str	r3, [sp, #28]
    4cb8:	6a23      	ldr	r3, [r4, #32]
    4cba:	9306      	str	r3, [sp, #24]
    4cbc:	69e3      	ldr	r3, [r4, #28]
    4cbe:	9305      	str	r3, [sp, #20]
    4cc0:	69a3      	ldr	r3, [r4, #24]
    4cc2:	9304      	str	r3, [sp, #16]
    4cc4:	6963      	ldr	r3, [r4, #20]
    4cc6:	9303      	str	r3, [sp, #12]
    4cc8:	6923      	ldr	r3, [r4, #16]
    4cca:	9302      	str	r3, [sp, #8]
    4ccc:	68e3      	ldr	r3, [r4, #12]
    4cce:	9301      	str	r3, [sp, #4]
    4cd0:	68a3      	ldr	r3, [r4, #8]
    4cd2:	9300      	str	r3, [sp, #0]
    4cd4:	e9d4 2300 	ldrd	r2, r3, [r4]
    4cd8:	4631      	mov	r1, r6
    4cda:	4628      	mov	r0, r5
    4cdc:	f7fc f868 	bl	db0 <print_formatted>
}
    4ce0:	e6de      	b.n	4aa0 <std_print+0x78>

00004ce2 <log_output_flush>:
		     log_output->control_block->offset,
    4ce2:	6842      	ldr	r2, [r0, #4]
	buffer_write(log_output->func, log_output->buf,
    4ce4:	6881      	ldr	r1, [r0, #8]
{
    4ce6:	b510      	push	{r4, lr}
    4ce8:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
    4cea:	e9d2 2300 	ldrd	r2, r3, [r2]
    4cee:	6800      	ldr	r0, [r0, #0]
    4cf0:	f7ff fe8d 	bl	4a0e <buffer_write>
	log_output->control_block->offset = 0;
    4cf4:	6863      	ldr	r3, [r4, #4]
    4cf6:	2200      	movs	r2, #0
    4cf8:	601a      	str	r2, [r3, #0]
}
    4cfa:	bd10      	pop	{r4, pc}

00004cfc <out_func>:
{
    4cfc:	b508      	push	{r3, lr}
	out_ctx->buf[out_ctx->control_block->offset] = (u8_t)c;
    4cfe:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
    4d02:	681b      	ldr	r3, [r3, #0]
    4d04:	54d0      	strb	r0, [r2, r3]
	out_ctx->control_block->offset++;
    4d06:	684a      	ldr	r2, [r1, #4]
    4d08:	6813      	ldr	r3, [r2, #0]
    4d0a:	3301      	adds	r3, #1
    4d0c:	6013      	str	r3, [r2, #0]
	if (out_ctx->control_block->offset == out_ctx->size) {
    4d0e:	68ca      	ldr	r2, [r1, #12]
    4d10:	4293      	cmp	r3, r2
    4d12:	d102      	bne.n	4d1a <out_func+0x1e>
		log_output_flush(out_ctx);
    4d14:	4608      	mov	r0, r1
    4d16:	f7ff ffe4 	bl	4ce2 <log_output_flush>
}
    4d1a:	2000      	movs	r0, #0
    4d1c:	bd08      	pop	{r3, pc}

00004d1e <char_out>:
{
    4d1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4d20:	460d      	mov	r5, r1
    4d22:	4616      	mov	r6, r2
	for (size_t i = 0; i < length; i++) {
    4d24:	4604      	mov	r4, r0
    4d26:	1847      	adds	r7, r0, r1
    4d28:	42bc      	cmp	r4, r7
    4d2a:	d101      	bne.n	4d30 <char_out+0x12>
}
    4d2c:	4628      	mov	r0, r5
    4d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(dev, data[i]);
    4d30:	f814 1b01 	ldrb.w	r1, [r4], #1
    4d34:	6873      	ldr	r3, [r6, #4]
    4d36:	4630      	mov	r0, r6
    4d38:	685b      	ldr	r3, [r3, #4]
    4d3a:	4798      	blx	r3
    4d3c:	e7f4      	b.n	4d28 <char_out+0xa>

00004d3e <get_status>:
	struct nrf_clock_control *data = dev->driver_data;
    4d3e:	6883      	ldr	r3, [r0, #8]
	if (data->started) {
    4d40:	7a5a      	ldrb	r2, [r3, #9]
    4d42:	b922      	cbnz	r2, 4d4e <get_status+0x10>
	if (data->ref > 0) {
    4d44:	7a18      	ldrb	r0, [r3, #8]
		return CLOCK_CONTROL_STATUS_ON;
    4d46:	fab0 f080 	clz	r0, r0
    4d4a:	0940      	lsrs	r0, r0, #5
    4d4c:	4770      	bx	lr
    4d4e:	2002      	movs	r0, #2
}
    4d50:	4770      	bx	lr

00004d52 <lfclk_init>:
	sys_slist_init(&((struct nrf_clock_control *)dev->driver_data)->list);
    4d52:	6883      	ldr	r3, [r0, #8]
	list->head = NULL;
    4d54:	2000      	movs	r0, #0
	list->tail = NULL;
    4d56:	e9c3 0000 	strd	r0, r0, [r3]
}
    4d5a:	4770      	bx	lr

00004d5c <clkstarted_handle>:
{
    4d5c:	b538      	push	{r3, r4, r5, lr}
	struct nrf_clock_control *data = dev->driver_data;
    4d5e:	6884      	ldr	r4, [r0, #8]
	data->started = true;
    4d60:	2301      	movs	r3, #1
{
    4d62:	4605      	mov	r5, r0
	data->started = true;
    4d64:	7263      	strb	r3, [r4, #9]
	__asm__ volatile(
    4d66:	f04f 0320 	mov.w	r3, #32
    4d6a:	f3ef 8111 	mrs	r1, BASEPRI
    4d6e:	f383 8811 	msr	BASEPRI, r3
    4d72:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
    4d76:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    4d78:	b12b      	cbz	r3, 4d86 <clkstarted_handle+0x2a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    4d7a:	6860      	ldr	r0, [r4, #4]
    4d7c:	681a      	ldr	r2, [r3, #0]
	list->head = node;
    4d7e:	6022      	str	r2, [r4, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    4d80:	4283      	cmp	r3, r0
	list->tail = node;
    4d82:	bf08      	it	eq
    4d84:	6062      	streq	r2, [r4, #4]
	__asm__ volatile(
    4d86:	f381 8811 	msr	BASEPRI, r1
    4d8a:	f3bf 8f6f 	isb	sy
	while ((async_data = list_get(&data->list)) != NULL) {
    4d8e:	b903      	cbnz	r3, 4d92 <clkstarted_handle+0x36>
}
    4d90:	bd38      	pop	{r3, r4, r5, pc}
		async_data->cb(dev, async_data->user_data);
    4d92:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
    4d96:	4628      	mov	r0, r5
    4d98:	4790      	blx	r2
    4d9a:	e7e4      	b.n	4d66 <clkstarted_handle+0xa>

00004d9c <clock_async_start>:
{
    4d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const struct nrf_clock_control_config *config =
    4d9e:	6803      	ldr	r3, [r0, #0]
{
    4da0:	4606      	mov	r6, r0
	const struct nrf_clock_control_config *config =
    4da2:	689d      	ldr	r5, [r3, #8]
	struct nrf_clock_control *clk_data = dev->driver_data;
    4da4:	6883      	ldr	r3, [r0, #8]
	if ((data != NULL)
    4da6:	b132      	cbz	r2, 4db6 <clock_async_start+0x1a>
	sys_snode_t *item = sys_slist_peek_head(list);
    4da8:	6819      	ldr	r1, [r3, #0]
		if (item == node) {
    4daa:	428a      	cmp	r2, r1
    4dac:	d04c      	beq.n	4e48 <clock_async_start+0xac>
Z_GENLIST_PEEK_NEXT(slist, snode)
    4dae:	b111      	cbz	r1, 4db6 <clock_async_start+0x1a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    4db0:	6809      	ldr	r1, [r1, #0]
	} while (item);
    4db2:	2900      	cmp	r1, #0
    4db4:	d1f9      	bne.n	4daa <clock_async_start+0xe>
	__asm__ volatile(
    4db6:	f04f 0020 	mov.w	r0, #32
    4dba:	f3ef 8111 	mrs	r1, BASEPRI
    4dbe:	f380 8811 	msr	BASEPRI, r0
    4dc2:	f3bf 8f6f 	isb	sy
	ref = ++clk_data->ref;
    4dc6:	7a1c      	ldrb	r4, [r3, #8]
    4dc8:	3401      	adds	r4, #1
    4dca:	b2e4      	uxtb	r4, r4
    4dcc:	721c      	strb	r4, [r3, #8]
	__asm__ volatile(
    4dce:	f381 8811 	msr	BASEPRI, r1
    4dd2:	f3bf 8f6f 	isb	sy
	if (data) {
    4dd6:	b30a      	cbz	r2, 4e1c <clock_async_start+0x80>
    p_reg->INTENCLR = mask;
    4dd8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    4ddc:	2003      	movs	r0, #3
    4dde:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
		already_started = clk_data->started;
    4de2:	7a59      	ldrb	r1, [r3, #9]
		if (!already_started) {
    4de4:	b981      	cbnz	r1, 4e08 <clock_async_start+0x6c>
	__asm__ volatile(
    4de6:	f04f 0020 	mov.w	r0, #32
    4dea:	f3ef 8711 	mrs	r7, BASEPRI
    4dee:	f380 8811 	msr	BASEPRI, r0
    4df2:	f3bf 8f6f 	isb	sy
	parent->next = child;
    4df6:	6011      	str	r1, [r2, #0]
Z_GENLIST_APPEND(slist, snode)
    4df8:	6858      	ldr	r0, [r3, #4]
    4dfa:	b9d0      	cbnz	r0, 4e32 <clock_async_start+0x96>
	list->head = node;
    4dfc:	e9c3 2200 	strd	r2, r2, [r3]
	__asm__ volatile(
    4e00:	f387 8811 	msr	BASEPRI, r7
    4e04:	f3bf 8f6f 	isb	sy
    p_reg->INTENSET = mask;
    4e08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4e0c:	2003      	movs	r0, #3
    4e0e:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
		if (already_started) {
    4e12:	b119      	cbz	r1, 4e1c <clock_async_start+0x80>
			data->cb(dev, data->user_data);
    4e14:	e9d2 3101 	ldrd	r3, r1, [r2, #4]
    4e18:	4630      	mov	r0, r6
    4e1a:	4798      	blx	r3
	if (ref == 1) {
    4e1c:	2c01      	cmp	r4, #1
    4e1e:	d106      	bne.n	4e2e <clock_async_start+0x92>
		do_start =  (config->start_handler) ?
    4e20:	682b      	ldr	r3, [r5, #0]
				config->start_handler(dev) : true;
    4e22:	b94b      	cbnz	r3, 4e38 <clock_async_start+0x9c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4e24:	7aab      	ldrb	r3, [r5, #10]
    4e26:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4e2a:	2201      	movs	r2, #1
    4e2c:	601a      	str	r2, [r3, #0]
	return 0;
    4e2e:	2000      	movs	r0, #0
    4e30:	e00c      	b.n	4e4c <clock_async_start+0xb0>
	parent->next = child;
    4e32:	6002      	str	r2, [r0, #0]
	list->tail = node;
    4e34:	605a      	str	r2, [r3, #4]
    4e36:	e7e3      	b.n	4e00 <clock_async_start+0x64>
				config->start_handler(dev) : true;
    4e38:	4630      	mov	r0, r6
    4e3a:	4798      	blx	r3
    4e3c:	2800      	cmp	r0, #0
    4e3e:	d1f1      	bne.n	4e24 <clock_async_start+0x88>
			clkstarted_handle(dev);
    4e40:	4630      	mov	r0, r6
    4e42:	f7ff ff8b 	bl	4d5c <clkstarted_handle>
    4e46:	e7f2      	b.n	4e2e <clock_async_start+0x92>
		return -EBUSY;
    4e48:	f06f 000f 	mvn.w	r0, #15
}
    4e4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00004e4e <clock_start>:
	return clock_async_start(dev, sub_system, NULL);
    4e4e:	2200      	movs	r2, #0
    4e50:	f7ff bfa4 	b.w	4d9c <clock_async_start>

00004e54 <hfclk_init>:
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    4e54:	2200      	movs	r2, #0
{
    4e56:	b510      	push	{r4, lr}
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    4e58:	2101      	movs	r1, #1
{
    4e5a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0,
    4e5c:	4610      	mov	r0, r2
    4e5e:	f7fc fb73 	bl	1548 <z_arm_irq_priority_set>
	irq_enable(DT_INST_0_NORDIC_NRF_CLOCK_IRQ_0);
    4e62:	2000      	movs	r0, #0
    4e64:	f7fc fb60 	bl	1528 <arch_irq_enable>
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
    4e68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4e6c:	2201      	movs	r2, #1
    4e6e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    p_reg->INTENSET = mask;
    4e72:	2203      	movs	r2, #3
    4e74:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	sys_slist_init(&((struct nrf_clock_control *)dev->driver_data)->list);
    4e78:	68a3      	ldr	r3, [r4, #8]
	list->head = NULL;
    4e7a:	2000      	movs	r0, #0
	list->tail = NULL;
    4e7c:	e9c3 0000 	strd	r0, r0, [r3]
}
    4e80:	bd10      	pop	{r4, pc}

00004e82 <clock_stop>:
	const struct nrf_clock_control_config *config =
    4e82:	6802      	ldr	r2, [r0, #0]
{
    4e84:	b573      	push	{r0, r1, r4, r5, r6, lr}
	const struct nrf_clock_control_config *config =
    4e86:	6895      	ldr	r5, [r2, #8]
	struct nrf_clock_control *data = dev->driver_data;
    4e88:	6884      	ldr	r4, [r0, #8]
	__asm__ volatile(
    4e8a:	f04f 0320 	mov.w	r3, #32
    4e8e:	f3ef 8611 	mrs	r6, BASEPRI
    4e92:	f383 8811 	msr	BASEPRI, r3
    4e96:	f3bf 8f6f 	isb	sy
	if (data->ref == 0) {
    4e9a:	7a23      	ldrb	r3, [r4, #8]
    4e9c:	b303      	cbz	r3, 4ee0 <clock_stop+0x5e>
	data->ref--;
    4e9e:	3b01      	subs	r3, #1
    4ea0:	b2db      	uxtb	r3, r3
    4ea2:	7223      	strb	r3, [r4, #8]
	if (data->ref == 0) {
    4ea4:	b9fb      	cbnz	r3, 4ee6 <clock_stop+0x64>
    4ea6:	e9c4 3300 	strd	r3, r3, [r4]
		do_stop =  (config->stop_handler) ?
    4eaa:	686b      	ldr	r3, [r5, #4]
				config->stop_handler(dev) : true;
    4eac:	b9a3      	cbnz	r3, 4ed8 <clock_stop+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4eae:	7aeb      	ldrb	r3, [r5, #11]
    4eb0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4eb4:	2201      	movs	r2, #1
    4eb6:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4eb8:	892b      	ldrh	r3, [r5, #8]
    4eba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4ebe:	2200      	movs	r2, #0
    4ec0:	601a      	str	r2, [r3, #0]
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    4ec2:	681b      	ldr	r3, [r3, #0]
    4ec4:	9301      	str	r3, [sp, #4]
    (void)dummy;
    4ec6:	9b01      	ldr	r3, [sp, #4]
		data->started = false;
    4ec8:	2000      	movs	r0, #0
    4eca:	7260      	strb	r0, [r4, #9]
	__asm__ volatile(
    4ecc:	f386 8811 	msr	BASEPRI, r6
    4ed0:	f3bf 8f6f 	isb	sy
}
    4ed4:	b002      	add	sp, #8
    4ed6:	bd70      	pop	{r4, r5, r6, pc}
				config->stop_handler(dev) : true;
    4ed8:	4798      	blx	r3
    4eda:	2800      	cmp	r0, #0
    4edc:	d1e7      	bne.n	4eae <clock_stop+0x2c>
    4ede:	e7f3      	b.n	4ec8 <clock_stop+0x46>
		err = -EALREADY;
    4ee0:	f06f 0044 	mvn.w	r0, #68	; 0x44
    4ee4:	e7f2      	b.n	4ecc <clock_stop+0x4a>
	int err = 0;
    4ee6:	2000      	movs	r0, #0
    4ee8:	e7f0      	b.n	4ecc <clock_stop+0x4a>

00004eea <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    4eea:	4770      	bx	lr

00004eec <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
    4eec:	4770      	bx	lr

00004eee <z_irq_spurious>:
 * @return N/A
 */
void z_irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	z_arm_reserved();
    4eee:	f7fc bb8f 	b.w	1610 <z_arm_bus_fault>

00004ef2 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    4ef2:	4601      	mov	r1, r0
			reason = K_ERR_KERNEL_OOPS;
		}
	}

#endif /* CONFIG_USERSPACE */
	z_arm_fatal_error(reason, esf);
    4ef4:	6800      	ldr	r0, [r0, #0]
    4ef6:	f7fc bb95 	b.w	1624 <z_arm_fatal_error>

00004efa <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    4efa:	b508      	push	{r3, lr}
	handler();
    4efc:	f7fc fbe4 	bl	16c8 <z_SysNmiOnReset>
	z_arm_exc_exit();
}
    4f00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_exc_exit();
    4f04:	f7fc baae 	b.w	1464 <z_arm_exc_exit>

00004f08 <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    4f08:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
    4f0a:	2100      	movs	r1, #0
    4f0c:	a801      	add	r0, sp, #4
    4f0e:	f7fc ffbd 	bl	1e8c <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
    4f12:	b003      	add	sp, #12
    4f14:	f85d fb04 	ldr.w	pc, [sp], #4

00004f18 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
    4f18:	b570      	push	{r4, r5, r6, lr}
    4f1a:	3901      	subs	r1, #1
    4f1c:	4605      	mov	r5, r0
    4f1e:	462c      	mov	r4, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    4f20:	b142      	cbz	r2, 4f34 <strncpy+0x1c>
    4f22:	f811 3f01 	ldrb.w	r3, [r1, #1]!
    4f26:	1e56      	subs	r6, r2, #1
    4f28:	b92b      	cbnz	r3, 4f36 <strncpy+0x1e>
    4f2a:	442a      	add	r2, r5
		d++;
		n--;
	}

	while (n > 0) {
		*d = '\0';
    4f2c:	f804 3b01 	strb.w	r3, [r4], #1
	while (n > 0) {
    4f30:	42a2      	cmp	r2, r4
    4f32:	d1fb      	bne.n	4f2c <strncpy+0x14>
		d++;
		n--;
	}

	return dest;
}
    4f34:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
    4f36:	f805 3b01 	strb.w	r3, [r5], #1
		n--;
    4f3a:	4632      	mov	r2, r6
    4f3c:	e7ef      	b.n	4f1e <strncpy+0x6>

00004f3e <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
    4f3e:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
    4f40:	7802      	ldrb	r2, [r0, #0]
    4f42:	428a      	cmp	r2, r1
    4f44:	4603      	mov	r3, r0
    4f46:	f100 0001 	add.w	r0, r0, #1
    4f4a:	d004      	beq.n	4f56 <strchr+0x18>
    4f4c:	2a00      	cmp	r2, #0
    4f4e:	d1f7      	bne.n	4f40 <strchr+0x2>
		s++;
	}

	return (*s == tmp) ? (char *) s : NULL;
    4f50:	2900      	cmp	r1, #0
    4f52:	bf18      	it	ne
    4f54:	2300      	movne	r3, #0
}
    4f56:	4618      	mov	r0, r3
    4f58:	4770      	bx	lr

00004f5a <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    4f5a:	3801      	subs	r0, #1
    4f5c:	3901      	subs	r1, #1
    4f5e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    4f62:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    4f66:	4293      	cmp	r3, r2
    4f68:	d101      	bne.n	4f6e <strcmp+0x14>
    4f6a:	2b00      	cmp	r3, #0
    4f6c:	d1f7      	bne.n	4f5e <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    4f6e:	1a98      	subs	r0, r3, r2
    4f70:	4770      	bx	lr

00004f72 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    4f72:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    4f74:	ea81 0400 	eor.w	r4, r1, r0
    4f78:	07a5      	lsls	r5, r4, #30
    4f7a:	4603      	mov	r3, r0
    4f7c:	d00b      	beq.n	4f96 <memcpy+0x24>
    4f7e:	3b01      	subs	r3, #1
    4f80:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    4f82:	4291      	cmp	r1, r2
    4f84:	d11a      	bne.n	4fbc <memcpy+0x4a>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    4f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
    4f88:	2a00      	cmp	r2, #0
    4f8a:	d0fc      	beq.n	4f86 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    4f8c:	f811 4b01 	ldrb.w	r4, [r1], #1
    4f90:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    4f94:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
    4f96:	079c      	lsls	r4, r3, #30
    4f98:	d1f6      	bne.n	4f88 <memcpy+0x16>
    4f9a:	0895      	lsrs	r5, r2, #2
    4f9c:	00ac      	lsls	r4, r5, #2
    4f9e:	1f1e      	subs	r6, r3, #4
    4fa0:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
    4fa2:	42b9      	cmp	r1, r7
    4fa4:	d105      	bne.n	4fb2 <memcpy+0x40>
    4fa6:	f06f 0603 	mvn.w	r6, #3
    4faa:	fb06 2205 	mla	r2, r6, r5, r2
    4fae:	4423      	add	r3, r4
    4fb0:	e7e5      	b.n	4f7e <memcpy+0xc>
			*(d_word++) = *(s_word++);
    4fb2:	f851 cb04 	ldr.w	ip, [r1], #4
    4fb6:	f846 cf04 	str.w	ip, [r6, #4]!
			n -= sizeof(mem_word_t);
    4fba:	e7f2      	b.n	4fa2 <memcpy+0x30>
		*(d_byte++) = *(s_byte++);
    4fbc:	f811 4b01 	ldrb.w	r4, [r1], #1
    4fc0:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    4fc4:	e7dd      	b.n	4f82 <memcpy+0x10>

00004fc6 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    4fc6:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    4fc8:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
    4fca:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    4fcc:	079c      	lsls	r4, r3, #30
    4fce:	d110      	bne.n	4ff2 <memset+0x2c>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
    4fd0:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    4fd4:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    4fd8:	0894      	lsrs	r4, r2, #2
    4fda:	eb03 0684 	add.w	r6, r3, r4, lsl #2
    4fde:	42b3      	cmp	r3, r6
    4fe0:	d10d      	bne.n	4ffe <memset+0x38>
    4fe2:	f06f 0503 	mvn.w	r5, #3
    4fe6:	fb05 2404 	mla	r4, r5, r4, r2
    4fea:	441c      	add	r4, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    4fec:	42a3      	cmp	r3, r4
    4fee:	d109      	bne.n	5004 <memset+0x3e>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    4ff0:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    4ff2:	2a00      	cmp	r2, #0
    4ff4:	d0fc      	beq.n	4ff0 <memset+0x2a>
		*(d_byte++) = c_byte;
    4ff6:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    4ffa:	3a01      	subs	r2, #1
    4ffc:	e7e6      	b.n	4fcc <memset+0x6>
		*(d_word++) = c_word;
    4ffe:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
    5002:	e7ec      	b.n	4fde <memset+0x18>
		*(d_byte++) = c_byte;
    5004:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    5008:	e7f0      	b.n	4fec <memset+0x26>

0000500a <_to_x>:
{
    500a:	b5f0      	push	{r4, r5, r6, r7, lr}
    500c:	4603      	mov	r3, r0
		unsigned int d = n % base;
    500e:	fbb1 f7f2 	udiv	r7, r1, r2
    5012:	fb02 1517 	mls	r5, r2, r7, r1
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
    5016:	2d09      	cmp	r5, #9
    5018:	bf8c      	ite	hi
    501a:	2627      	movhi	r6, #39	; 0x27
    501c:	2600      	movls	r6, #0
    501e:	461c      	mov	r4, r3
    5020:	3530      	adds	r5, #48	; 0x30
    5022:	4435      	add	r5, r6
	} while (n);
    5024:	4291      	cmp	r1, r2
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
    5026:	f804 5b01 	strb.w	r5, [r4], #1
	} while (n);
    502a:	d206      	bcs.n	503a <_to_x+0x30>
	*buf = 0;
    502c:	2200      	movs	r2, #0
    502e:	7022      	strb	r2, [r4, #0]
	len = buf - start;
    5030:	1a24      	subs	r4, r4, r0
	for (buf--; buf > start; buf--, start++) {
    5032:	4283      	cmp	r3, r0
    5034:	d804      	bhi.n	5040 <_to_x+0x36>
}
    5036:	4620      	mov	r0, r4
    5038:	bdf0      	pop	{r4, r5, r6, r7, pc}
		n /= base;
    503a:	4639      	mov	r1, r7
    503c:	4623      	mov	r3, r4
    503e:	e7e6      	b.n	500e <_to_x+0x4>
		char tmp = *buf;
    5040:	781a      	ldrb	r2, [r3, #0]
		*buf = *start;
    5042:	7801      	ldrb	r1, [r0, #0]
    5044:	f803 1901 	strb.w	r1, [r3], #-1
		*start = tmp;
    5048:	f800 2b01 	strb.w	r2, [r0], #1
    504c:	e7f1      	b.n	5032 <_to_x+0x28>

0000504e <_rlrshift>:
{
    504e:	b570      	push	{r4, r5, r6, lr}
	*v = (*v & 1) + (*v >> 1);
    5050:	e9d0 6500 	ldrd	r6, r5, [r0]
    5054:	0872      	lsrs	r2, r6, #1
    5056:	f006 0301 	and.w	r3, r6, #1
    505a:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
    505e:	189b      	adds	r3, r3, r2
    5060:	f04f 0100 	mov.w	r1, #0
    5064:	ea4f 0455 	mov.w	r4, r5, lsr #1
    5068:	eb44 0101 	adc.w	r1, r4, r1
    506c:	e9c0 3100 	strd	r3, r1, [r0]
}
    5070:	bd70      	pop	{r4, r5, r6, pc}

00005072 <_ldiv5>:
	uint64_t rem = *v, quot = 0U, q;
    5072:	e9d0 3200 	ldrd	r3, r2, [r0]
{
    5076:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	rem += 2U;
    507a:	3302      	adds	r3, #2
		q = (uint64_t)(hi / 5U) << shifts[i];
    507c:	f04f 0705 	mov.w	r7, #5
    5080:	f04f 0c00 	mov.w	ip, #0
	rem += 2U;
    5084:	f142 0200 	adc.w	r2, r2, #0
		rem -= q * 5U;
    5088:	ebb3 060c 	subs.w	r6, r3, ip
		q = (uint64_t)(hi / 5U) << shifts[i];
    508c:	fbb2 fef7 	udiv	lr, r2, r7
		rem -= q * 5U;
    5090:	fb07 f10e 	mul.w	r1, r7, lr
    5094:	eb62 0101 	sbc.w	r1, r2, r1
		hi = rem >> shifts[i];
    5098:	08f2      	lsrs	r2, r6, #3
    509a:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
		q = (uint64_t)(hi / 5U) << shifts[i];
    509e:	fbb2 f1f7 	udiv	r1, r2, r7
    50a2:	00ca      	lsls	r2, r1, #3
		quot += q;
    50a4:	eb1c 0802 	adds.w	r8, ip, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
    50a8:	ea4f 7351 	mov.w	r3, r1, lsr #29
		quot += q;
    50ac:	eb4e 0903 	adc.w	r9, lr, r3
		rem -= q * 5U;
    50b0:	fba2 2307 	umull	r2, r3, r2, r7
    50b4:	1ab3      	subs	r3, r6, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
    50b6:	fbb3 f3f7 	udiv	r3, r3, r7
		quot += q;
    50ba:	eb18 0403 	adds.w	r4, r8, r3
    50be:	f149 0500 	adc.w	r5, r9, #0
	*v = quot;
    50c2:	e9c0 4500 	strd	r4, r5, [r0]
}
    50c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000050ca <_get_digit>:
	if (*digit_count > 0) {
    50ca:	680b      	ldr	r3, [r1, #0]
    50cc:	2b00      	cmp	r3, #0
{
    50ce:	b570      	push	{r4, r5, r6, lr}
	if (*digit_count > 0) {
    50d0:	dd10      	ble.n	50f4 <_get_digit+0x2a>
		*digit_count -= 1;
    50d2:	3b01      	subs	r3, #1
		*fr = *fr * 10U;
    50d4:	6802      	ldr	r2, [r0, #0]
		*digit_count -= 1;
    50d6:	600b      	str	r3, [r1, #0]
		*fr = *fr * 10U;
    50d8:	6844      	ldr	r4, [r0, #4]
    50da:	210a      	movs	r1, #10
    50dc:	fba2 5601 	umull	r5, r6, r2, r1
    50e0:	fb01 6604 	mla	r6, r1, r4, r6
		*fr &= 0x0FFFFFFFFFFFFFFFull;
    50e4:	f026 4370 	bic.w	r3, r6, #4026531840	; 0xf0000000
    50e8:	e9c0 5300 	strd	r5, r3, [r0]
		rval = ((*fr >> 60) & 0xF) + '0';
    50ec:	0f31      	lsrs	r1, r6, #28
    50ee:	3130      	adds	r1, #48	; 0x30
}
    50f0:	4608      	mov	r0, r1
    50f2:	bd70      	pop	{r4, r5, r6, pc}
		rval = '0';
    50f4:	2130      	movs	r1, #48	; 0x30
    50f6:	e7fb      	b.n	50f0 <_get_digit+0x26>

000050f8 <_stdout_hook_default>:
}
    50f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    50fc:	4770      	bx	lr

000050fe <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
    50fe:	684b      	ldr	r3, [r1, #4]
    5100:	2b01      	cmp	r3, #1
    5102:	dd07      	ble.n	5114 <sprintf_out+0x16>
		*(p->ptr) = c;
    5104:	680b      	ldr	r3, [r1, #0]
    5106:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
    5108:	680b      	ldr	r3, [r1, #0]
    510a:	3301      	adds	r3, #1
    510c:	600b      	str	r3, [r1, #0]
		p->len -= 1;
    510e:	684b      	ldr	r3, [r1, #4]
    5110:	3b01      	subs	r3, #1
    5112:	604b      	str	r3, [r1, #4]
}
    5114:	2000      	movs	r0, #0
    5116:	4770      	bx	lr

00005118 <z_platform_init>:
	nrfx_coredep_delay_us(time_us);
}

void z_platform_init(void)
{
	SystemInit();
    5118:	f7fd bfa4 	b.w	3064 <SystemInit>

0000511c <gpio_nrfx_write>:
{
    511c:	b510      	push	{r4, lr}
	return port->config->config_info;
    511e:	6804      	ldr	r4, [r0, #0]
    5120:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5122:	68a4      	ldr	r4, [r4, #8]
    5124:	69c0      	ldr	r0, [r0, #28]
    5126:	6824      	ldr	r4, [r4, #0]
	if (access_op == GPIO_ACCESS_BY_PORT) {
    5128:	2901      	cmp	r1, #1
    512a:	d104      	bne.n	5136 <gpio_nrfx_write+0x1a>
		nrf_gpio_port_out_write(reg, value ^ data->inverted);
    512c:	4058      	eors	r0, r3
    p_reg->OUT = value;
    512e:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
}
    5132:	2000      	movs	r0, #0
    5134:	bd10      	pop	{r4, pc}
		if ((value > 0) ^ ((BIT(pin) & data->inverted) != 0)) {
    5136:	3300      	adds	r3, #0
    5138:	fa20 f002 	lsr.w	r0, r0, r2
    513c:	f04f 0101 	mov.w	r1, #1
    5140:	bf18      	it	ne
    5142:	2301      	movne	r3, #1
    5144:	f000 0001 	and.w	r0, r0, #1
    5148:	4091      	lsls	r1, r2
    514a:	4283      	cmp	r3, r0
    p_reg->OUTSET = set_mask;
    514c:	bf14      	ite	ne
    514e:	f8c4 1508 	strne.w	r1, [r4, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    5152:	f8c4 150c 	streq.w	r1, [r4, #1292]	; 0x50c
    5156:	e7ec      	b.n	5132 <gpio_nrfx_write+0x16>

00005158 <gpio_nrfx_read>:
{
    5158:	b570      	push	{r4, r5, r6, lr}
	return port->config->config_info;
    515a:	6804      	ldr	r4, [r0, #0]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
    515c:	6880      	ldr	r0, [r0, #8]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    515e:	68a4      	ldr	r4, [r4, #8]
	u32_t port_val = (port_in | port_out) ^ data->inverted;
    5160:	69c0      	ldr	r0, [r0, #28]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    5162:	6825      	ldr	r5, [r4, #0]
    return p_reg->DIR;
    5164:	f8d5 6514 	ldr.w	r6, [r5, #1300]	; 0x514
    return p_reg->IN;
    5168:	f8d5 4510 	ldr.w	r4, [r5, #1296]	; 0x510
    return p_reg->OUT;
    516c:	f8d5 5504 	ldr.w	r5, [r5, #1284]	; 0x504
	u32_t port_val = (port_in | port_out) ^ data->inverted;
    5170:	4060      	eors	r0, r4
    5172:	406c      	eors	r4, r5
    5174:	4034      	ands	r4, r6
    5176:	4060      	eors	r0, r4
	if (access_op == GPIO_ACCESS_BY_PORT) {
    5178:	2901      	cmp	r1, #1
		*value = (port_val & BIT(pin)) ? 1 : 0;
    517a:	bf1c      	itt	ne
    517c:	40d0      	lsrne	r0, r2
    517e:	f000 0001 	andne.w	r0, r0, #1
    5182:	6018      	str	r0, [r3, #0]
}
    5184:	2000      	movs	r0, #0
    5186:	bd70      	pop	{r4, r5, r6, pc}

00005188 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    5188:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_IS_EMPTY(slist)
    518a:	6818      	ldr	r0, [r3, #0]
{
    518c:	b530      	push	{r4, r5, lr}
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
    518e:	b158      	cbz	r0, 51a8 <gpio_nrfx_manage_callback+0x20>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    5190:	2400      	movs	r4, #0
    5192:	4281      	cmp	r1, r0
    5194:	d113      	bne.n	51be <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
    5196:	6808      	ldr	r0, [r1, #0]
    5198:	b95c      	cbnz	r4, 51b2 <gpio_nrfx_manage_callback+0x2a>
    519a:	685c      	ldr	r4, [r3, #4]
	list->head = node;
    519c:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
    519e:	42a1      	cmp	r1, r4
    51a0:	d100      	bne.n	51a4 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    51a2:	6058      	str	r0, [r3, #4]
	parent->next = child;
    51a4:	2000      	movs	r0, #0
    51a6:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
    51a8:	b972      	cbnz	r2, 51c8 <gpio_nrfx_manage_callback+0x40>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    51aa:	2000      	movs	r0, #0
}
    51ac:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    51ae:	4628      	mov	r0, r5
    51b0:	e7ef      	b.n	5192 <gpio_nrfx_manage_callback+0xa>
	parent->next = child;
    51b2:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    51b4:	6858      	ldr	r0, [r3, #4]
    51b6:	4281      	cmp	r1, r0
	list->tail = node;
    51b8:	bf08      	it	eq
    51ba:	605c      	streq	r4, [r3, #4]
    51bc:	e7f2      	b.n	51a4 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    51be:	6805      	ldr	r5, [r0, #0]
	return node->next;
    51c0:	4604      	mov	r4, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    51c2:	2d00      	cmp	r5, #0
    51c4:	d1f3      	bne.n	51ae <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    51c6:	b13a      	cbz	r2, 51d8 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
    51c8:	681a      	ldr	r2, [r3, #0]
	parent->next = child;
    51ca:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    51cc:	6858      	ldr	r0, [r3, #4]
	list->head = node;
    51ce:	6019      	str	r1, [r3, #0]
Z_GENLIST_PREPEND(slist, snode)
    51d0:	2800      	cmp	r0, #0
    51d2:	d1ea      	bne.n	51aa <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    51d4:	6059      	str	r1, [r3, #4]
    51d6:	e7e9      	b.n	51ac <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    51d8:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    51dc:	e7e6      	b.n	51ac <gpio_nrfx_manage_callback+0x24>

000051de <gpio_nrfx_config>:
{
    51de:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    51e2:	4680      	mov	r8, r0
	struct gpio_nrfx_data *data = get_port_data(port);
    51e4:	6885      	ldr	r5, [r0, #8]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    51e6:	f403 4070 	and.w	r0, r3, #61440	; 0xf000
    51ea:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
{
    51ee:	461e      	mov	r6, r3
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    51f0:	d041      	beq.n	5276 <gpio_nrfx_config+0x98>
    51f2:	dc09      	bgt.n	5208 <gpio_nrfx_config+0x2a>
    51f4:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
    51f8:	d03f      	beq.n	527a <gpio_nrfx_config+0x9c>
    51fa:	f5b0 5f40 	cmp.w	r0, #12288	; 0x3000
    51fe:	d03e      	beq.n	527e <gpio_nrfx_config+0xa0>
    5200:	b190      	cbz	r0, 5228 <gpio_nrfx_config+0x4a>
		return -EINVAL;
    5202:	f06f 0015 	mvn.w	r0, #21
    5206:	e033      	b.n	5270 <gpio_nrfx_config+0x92>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    5208:	f5b0 4fe0 	cmp.w	r0, #28672	; 0x7000
    520c:	d039      	beq.n	5282 <gpio_nrfx_config+0xa4>
    520e:	dc04      	bgt.n	521a <gpio_nrfx_config+0x3c>
    5210:	f5b0 4fa0 	cmp.w	r0, #20480	; 0x5000
    5214:	d1f5      	bne.n	5202 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0H1;
    5216:	2003      	movs	r0, #3
    5218:	e006      	b.n	5228 <gpio_nrfx_config+0x4a>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK)) {
    521a:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
    521e:	d032      	beq.n	5286 <gpio_nrfx_config+0xa8>
    5220:	f5b0 4f50 	cmp.w	r0, #53248	; 0xd000
    5224:	d1ed      	bne.n	5202 <gpio_nrfx_config+0x24>
		drive = NRF_GPIO_PIN_H0D1;
    5226:	2007      	movs	r0, #7
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    5228:	f406 7740 	and.w	r7, r6, #768	; 0x300
    522c:	f5b7 7f80 	cmp.w	r7, #256	; 0x100
    5230:	d02b      	beq.n	528a <gpio_nrfx_config+0xac>
		pull = NRF_GPIO_PIN_NOPULL;
    5232:	f5a7 7400 	sub.w	r4, r7, #512	; 0x200
    5236:	4263      	negs	r3, r4
    5238:	4163      	adcs	r3, r4
	dir = ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT)
    523a:	f006 0c01 	and.w	ip, r6, #1
                               | ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos)
    523e:	ea4f 074c 	mov.w	r7, ip, lsl #1
	if (access_op == GPIO_ACCESS_BY_PORT) {
    5242:	2901      	cmp	r1, #1
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    5244:	ea47 070c 	orr.w	r7, r7, ip
		from_pin = pin;
    5248:	bf18      	it	ne
    524a:	b2d4      	uxtbne	r4, r2
    524c:	ea47 2000 	orr.w	r0, r7, r0, lsl #8
    5250:	ea40 0783 	orr.w	r7, r0, r3, lsl #2
		to_pin   = pin;
    5254:	bf12      	itee	ne
    5256:	46a1      	movne	r9, r4
		to_pin   = 31U;
    5258:	f04f 091f 	moveq.w	r9, #31
		from_pin = 0U;
    525c:	2400      	moveq	r4, #0
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    525e:	f04f 4aa0 	mov.w	sl, #1342177280	; 0x50000000
    5262:	f04f 0b01 	mov.w	fp, #1
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    5266:	f006 0302 	and.w	r3, r6, #2
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    526a:	45a1      	cmp	r9, r4
    526c:	d20f      	bcs.n	528e <gpio_nrfx_config+0xb0>
	return 0;
    526e:	2000      	movs	r0, #0
}
    5270:	b003      	add	sp, #12
    5272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		drive = NRF_GPIO_PIN_S0H1;
    5276:	2002      	movs	r0, #2
    5278:	e7d6      	b.n	5228 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_H0S1;
    527a:	2001      	movs	r0, #1
    527c:	e7d4      	b.n	5228 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0S1;
    527e:	2004      	movs	r0, #4
    5280:	e7d2      	b.n	5228 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_D0H1;
    5282:	2005      	movs	r0, #5
    5284:	e7d0      	b.n	5228 <gpio_nrfx_config+0x4a>
		drive = NRF_GPIO_PIN_S0D1;
    5286:	2006      	movs	r0, #6
    5288:	e7ce      	b.n	5228 <gpio_nrfx_config+0x4a>
		pull = NRF_GPIO_PIN_PULLUP;
    528a:	2303      	movs	r3, #3
    528c:	e7d5      	b.n	523a <gpio_nrfx_config+0x5c>
	return port->config->config_info;
    528e:	f8d8 2000 	ldr.w	r2, [r8]
		nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num,
    5292:	6892      	ldr	r2, [r2, #8]
    5294:	7911      	ldrb	r1, [r2, #4]
    5296:	f004 021f 	and.w	r2, r4, #31
    529a:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
    529e:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    52a2:	f84a 7022 	str.w	r7, [sl, r2, lsl #2]
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    52a6:	fa0b f204 	lsl.w	r2, fp, r4
    52aa:	68a9      	ldr	r1, [r5, #8]
    52ac:	2b00      	cmp	r3, #0
    52ae:	d025      	beq.n	52fc <gpio_nrfx_config+0x11e>
    52b0:	4311      	orrs	r1, r2
    52b2:	60a9      	str	r1, [r5, #8]
		WRITE_BIT(data->trig_edge, curr_pin, flags & GPIO_INT_EDGE);
    52b4:	6969      	ldr	r1, [r5, #20]
    52b6:	9301      	str	r3, [sp, #4]
    52b8:	06b0      	lsls	r0, r6, #26
    52ba:	bf4c      	ite	mi
    52bc:	4311      	orrmi	r1, r2
    52be:	4391      	bicpl	r1, r2
    52c0:	6169      	str	r1, [r5, #20]
		WRITE_BIT(data->double_edge, curr_pin,
    52c2:	69a9      	ldr	r1, [r5, #24]
    52c4:	0670      	lsls	r0, r6, #25
    52c6:	bf4c      	ite	mi
    52c8:	4311      	orrmi	r1, r2
    52ca:	4391      	bicpl	r1, r2
    52cc:	61a9      	str	r1, [r5, #24]
		WRITE_BIT(data->active_level, curr_pin,
    52ce:	6929      	ldr	r1, [r5, #16]
    52d0:	0770      	lsls	r0, r6, #29
    52d2:	bf4c      	ite	mi
    52d4:	4311      	orrmi	r1, r2
    52d6:	4391      	bicpl	r1, r2
    52d8:	6129      	str	r1, [r5, #16]
		WRITE_BIT(data->inverted, curr_pin, flags & GPIO_POL_INV);
    52da:	69e9      	ldr	r1, [r5, #28]
    52dc:	0630      	lsls	r0, r6, #24
    52de:	bf4c      	ite	mi
    52e0:	430a      	orrmi	r2, r1
    52e2:	ea21 0202 	bicpl.w	r2, r1, r2
    52e6:	61ea      	str	r2, [r5, #28]
		res = gpiote_pin_int_cfg(port, curr_pin);
    52e8:	4621      	mov	r1, r4
    52ea:	4640      	mov	r0, r8
    52ec:	f7fd faea 	bl	28c4 <gpiote_pin_int_cfg>
		if (res != 0) {
    52f0:	2800      	cmp	r0, #0
    52f2:	d1bd      	bne.n	5270 <gpio_nrfx_config+0x92>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    52f4:	3401      	adds	r4, #1
    52f6:	b2e4      	uxtb	r4, r4
    52f8:	9b01      	ldr	r3, [sp, #4]
    52fa:	e7b6      	b.n	526a <gpio_nrfx_config+0x8c>
		WRITE_BIT(data->pin_int_en, curr_pin, flags & GPIO_INT);
    52fc:	ea21 0102 	bic.w	r1, r1, r2
    5300:	e7d7      	b.n	52b2 <gpio_nrfx_config+0xd4>

00005302 <gpio_nrfx_pin_disable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
    5302:	2901      	cmp	r1, #1
{
    5304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
    5308:	bf18      	it	ne
    530a:	b2d4      	uxtbne	r4, r2
	struct gpio_nrfx_data *data = get_port_data(port);
    530c:	6887      	ldr	r7, [r0, #8]
{
    530e:	4606      	mov	r6, r0
		to_pin   = pin;
    5310:	bf12      	itee	ne
    5312:	4625      	movne	r5, r4
		to_pin   = 31U;
    5314:	251f      	moveq	r5, #31
		from_pin = 0U;
    5316:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
    5318:	f04f 0801 	mov.w	r8, #1
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    531c:	42ac      	cmp	r4, r5
    531e:	d902      	bls.n	5326 <gpio_nrfx_pin_disable_callback+0x24>
	return res;
    5320:	2000      	movs	r0, #0
}
    5322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
    5326:	68fb      	ldr	r3, [r7, #12]
    5328:	fa08 f204 	lsl.w	r2, r8, r4
    532c:	ea23 0302 	bic.w	r3, r3, r2
    5330:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
    5332:	4621      	mov	r1, r4
    5334:	4630      	mov	r0, r6
    5336:	f7fd fac5 	bl	28c4 <gpiote_pin_int_cfg>
		if (res != 0) {
    533a:	2800      	cmp	r0, #0
    533c:	d1f1      	bne.n	5322 <gpio_nrfx_pin_disable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    533e:	3401      	adds	r4, #1
    5340:	b2e4      	uxtb	r4, r4
    5342:	e7eb      	b.n	531c <gpio_nrfx_pin_disable_callback+0x1a>

00005344 <gpio_nrfx_pin_enable_callback>:
	if (access_op == GPIO_ACCESS_BY_PORT) {
    5344:	2901      	cmp	r1, #1
{
    5346:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		from_pin = pin;
    534a:	bf18      	it	ne
    534c:	b2d4      	uxtbne	r4, r2
	struct gpio_nrfx_data *data = get_port_data(port);
    534e:	6887      	ldr	r7, [r0, #8]
{
    5350:	4606      	mov	r6, r0
		to_pin   = pin;
    5352:	bf12      	itee	ne
    5354:	4625      	movne	r5, r4
		to_pin   = 31U;
    5356:	251f      	moveq	r5, #31
		from_pin = 0U;
    5358:	2400      	moveq	r4, #0
		WRITE_BIT(data->int_en, curr_pin, enable);
    535a:	f04f 0801 	mov.w	r8, #1
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    535e:	42ac      	cmp	r4, r5
    5360:	d902      	bls.n	5368 <gpio_nrfx_pin_enable_callback+0x24>
	return res;
    5362:	2000      	movs	r0, #0
}
    5364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		WRITE_BIT(data->int_en, curr_pin, enable);
    5368:	68fb      	ldr	r3, [r7, #12]
    536a:	fa08 f204 	lsl.w	r2, r8, r4
    536e:	4313      	orrs	r3, r2
    5370:	60fb      	str	r3, [r7, #12]
		res = gpiote_pin_int_cfg(port, curr_pin);
    5372:	4621      	mov	r1, r4
    5374:	4630      	mov	r0, r6
    5376:	f7fd faa5 	bl	28c4 <gpiote_pin_int_cfg>
		if (res != 0) {
    537a:	2800      	cmp	r0, #0
    537c:	d1f2      	bne.n	5364 <gpio_nrfx_pin_enable_callback+0x20>
	for (u8_t curr_pin = from_pin; curr_pin <= to_pin; ++curr_pin) {
    537e:	3401      	adds	r4, #1
    5380:	b2e4      	uxtb	r4, r4
    5382:	e7ec      	b.n	535e <gpio_nrfx_pin_enable_callback+0x1a>

00005384 <uart_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
    5384:	6882      	ldr	r2, [r0, #8]
{
    5386:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    5388:	e892 0003 	ldmia.w	r2, {r0, r1}
    538c:	e883 0003 	stmia.w	r3, {r0, r1}
}
    5390:	2000      	movs	r0, #0
    5392:	4770      	bx	lr

00005394 <nrf_pwm_event_clear>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5394:	2300      	movs	r3, #0
    5396:	5043      	str	r3, [r0, r1]
{
    5398:	b082      	sub	sp, #8
    volatile uint32_t dummy = *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    539a:	5843      	ldr	r3, [r0, r1]
    539c:	9301      	str	r3, [sp, #4]
    (void)dummy;
    539e:	9b01      	ldr	r3, [sp, #4]
}
    53a0:	b002      	add	sp, #8
    53a2:	4770      	bx	lr

000053a4 <start_playback.isra.2>:
static uint32_t start_playback(nrfx_pwm_t const * p_instance,
    53a4:	b538      	push	{r3, r4, r5, lr}
    53a6:	461d      	mov	r5, r3
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    53a8:	2302      	movs	r3, #2
    53aa:	720b      	strb	r3, [r1, #8]
    if (p_cb->handler)
    53ac:	680b      	ldr	r3, [r1, #0]
    p_cb->flags = flags;
    53ae:	724a      	strb	r2, [r1, #9]
static uint32_t start_playback(nrfx_pwm_t const * p_instance,
    53b0:	4604      	mov	r4, r0
    if (p_cb->handler)
    53b2:	b17b      	cbz	r3, 53d4 <start_playback.isra.2+0x30>
            int_mask |= NRF_PWM_INT_SEQEND0_MASK;
    53b4:	f012 0f04 	tst.w	r2, #4
    53b8:	bf0c      	ite	eq
    53ba:	2182      	moveq	r1, #130	; 0x82
    53bc:	2192      	movne	r1, #146	; 0x92
        if (flags & NRFX_PWM_FLAG_SIGNAL_END_SEQ1)
    53be:	0710      	lsls	r0, r2, #28
            int_mask |= NRF_PWM_INT_SEQEND1_MASK;
    53c0:	bf48      	it	mi
    53c2:	f041 0120 	orrmi.w	r1, r1, #32
        if (flags & NRFX_PWM_FLAG_NO_EVT_FINISHED)
    53c6:	06d3      	lsls	r3, r2, #27
        nrf_pwm_int_set(p_instance->p_registers, int_mask);
    53c8:	6823      	ldr	r3, [r4, #0]
            int_mask &= ~NRF_PWM_INT_LOOPSDONE_MASK;
    53ca:	bf48      	it	mi
    53cc:	f021 0180 	bicmi.w	r1, r1, #128	; 0x80
    p_reg->INTEN = mask;
    53d0:	f8c3 1300 	str.w	r1, [r3, #768]	; 0x300
    nrf_pwm_event_clear(p_instance->p_registers, NRF_PWM_EVENT_STOPPED);
    53d4:	6820      	ldr	r0, [r4, #0]
    53d6:	f44f 7182 	mov.w	r1, #260	; 0x104
    53da:	f7ff ffdb 	bl	5394 <nrf_pwm_event_clear>
    if (flags & NRFX_PWM_FLAG_START_VIA_TASK)
    53de:	6820      	ldr	r0, [r4, #0]
    53e0:	f012 0f80 	tst.w	r2, #128	; 0x80
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    53e4:	bf05      	ittet	eq
    53e6:	2301      	moveq	r3, #1
    53e8:	5143      	streq	r3, [r0, r5]
    return ((uint32_t)p_reg + (uint32_t)task);
    53ea:	1940      	addne	r0, r0, r5
    return 0;
    53ec:	2000      	moveq	r0, #0
}
    53ee:	bd38      	pop	{r3, r4, r5, pc}

000053f0 <nrfx_pwm_stop>:
{
    53f0:	b538      	push	{r3, r4, r5, lr}
    53f2:	4605      	mov	r5, r0
    53f4:	460c      	mov	r4, r1
    if (nrfx_pwm_is_stopped(p_instance))
    53f6:	f7fe f821 	bl	343c <nrfx_pwm_is_stopped>
    53fa:	b950      	cbnz	r0, 5412 <nrfx_pwm_stop+0x22>
        nrf_pwm_task_trigger(p_instance->p_registers, NRF_PWM_TASK_STOP);
    53fc:	682b      	ldr	r3, [r5, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    53fe:	2201      	movs	r2, #1
    5400:	605a      	str	r2, [r3, #4]
            if (nrfx_pwm_is_stopped(p_instance))
    5402:	4628      	mov	r0, r5
    5404:	f7fe f81a 	bl	343c <nrfx_pwm_is_stopped>
    5408:	b918      	cbnz	r0, 5412 <nrfx_pwm_stop+0x22>
        } while (wait_until_stopped);
    540a:	2c00      	cmp	r4, #0
    540c:	d1f9      	bne.n	5402 <nrfx_pwm_stop+0x12>
}
    540e:	4620      	mov	r0, r4
    5410:	bd38      	pop	{r3, r4, r5, pc}
        ret_val = true;
    5412:	2401      	movs	r4, #1
    5414:	e7fb      	b.n	540e <nrfx_pwm_stop+0x1e>

00005416 <arch_system_halt>:
	__asm__ volatile(
    5416:	f04f 0220 	mov.w	r2, #32
    541a:	f3ef 8311 	mrs	r3, BASEPRI
    541e:	f382 8811 	msr	BASEPRI, r2
    5422:	f3bf 8f6f 	isb	sy
	}
    5426:	e7fe      	b.n	5426 <arch_system_halt+0x10>

00005428 <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
    5428:	f7ff bd60 	b.w	4eec <z_clock_idle_exit>

0000542c <k_mem_slab_init>:
{
    542c:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    542e:	2400      	movs	r4, #0
	slab->block_size = block_size;
    5430:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->free_list = NULL;
    5434:	e9c0 4405 	strd	r4, r4, [r0, #20]
	slab->buffer = buffer;
    5438:	6101      	str	r1, [r0, #16]
	for (j = 0U; j < slab->num_blocks; j++) {
    543a:	42a3      	cmp	r3, r4
    543c:	d102      	bne.n	5444 <k_mem_slab_init+0x18>
	list->tail = (sys_dnode_t *)list;
    543e:	e9c0 0000 	strd	r0, r0, [r0]
}
    5442:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    5444:	6945      	ldr	r5, [r0, #20]
    5446:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    5448:	3401      	adds	r4, #1
		slab->free_list = p;
    544a:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
    544c:	4411      	add	r1, r2
    544e:	e7f4      	b.n	543a <k_mem_slab_init+0xe>

00005450 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    5450:	7b43      	ldrb	r3, [r0, #13]
    5452:	06db      	lsls	r3, r3, #27
    5454:	bf03      	ittte	eq
    5456:	6980      	ldreq	r0, [r0, #24]
    5458:	fab0 f080 	clzeq	r0, r0
    545c:	0940      	lsreq	r0, r0, #5
    545e:	2000      	movne	r0, #0
}
    5460:	4770      	bx	lr

00005462 <z_find_first_thread_to_unpend>:
{
    5462:	b510      	push	{r4, lr}
    5464:	f04f 0320 	mov.w	r3, #32
    5468:	f3ef 8411 	mrs	r4, BASEPRI
    546c:	f383 8811 	msr	BASEPRI, r3
    5470:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
    5474:	f000 f83f 	bl	54f6 <z_priq_dumb_best>
	__asm__ volatile(
    5478:	f384 8811 	msr	BASEPRI, r4
    547c:	f3bf 8f6f 	isb	sy
}
    5480:	bd10      	pop	{r4, pc}

00005482 <z_unpend_thread_no_timeout>:
{
    5482:	b538      	push	{r3, r4, r5, lr}
    5484:	4604      	mov	r4, r0
	__asm__ volatile(
    5486:	f04f 0320 	mov.w	r3, #32
    548a:	f3ef 8511 	mrs	r5, BASEPRI
    548e:	f383 8811 	msr	BASEPRI, r3
    5492:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    5496:	4601      	mov	r1, r0
    5498:	6880      	ldr	r0, [r0, #8]
    549a:	f7fe fa53 	bl	3944 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    549e:	7b63      	ldrb	r3, [r4, #13]
    54a0:	f023 0302 	bic.w	r3, r3, #2
    54a4:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
    54a6:	f385 8811 	msr	BASEPRI, r5
    54aa:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
    54ae:	2300      	movs	r3, #0
    54b0:	60a3      	str	r3, [r4, #8]
}
    54b2:	bd38      	pop	{r3, r4, r5, pc}

000054b4 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    54b4:	b921      	cbnz	r1, 54c0 <z_reschedule+0xc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    54b6:	f3ef 8005 	mrs	r0, IPSR
    54ba:	b908      	cbnz	r0, 54c0 <z_reschedule+0xc>
    54bc:	f7fb bfe0 	b.w	1480 <arch_swap>
    54c0:	f381 8811 	msr	BASEPRI, r1
    54c4:	f3bf 8f6f 	isb	sy
}
    54c8:	4770      	bx	lr

000054ca <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    54ca:	4603      	mov	r3, r0
    54cc:	b920      	cbnz	r0, 54d8 <z_reschedule_irqlock+0xe>
    54ce:	f3ef 8205 	mrs	r2, IPSR
    54d2:	b90a      	cbnz	r2, 54d8 <z_reschedule_irqlock+0xe>
    54d4:	f7fb bfd4 	b.w	1480 <arch_swap>
    54d8:	f383 8811 	msr	BASEPRI, r3
    54dc:	f3bf 8f6f 	isb	sy
}
    54e0:	4770      	bx	lr

000054e2 <z_reschedule_unlocked>:
	__asm__ volatile(
    54e2:	f04f 0320 	mov.w	r3, #32
    54e6:	f3ef 8011 	mrs	r0, BASEPRI
    54ea:	f383 8811 	msr	BASEPRI, r3
    54ee:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    54f2:	f7ff bfea 	b.w	54ca <z_reschedule_irqlock>

000054f6 <z_priq_dumb_best>:
	return list->head == list;
    54f6:	6803      	ldr	r3, [r0, #0]
}
    54f8:	4298      	cmp	r0, r3
    54fa:	bf14      	ite	ne
    54fc:	4618      	movne	r0, r3
    54fe:	2000      	moveq	r0, #0
    5500:	4770      	bx	lr

00005502 <z_thread_timeout>:
	if (th->base.pended_on != NULL) {
    5502:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
    5506:	b570      	push	{r4, r5, r6, lr}
    5508:	4604      	mov	r4, r0
	struct k_thread *th = CONTAINER_OF(to, struct k_thread, base.timeout);
    550a:	f1a0 0518 	sub.w	r5, r0, #24
	if (th->base.pended_on != NULL) {
    550e:	b1cb      	cbz	r3, 5544 <z_thread_timeout+0x42>
    5510:	f04f 0320 	mov.w	r3, #32
    5514:	f3ef 8611 	mrs	r6, BASEPRI
    5518:	f383 8811 	msr	BASEPRI, r3
    551c:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    5520:	4629      	mov	r1, r5
    5522:	f850 0c10 	ldr.w	r0, [r0, #-16]
    5526:	f7fe fa0d 	bl	3944 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    552a:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    552e:	f023 0302 	bic.w	r3, r3, #2
    5532:	f804 3c0b 	strb.w	r3, [r4, #-11]
	__asm__ volatile(
    5536:	f386 8811 	msr	BASEPRI, r6
    553a:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
    553e:	2300      	movs	r3, #0
    5540:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    5544:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    5548:	f023 0314 	bic.w	r3, r3, #20
    554c:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
    5550:	4628      	mov	r0, r5
    5552:	f7ff ff7d 	bl	5450 <z_is_thread_ready>
    5556:	b120      	cbz	r0, 5562 <z_thread_timeout+0x60>
		z_add_thread_to_ready_q(thread);
    5558:	4628      	mov	r0, r5
}
    555a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    555e:	f7fe ba41 	b.w	39e4 <z_add_thread_to_ready_q>
    5562:	bd70      	pop	{r4, r5, r6, pc}

00005564 <z_unpend_first_thread>:
{
    5564:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    5566:	f04f 0320 	mov.w	r3, #32
    556a:	f3ef 8211 	mrs	r2, BASEPRI
    556e:	f383 8811 	msr	BASEPRI, r3
    5572:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
    5576:	f7ff ffbe 	bl	54f6 <z_priq_dumb_best>
    557a:	4604      	mov	r4, r0
	__asm__ volatile(
    557c:	f382 8811 	msr	BASEPRI, r2
    5580:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
    5584:	b1c8      	cbz	r0, 55ba <z_unpend_first_thread+0x56>
	__asm__ volatile(
    5586:	f04f 0320 	mov.w	r3, #32
    558a:	f3ef 8511 	mrs	r5, BASEPRI
    558e:	f383 8811 	msr	BASEPRI, r3
    5592:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
    5596:	4601      	mov	r1, r0
    5598:	6880      	ldr	r0, [r0, #8]
    559a:	f7fe f9d3 	bl	3944 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    559e:	7b63      	ldrb	r3, [r4, #13]
    55a0:	f023 0302 	bic.w	r3, r3, #2
    55a4:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
    55a6:	f385 8811 	msr	BASEPRI, r5
    55aa:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
    55ae:	2300      	movs	r3, #0
    55b0:	60a3      	str	r3, [r4, #8]
	return z_abort_timeout(&thread->base.timeout);
    55b2:	f104 0018 	add.w	r0, r4, #24
    55b6:	f000 f83e 	bl	5636 <z_abort_timeout>
}
    55ba:	4620      	mov	r0, r4
    55bc:	bd38      	pop	{r3, r4, r5, pc}

000055be <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    55be:	7b43      	ldrb	r3, [r0, #13]
    55c0:	06db      	lsls	r3, r3, #27
    55c2:	bf03      	ittte	eq
    55c4:	6980      	ldreq	r0, [r0, #24]
    55c6:	fab0 f080 	clzeq	r0, r0
    55ca:	0940      	lsreq	r0, r0, #5
    55cc:	2000      	movne	r0, #0
}
    55ce:	4770      	bx	lr

000055d0 <z_impl_k_thread_name_set>:
}
    55d0:	f06f 0046 	mvn.w	r0, #70	; 0x46
    55d4:	4770      	bx	lr

000055d6 <k_thread_name_get>:
}
    55d6:	2000      	movs	r0, #0
    55d8:	4770      	bx	lr

000055da <z_new_thread_init>:
{
    55da:	b510      	push	{r4, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
    55dc:	9c02      	ldr	r4, [sp, #8]
    55de:	7304      	strb	r4, [r0, #12]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;
    55e0:	7383      	strb	r3, [r0, #14]
	thread_base->thread_state = (u8_t)initial_state;
    55e2:	2404      	movs	r4, #4

	thread_base->sched_locked = 0U;
    55e4:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
    55e6:	7344      	strb	r4, [r0, #13]
	thread_base->sched_locked = 0U;
    55e8:	73c3      	strb	r3, [r0, #15]
	node->prev = NULL;
    55ea:	e9c0 3306 	strd	r3, r3, [r0, #24]
	thread->fn_abort = NULL;
    55ee:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
	thread->stack_info.size = (u32_t)stackSize;
    55f2:	e9c0 1216 	strd	r1, r2, [r0, #88]	; 0x58
}
    55f6:	bd10      	pop	{r4, pc}

000055f8 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
    55f8:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
    55fa:	b510      	push	{r4, lr}
    55fc:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
    55fe:	b103      	cbz	r3, 5602 <z_thread_single_abort+0xa>
		thread->fn_abort();
    5600:	4798      	blx	r3
	if (z_is_thread_ready(thread)) {
    5602:	4620      	mov	r0, r4
    5604:	f7ff ffdb 	bl	55be <z_is_thread_ready>
    5608:	b138      	cbz	r0, 561a <z_thread_single_abort+0x22>
		z_remove_thread_from_ready_q(thread);
    560a:	4620      	mov	r0, r4
    560c:	f7fe fa98 	bl	3b40 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_DEAD;
    5610:	7b63      	ldrb	r3, [r4, #13]
    5612:	f043 0308 	orr.w	r3, r3, #8
    5616:	7363      	strb	r3, [r4, #13]
}
    5618:	bd10      	pop	{r4, pc}
		if (z_is_thread_pending(thread)) {
    561a:	7b63      	ldrb	r3, [r4, #13]
    561c:	079b      	lsls	r3, r3, #30
    561e:	d502      	bpl.n	5626 <z_thread_single_abort+0x2e>
			z_unpend_thread_no_timeout(thread);
    5620:	4620      	mov	r0, r4
    5622:	f7ff ff2e 	bl	5482 <z_unpend_thread_no_timeout>
		if (z_is_thread_timeout_active(thread)) {
    5626:	69a3      	ldr	r3, [r4, #24]
    5628:	2b00      	cmp	r3, #0
    562a:	d0f1      	beq.n	5610 <z_thread_single_abort+0x18>
    562c:	f104 0018 	add.w	r0, r4, #24
    5630:	f000 f801 	bl	5636 <z_abort_timeout>
    5634:	e7ec      	b.n	5610 <z_thread_single_abort+0x18>

00005636 <z_abort_timeout>:
{
    5636:	b510      	push	{r4, lr}
	__asm__ volatile(
    5638:	f04f 0220 	mov.w	r2, #32
    563c:	f3ef 8411 	mrs	r4, BASEPRI
    5640:	f382 8811 	msr	BASEPRI, r2
    5644:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    5648:	6803      	ldr	r3, [r0, #0]
    564a:	b13b      	cbz	r3, 565c <z_abort_timeout+0x26>
			remove_timeout(to);
    564c:	f7fe fd08 	bl	4060 <remove_timeout>
			ret = 0;
    5650:	2000      	movs	r0, #0
	__asm__ volatile(
    5652:	f384 8811 	msr	BASEPRI, r4
    5656:	f3bf 8f6f 	isb	sy
}
    565a:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    565c:	f06f 0015 	mvn.w	r0, #21
    5660:	e7f7      	b.n	5652 <z_abort_timeout+0x1c>

00005662 <z_get_next_timeout_expiry>:
{
    5662:	b510      	push	{r4, lr}
	__asm__ volatile(
    5664:	f04f 0320 	mov.w	r3, #32
    5668:	f3ef 8411 	mrs	r4, BASEPRI
    566c:	f383 8811 	msr	BASEPRI, r3
    5670:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    5674:	f7fe fd08 	bl	4088 <next_timeout>
	__asm__ volatile(
    5678:	f384 8811 	msr	BASEPRI, r4
    567c:	f3bf 8f6f 	isb	sy
}
    5680:	bd10      	pop	{r4, pc}

00005682 <z_set_timeout_expiry>:
{
    5682:	b570      	push	{r4, r5, r6, lr}
    5684:	4604      	mov	r4, r0
    5686:	460e      	mov	r6, r1
	__asm__ volatile(
    5688:	f04f 0320 	mov.w	r3, #32
    568c:	f3ef 8511 	mrs	r5, BASEPRI
    5690:	f383 8811 	msr	BASEPRI, r3
    5694:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
    5698:	f7fe fcf6 	bl	4088 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    569c:	2801      	cmp	r0, #1
    569e:	dd05      	ble.n	56ac <z_set_timeout_expiry+0x2a>
    56a0:	42a0      	cmp	r0, r4
    56a2:	dd03      	ble.n	56ac <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
    56a4:	4631      	mov	r1, r6
    56a6:	4620      	mov	r0, r4
    56a8:	f7fb fe52 	bl	1350 <z_clock_set_timeout>
	__asm__ volatile(
    56ac:	f385 8811 	msr	BASEPRI, r5
    56b0:	f3bf 8f6f 	isb	sy
}
    56b4:	bd70      	pop	{r4, r5, r6, pc}

000056b6 <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
    56b6:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
    56b8:	f7fe fd9a 	bl	41f0 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
    56bc:	bd08      	pop	{r3, pc}

000056be <k_timer_init>:
	timer->status = 0U;
    56be:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
    56c0:	e9c0 1206 	strd	r1, r2, [r0, #24]
    56c4:	f100 0210 	add.w	r2, r0, #16
	timer->status = 0U;
    56c8:	6243      	str	r3, [r0, #36]	; 0x24
	list->tail = (sys_dnode_t *)list;
    56ca:	e9c0 2204 	strd	r2, r2, [r0, #16]
	node->prev = NULL;
    56ce:	e9c0 3300 	strd	r3, r3, [r0]
	timer->user_data = NULL;
    56d2:	6283      	str	r3, [r0, #40]	; 0x28
}
    56d4:	4770      	bx	lr

000056d6 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    56d6:	b510      	push	{r4, lr}
    56d8:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
    56da:	f7ff ffac 	bl	5636 <z_abort_timeout>

	if (inactive) {
    56de:	bb00      	cbnz	r0, 5722 <z_impl_k_timer_stop+0x4c>
		return;
	}

	if (timer->stop_fn != NULL) {
    56e0:	69e3      	ldr	r3, [r4, #28]
    56e2:	b10b      	cbz	r3, 56e8 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    56e4:	4620      	mov	r0, r4
    56e6:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
    56e8:	f104 0010 	add.w	r0, r4, #16
    56ec:	2100      	movs	r1, #0
    56ee:	f7ff feb8 	bl	5462 <z_find_first_thread_to_unpend>
	if (thread != NULL) {
    56f2:	4604      	mov	r4, r0
    56f4:	b1a8      	cbz	r0, 5722 <z_impl_k_timer_stop+0x4c>
		z_unpend_thread_no_timeout(thread);
    56f6:	f7ff fec4 	bl	5482 <z_unpend_thread_no_timeout>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
    56fa:	7b63      	ldrb	r3, [r4, #13]
    56fc:	06db      	lsls	r3, r3, #27
    56fe:	d104      	bne.n	570a <z_impl_k_timer_stop+0x34>
	if (z_is_thread_ready(thread)) {
    5700:	69a3      	ldr	r3, [r4, #24]
    5702:	b913      	cbnz	r3, 570a <z_impl_k_timer_stop+0x34>
		z_add_thread_to_ready_q(thread);
    5704:	4620      	mov	r0, r4
    5706:	f7fe f96d 	bl	39e4 <z_add_thread_to_ready_q>
	__asm__ volatile(
    570a:	f04f 0320 	mov.w	r3, #32
    570e:	f3ef 8011 	mrs	r0, BASEPRI
    5712:	f383 8811 	msr	BASEPRI, r3
    5716:	f3bf 8f6f 	isb	sy

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
		z_reschedule_unlocked();
	}
}
    571a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
    571e:	f7ff bed4 	b.w	54ca <z_reschedule_irqlock>
    5722:	bd10      	pop	{r4, pc}

00005724 <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
    5724:	4770      	bx	lr
